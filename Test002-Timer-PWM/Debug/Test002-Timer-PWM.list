
Test002-Timer-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000452c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004798  08004798  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a0  080047a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080047a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08004810  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004810  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfb4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d91  00000000  00000000  0002d08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002ee20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c8  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171e9  00000000  00000000  00030478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1b3  00000000  00000000  00047661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ffb6  00000000  00000000  00055814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e50  00000000  00000000  000e57cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e961c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046b4 	.word	0x080046b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080046b4 	.word	0x080046b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fbfe 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f830 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f938 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f90c 	bl	80007a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000590:	f000 f894 	bl	80006bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("Timer - PWM : LED(LD2) control");
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x60>)
 8000596:	f000 f9c9 	bl	800092c <ProgramStart>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x64>)
 800059e:	f001 fc47 	bl	8001e30 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("---------%d\r\n", htim2.Instance->CCR1);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x68>)
 80005ac:	f002 ff24 	bl	80033f8 <iprintf>
  while (1)
  {
	  htim2.Instance->CCR1++;
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <main+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b6:	3201      	adds	r2, #1
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
	  if(htim2.Instance->CCR1 > htim2.Instance->ARR) {
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <main+0x64>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <main+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d903      	bls.n	80005d2 <main+0x56>
		  htim2.Instance->CCR1 = 0;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <main+0x64>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2200      	movs	r2, #0
 80005d0:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fc46 	bl	8000e64 <HAL_Delay>
	  htim2.Instance->CCR1++;
 80005d8:	e7ea      	b.n	80005b0 <main+0x34>
 80005da:	bf00      	nop
 80005dc:	080046cc 	.word	0x080046cc
 80005e0:	20000084 	.word	0x20000084
 80005e4:	080046ec 	.word	0x080046ec

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f912 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000662:	2304      	movs	r3, #4
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe9e 	bl	80013b0 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f919 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f900 	bl	80018a0 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f903 	bl	80008b0 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_TIM2_Init+0xe8>)
 80006ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7-1;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_TIM2_Init+0xe8>)
 80006f6:	2206      	movs	r2, #6
 80006f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_TIM2_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000702:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_TIM2_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000716:	f001 fae3 	bl	8001ce0 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000720:	f000 f8c6 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	4619      	mov	r1, r3
 8000730:	481c      	ldr	r0, [pc, #112]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000732:	f001 fcef 	bl	8002114 <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800073c:	f000 f8b8 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000742:	f001 fb1c 	bl	8001d7e <HAL_TIM_PWM_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800074c:	f000 f8b0 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000760:	f002 f878 	bl	8002854 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800076a:	f000 f8a1 	bl	80008b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076e:	2360      	movs	r3, #96	; 0x60
 8000770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000786:	f001 fc03 	bl	8001f90 <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000790:	f000 f88e 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_TIM2_Init+0xe8>)
 8000796:	f000 f969 	bl	8000a6c <HAL_TIM_MspPostInit>

}
 800079a:	bf00      	nop
 800079c:	3738      	adds	r7, #56	; 0x38
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART2_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f002 f8a6 	bl	8002930 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f861 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000cc 	.word	0x200000cc
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_GPIO_Init+0xac>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_GPIO_Init+0xac>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_GPIO_Init+0xac>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0xb0>)
 800089a:	f000 fbed 	bl	8001078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020800 	.word	0x40020800

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <__io_getchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_getchar(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
   char ch;
   //데이터를 받을 때까지 기다려야 하므로 while을 사용해야 함
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 80008c2:	bf00      	nop
 80008c4:	1df9      	adds	r1, r7, #7
 80008c6:	230a      	movs	r3, #10
 80008c8:	2201      	movs	r2, #1
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <__io_getchar+0x44>)
 80008cc:	f002 f90b 	bl	8002ae6 <HAL_UART_Receive>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1f6      	bne.n	80008c4 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // echo: Serial 통신에서 받은 데이터를 그대로 돌려주는 것
 80008d6:	1df9      	adds	r1, r7, #7
 80008d8:	230a      	movs	r3, #10
 80008da:	2201      	movs	r2, #1
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <__io_getchar+0x44>)
 80008de:	f002 f877 	bl	80029d0 <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b0d      	cmp	r3, #13
 80008e6:	d105      	bne.n	80008f4 <__io_getchar+0x38>
 80008e8:	230a      	movs	r3, #10
 80008ea:	2201      	movs	r2, #1
 80008ec:	4905      	ldr	r1, [pc, #20]	; (8000904 <__io_getchar+0x48>)
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <__io_getchar+0x44>)
 80008f0:	f002 f86e 	bl	80029d0 <HAL_UART_Transmit>
   return ch;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000cc 	.word	0x200000cc
 8000904:	080046fc 	.word	0x080046fc

08000908 <__io_putchar>:
int __io_putchar(int ch) // Lowest output Function
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 8000910:	1d39      	adds	r1, r7, #4
 8000912:	230a      	movs	r3, #10
 8000914:	2201      	movs	r2, #1
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <__io_putchar+0x20>)
 8000918:	f002 f85a 	bl	80029d0 <HAL_UART_Transmit>
   return ch;
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000cc 	.word	0x200000cc

0800092c <ProgramStart>:
void ProgramStart(char *str)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 8000934:	f000 f830 	bl	8000998 <cls>
   Cursor(0,0);
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f836 	bl	80009ac <Cursor>
   printf("Program Name - %s\r\n", str);
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	480a      	ldr	r0, [pc, #40]	; (800096c <ProgramStart+0x40>)
 8000944:	f002 fd58 	bl	80033f8 <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <ProgramStart+0x44>)
 800094a:	f002 fdbb 	bl	80034c4 <puts>
   StandBy();
 800094e:	f000 f813 	bl	8000978 <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <ProgramStart+0x48>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6858      	ldr	r0, [r3, #4]
 8000958:	2300      	movs	r3, #0
 800095a:	2202      	movs	r2, #2
 800095c:	2100      	movs	r1, #0
 800095e:	f002 fdb9 	bl	80034d4 <setvbuf>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	08004700 	.word	0x08004700
 8000970:	08004714 	.word	0x08004714
 8000974:	20000064 	.word	0x20000064

08000978 <StandBy>:

void StandBy()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 800097c:	bf00      	nop
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <StandBy+0x1c>)
 8000984:	f000 fcfc 	bl	8001380 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f7      	bne.n	800097e <StandBy+0x6>
}
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020800 	.word	0x40020800

08000998 <cls>:

void cls() // 화면 clear
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
   printf("\033[2J");
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <cls+0x10>)
 800099e:	f002 fd2b 	bl	80033f8 <iprintf>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08004738 	.word	0x08004738

080009ac <Cursor>:

void Cursor(int x, int y)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 80009b6:	f107 000c 	add.w	r0, r7, #12
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	4906      	ldr	r1, [pc, #24]	; (80009d8 <Cursor+0x2c>)
 80009c0:	f002 fe36 	bl	8003630 <siprintf>
   puts(buf);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fd7b 	bl	80034c4 <puts>
}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	08004740 	.word	0x08004740

080009dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f000 faf8 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d10d      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_TIM_Base_MspInit+0x3c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_TIM_Base_MspInit+0x3c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_TIM_Base_MspInit+0x3c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8c:	d11d      	bne.n	8000aca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000ac6:	f000 fad7 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_UART_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b36:	230c      	movs	r3, #12
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b46:	2307      	movs	r3, #7
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_UART_MspInit+0x8c>)
 8000b52:	f000 fa91 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40004400 	.word	0x40004400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f934 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f7ff fe73 	bl	80008bc <__io_getchar>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fe77 	bl	8000908 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf1      	blt.n	8000c0c <_write+0x12>
  }
  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f002 fdf6 	bl	80038bc <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20020000 	.word	0x20020000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000114 	.word	0x20000114
 8000d04:	20000268 	.word	0x20000268

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d30:	f7ff ffea 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f002 fdb5 	bl	80038c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fc0d 	bl	800057c <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d70:	080047a8 	.word	0x080047a8
  ldr r2, =_sbss
 8000d74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d78:	20000268 	.word	0x20000268

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f931 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fe12 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f93b 	bl	800105e <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f911 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000118 	.word	0x20000118

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000118 	.word	0x20000118

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff47 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff5c 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffb0 	bl	8000fcc <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e159      	b.n	8001348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 8148 	bne.w	8001342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a2 	beq.w	8001342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b57      	ldr	r3, [pc, #348]	; (8001360 <HAL_GPIO_Init+0x2e8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a56      	ldr	r2, [pc, #344]	; (8001360 <HAL_GPIO_Init+0x2e8>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b54      	ldr	r3, [pc, #336]	; (8001360 <HAL_GPIO_Init+0x2e8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a52      	ldr	r2, [pc, #328]	; (8001364 <HAL_GPIO_Init+0x2ec>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a49      	ldr	r2, [pc, #292]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x202>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_GPIO_Init+0x2f4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x1fe>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a47      	ldr	r2, [pc, #284]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_GPIO_Init+0x2fc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x1f6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a45      	ldr	r2, [pc, #276]	; (8001378 <HAL_GPIO_Init+0x300>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x1f2>
 8001266:	2304      	movs	r3, #4
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x204>
 800126a:	2307      	movs	r3, #7
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x204>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x204>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x204>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x204>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x2ec>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_GPIO_Init+0x304>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <HAL_GPIO_Init+0x304>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_GPIO_Init+0x304>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_GPIO_Init+0x304>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <HAL_GPIO_Init+0x304>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1a      	ldr	r2, [pc, #104]	; (800137c <HAL_GPIO_Init+0x304>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_GPIO_Init+0x304>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_GPIO_Init+0x304>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f aea2 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e267      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d075      	beq.n	80014ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d00c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b85      	ldr	r3, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d112      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4b82      	ldr	r3, [pc, #520]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f2:	d10b      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	4b7e      	ldr	r3, [pc, #504]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05b      	beq.n	80014b8 <HAL_RCC_OscConfig+0x108>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d157      	bne.n	80014b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e242      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x74>
 8001416:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a75      	ldr	r2, [pc, #468]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6f      	ldr	r2, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6c      	ldr	r2, [pc, #432]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001448:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fcf0 	bl	8000e4c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fcec 	bl	8000e4c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e207      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xc0>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fcdc 	bl	8000e4c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcd8 	bl	8000e4c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1f3      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0xe8>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d063      	beq.n	800158e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014c6:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1c7      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4937      	ldr	r1, [pc, #220]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e03a      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fc91 	bl	8000e4c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fc8d 	bl	8000e4c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1a8      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4925      	ldr	r1, [pc, #148]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fc70 	bl	8000e4c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fc6c 	bl	8000e4c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e187      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d036      	beq.n	8001608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d016      	beq.n	80015d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fc50 	bl	8000e4c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc4c 	bl	8000e4c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e167      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x200>
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fc39 	bl	8000e4c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	e00e      	b.n	80015fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fc35 	bl	8000e4c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d907      	bls.n	80015fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e150      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	42470000 	.word	0x42470000
 80015f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ea      	bne.n	80015de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8097 	beq.w	8001744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b81      	ldr	r3, [pc, #516]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a7c      	ldr	r2, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b77      	ldr	r3, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b74      	ldr	r3, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a73      	ldr	r2, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fbf5 	bl	8000e4c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fbf1 	bl	8000e4c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e10c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x2ea>
 800168c:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a63      	ldr	r2, [pc, #396]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x30c>
 80016a2:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a5b      	ldr	r2, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 80016bc:	4b58      	ldr	r3, [pc, #352]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a57      	ldr	r2, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	4b55      	ldr	r3, [pc, #340]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a54      	ldr	r2, [pc, #336]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d015      	beq.n	8001708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fbb6 	bl	8000e4c <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fbb2 	bl	8000e4c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0cb      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0ee      	beq.n	80016e4 <HAL_RCC_OscConfig+0x334>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff fba0 	bl	8000e4c <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fb9c 	bl	8000e4c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0b5      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ee      	bne.n	8001710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	4a38      	ldr	r2, [pc, #224]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a1 	beq.w	8001890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	d05c      	beq.n	8001814 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d141      	bne.n	80017e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fb70 	bl	8000e4c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fb6c 	bl	8000e4c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e087      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	491b      	ldr	r1, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fb45 	bl	8000e4c <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fb41 	bl	8000e4c <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e05c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x416>
 80017e4:	e054      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb2e 	bl	8000e4c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb2a 	bl	8000e4c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e038      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000
 8001828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x4ec>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d028      	beq.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d121      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11a      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800185c:	4013      	ands	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001864:	4293      	cmp	r3, r2
 8001866:	d111      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	3b01      	subs	r3, #1
 8001876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0cc      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d90c      	bls.n	80018dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	494d      	ldr	r1, [pc, #308]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d044      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d119      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	2b03      	cmp	r3, #3
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e067      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff fa5c 	bl	8000e4c <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff fa58 	bl	8000e4c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e04f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d20c      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4916      	ldr	r1, [pc, #88]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490e      	ldr	r1, [pc, #56]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	490a      	ldr	r1, [pc, #40]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f9bc 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	0800474c 	.word	0x0800474c
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a70:	b094      	sub	sp, #80	; 0x50
 8001a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a84:	4b79      	ldr	r3, [pc, #484]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d00d      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	f200 80e1 	bhi.w	8001c58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9e:	e0db      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa4:	e0db      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa6:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aaa:	e0d8      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aac:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b6a      	ldr	r3, [pc, #424]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001acc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8001ada:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ade:	4622      	mov	r2, r4
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0159      	lsls	r1, r3, #5
 8001aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af0:	0150      	lsls	r0, r2, #5
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4621      	mov	r1, r4
 8001af8:	1a51      	subs	r1, r2, r1
 8001afa:	6139      	str	r1, [r7, #16]
 8001afc:	4629      	mov	r1, r5
 8001afe:	eb63 0301 	sbc.w	r3, r3, r1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b10:	4659      	mov	r1, fp
 8001b12:	018b      	lsls	r3, r1, #6
 8001b14:	4651      	mov	r1, sl
 8001b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	018a      	lsls	r2, r1, #6
 8001b1e:	4651      	mov	r1, sl
 8001b20:	ebb2 0801 	subs.w	r8, r2, r1
 8001b24:	4659      	mov	r1, fp
 8001b26:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3e:	4690      	mov	r8, r2
 8001b40:	4699      	mov	r9, r3
 8001b42:	4623      	mov	r3, r4
 8001b44:	eb18 0303 	adds.w	r3, r8, r3
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	eb49 0303 	adc.w	r3, r9, r3
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	024b      	lsls	r3, r1, #9
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b68:	4621      	mov	r1, r4
 8001b6a:	024a      	lsls	r2, r1, #9
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b72:	2200      	movs	r2, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b7c:	f7fe fb80 	bl	8000280 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b88:	e058      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	4611      	mov	r1, r2
 8001b96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba4:	4642      	mov	r2, r8
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	0159      	lsls	r1, r3, #5
 8001bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb6:	0150      	lsls	r0, r2, #5
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bdc:	ebb2 040a 	subs.w	r4, r2, sl
 8001be0:	eb63 050b 	sbc.w	r5, r3, fp
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	00eb      	lsls	r3, r5, #3
 8001bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf2:	00e2      	lsls	r2, r4, #3
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	18e3      	adds	r3, r4, r3
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	464b      	mov	r3, r9
 8001c00:	eb45 0303 	adc.w	r3, r5, r3
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c12:	4629      	mov	r1, r5
 8001c14:	028b      	lsls	r3, r1, #10
 8001c16:	4621      	mov	r1, r4
 8001c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	028a      	lsls	r2, r1, #10
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c26:	2200      	movs	r2, #0
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	61fa      	str	r2, [r7, #28]
 8001c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c30:	f7fe fb26 	bl	8000280 <__aeabi_uldivmod>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3750      	adds	r7, #80	; 0x50
 8001c64:	46bd      	mov	sp, r7
 8001c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	007a1200 	.word	0x007a1200

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	0800475c 	.word	0x0800475c

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	f7ff ffdc 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	0800475c 	.word	0x0800475c

08001ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e041      	b.n	8001d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fe90 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 fac0 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e041      	b.n	8001e14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d106      	bne.n	8001daa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f839 	bl	8001e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3304      	adds	r3, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f000 fa71 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <HAL_TIM_PWM_Start+0x24>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e022      	b.n	8001e9a <HAL_TIM_PWM_Start+0x6a>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d109      	bne.n	8001e6e <HAL_TIM_PWM_Start+0x3e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	e015      	b.n	8001e9a <HAL_TIM_PWM_Start+0x6a>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d109      	bne.n	8001e88 <HAL_TIM_PWM_Start+0x58>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e008      	b.n	8001e9a <HAL_TIM_PWM_Start+0x6a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	bf14      	ite	ne
 8001e94:	2301      	movne	r3, #1
 8001e96:	2300      	moveq	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e068      	b.n	8001f74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <HAL_TIM_PWM_Start+0x82>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eb0:	e013      	b.n	8001eda <HAL_TIM_PWM_Start+0xaa>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0x92>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec0:	e00b      	b.n	8001eda <HAL_TIM_PWM_Start+0xaa>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Start+0xa2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed0:	e003      	b.n	8001eda <HAL_TIM_PWM_Start+0xaa>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fc90 	bl	8002808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <HAL_TIM_PWM_Start+0x14c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d107      	bne.n	8001f02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_TIM_PWM_Start+0x14c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d018      	beq.n	8001f3e <HAL_TIM_PWM_Start+0x10e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f14:	d013      	beq.n	8001f3e <HAL_TIM_PWM_Start+0x10e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_TIM_PWM_Start+0x150>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00e      	beq.n	8001f3e <HAL_TIM_PWM_Start+0x10e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_TIM_PWM_Start+0x154>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_TIM_PWM_Start+0x10e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_TIM_PWM_Start+0x158>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_TIM_PWM_Start+0x10e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_TIM_PWM_Start+0x15c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d111      	bne.n	8001f62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d010      	beq.n	8001f72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	e007      	b.n	8001f72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40014000 	.word	0x40014000

08001f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e0ae      	b.n	800210c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	f200 809f 	bhi.w	80020fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001ff9 	.word	0x08001ff9
 8001fc8:	080020fd 	.word	0x080020fd
 8001fcc:	080020fd 	.word	0x080020fd
 8001fd0:	080020fd 	.word	0x080020fd
 8001fd4:	08002039 	.word	0x08002039
 8001fd8:	080020fd 	.word	0x080020fd
 8001fdc:	080020fd 	.word	0x080020fd
 8001fe0:	080020fd 	.word	0x080020fd
 8001fe4:	0800207b 	.word	0x0800207b
 8001fe8:	080020fd 	.word	0x080020fd
 8001fec:	080020fd 	.word	0x080020fd
 8001ff0:	080020fd 	.word	0x080020fd
 8001ff4:	080020bb 	.word	0x080020bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f9dc 	bl	80023bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0208 	orr.w	r2, r2, #8
 8002012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6999      	ldr	r1, [r3, #24]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	619a      	str	r2, [r3, #24]
      break;
 8002036:	e064      	b.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fa22 	bl	8002488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6999      	ldr	r1, [r3, #24]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	021a      	lsls	r2, r3, #8
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	619a      	str	r2, [r3, #24]
      break;
 8002078:	e043      	b.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fa6d 	bl	8002560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69da      	ldr	r2, [r3, #28]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0208 	orr.w	r2, r2, #8
 8002094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69da      	ldr	r2, [r3, #28]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0204 	bic.w	r2, r2, #4
 80020a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69d9      	ldr	r1, [r3, #28]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	61da      	str	r2, [r3, #28]
      break;
 80020b8:	e023      	b.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fab7 	bl	8002634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69d9      	ldr	r1, [r3, #28]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	61da      	str	r2, [r3, #28]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_TIM_ConfigClockSource+0x1c>
 800212c:	2302      	movs	r3, #2
 800212e:	e0b4      	b.n	800229a <HAL_TIM_ConfigClockSource+0x186>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800214e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002168:	d03e      	beq.n	80021e8 <HAL_TIM_ConfigClockSource+0xd4>
 800216a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216e:	f200 8087 	bhi.w	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	f000 8086 	beq.w	8002286 <HAL_TIM_ConfigClockSource+0x172>
 800217a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217e:	d87f      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 8002180:	2b70      	cmp	r3, #112	; 0x70
 8002182:	d01a      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0xa6>
 8002184:	2b70      	cmp	r3, #112	; 0x70
 8002186:	d87b      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 8002188:	2b60      	cmp	r3, #96	; 0x60
 800218a:	d050      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x11a>
 800218c:	2b60      	cmp	r3, #96	; 0x60
 800218e:	d877      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 8002190:	2b50      	cmp	r3, #80	; 0x50
 8002192:	d03c      	beq.n	800220e <HAL_TIM_ConfigClockSource+0xfa>
 8002194:	2b50      	cmp	r3, #80	; 0x50
 8002196:	d873      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d058      	beq.n	800224e <HAL_TIM_ConfigClockSource+0x13a>
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d86f      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 80021a0:	2b30      	cmp	r3, #48	; 0x30
 80021a2:	d064      	beq.n	800226e <HAL_TIM_ConfigClockSource+0x15a>
 80021a4:	2b30      	cmp	r3, #48	; 0x30
 80021a6:	d86b      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d060      	beq.n	800226e <HAL_TIM_ConfigClockSource+0x15a>
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d867      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d05c      	beq.n	800226e <HAL_TIM_ConfigClockSource+0x15a>
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d05a      	beq.n	800226e <HAL_TIM_ConfigClockSource+0x15a>
 80021b8:	e062      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021ca:	f000 fafd 	bl	80027c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	609a      	str	r2, [r3, #8]
      break;
 80021e6:	e04f      	b.n	8002288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021f8:	f000 fae6 	bl	80027c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800220a:	609a      	str	r2, [r3, #8]
      break;
 800220c:	e03c      	b.n	8002288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	461a      	mov	r2, r3
 800221c:	f000 fa5a 	bl	80026d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2150      	movs	r1, #80	; 0x50
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fab3 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 800222c:	e02c      	b.n	8002288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800223a:	461a      	mov	r2, r3
 800223c:	f000 fa79 	bl	8002732 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2160      	movs	r1, #96	; 0x60
 8002246:	4618      	mov	r0, r3
 8002248:	f000 faa3 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 800224c:	e01c      	b.n	8002288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	461a      	mov	r2, r3
 800225c:	f000 fa3a 	bl	80026d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fa93 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 800226c:	e00c      	b.n	8002288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f000 fa8a 	bl	8002792 <TIM_ITRx_SetConfig>
      break;
 800227e:	e003      	b.n	8002288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e000      	b.n	8002288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <TIM_Base_SetConfig+0xfc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00f      	beq.n	80022dc <TIM_Base_SetConfig+0x38>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d00b      	beq.n	80022dc <TIM_Base_SetConfig+0x38>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <TIM_Base_SetConfig+0x100>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <TIM_Base_SetConfig+0x38>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a36      	ldr	r2, [pc, #216]	; (80023a8 <TIM_Base_SetConfig+0x104>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_Base_SetConfig+0x38>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <TIM_Base_SetConfig+0x108>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <TIM_Base_SetConfig+0xfc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01b      	beq.n	800232e <TIM_Base_SetConfig+0x8a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fc:	d017      	beq.n	800232e <TIM_Base_SetConfig+0x8a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <TIM_Base_SetConfig+0x100>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <TIM_Base_SetConfig+0x8a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <TIM_Base_SetConfig+0x104>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00f      	beq.n	800232e <TIM_Base_SetConfig+0x8a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <TIM_Base_SetConfig+0x108>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00b      	beq.n	800232e <TIM_Base_SetConfig+0x8a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <TIM_Base_SetConfig+0x10c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <TIM_Base_SetConfig+0x8a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <TIM_Base_SetConfig+0x110>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d003      	beq.n	800232e <TIM_Base_SetConfig+0x8a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <TIM_Base_SetConfig+0x114>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d108      	bne.n	8002340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <TIM_Base_SetConfig+0xfc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d103      	bne.n	8002374 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d105      	bne.n	8002392 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f023 0201 	bic.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	611a      	str	r2, [r3, #16]
  }
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40000800 	.word	0x40000800
 80023ac:	40000c00 	.word	0x40000c00
 80023b0:	40014000 	.word	0x40014000
 80023b4:	40014400 	.word	0x40014400
 80023b8:	40014800 	.word	0x40014800

080023bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f023 0201 	bic.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 0302 	bic.w	r3, r3, #2
 8002404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <TIM_OC1_SetConfig+0xc8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d10c      	bne.n	8002432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f023 0308 	bic.w	r3, r3, #8
 800241e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <TIM_OC1_SetConfig+0xc8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d111      	bne.n	800245e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	621a      	str	r2, [r3, #32]
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40010000 	.word	0x40010000

08002488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f023 0210 	bic.w	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0320 	bic.w	r3, r3, #32
 80024d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <TIM_OC2_SetConfig+0xd4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10d      	bne.n	8002504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002502:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <TIM_OC2_SetConfig+0xd4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d113      	bne.n	8002534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800251a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000

08002560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <TIM_OC3_SetConfig+0xd0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10d      	bne.n	80025da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <TIM_OC3_SetConfig+0xd0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d113      	bne.n	800260a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40010000 	.word	0x40010000

08002634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800267e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	031b      	lsls	r3, r3, #12
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <TIM_OC4_SetConfig+0x9c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d109      	bne.n	80026a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800269a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	019b      	lsls	r3, r3, #6
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	621a      	str	r2, [r3, #32]
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40010000 	.word	0x40010000

080026d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f023 0201 	bic.w	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f023 030a 	bic.w	r3, r3, #10
 8002710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	621a      	str	r2, [r3, #32]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002732:	b480      	push	{r7}
 8002734:	b087      	sub	sp, #28
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f023 0210 	bic.w	r2, r3, #16
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800275c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	031b      	lsls	r3, r3, #12
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800276e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	621a      	str	r2, [r3, #32]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f043 0307 	orr.w	r3, r3, #7
 80027b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	021a      	lsls	r2, r3, #8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2201      	movs	r2, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	431a      	orrs	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002868:	2302      	movs	r3, #2
 800286a:	e050      	b.n	800290e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d013      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a15      	ldr	r2, [pc, #84]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a13      	ldr	r2, [pc, #76]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10c      	bne.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40000c00 	.word	0x40000c00
 800292c:	40014000 	.word	0x40014000

08002930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e042      	b.n	80029c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe f8c0 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fa09 	bl	8002d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d175      	bne.n	8002adc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_UART_Transmit+0x2c>
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e06e      	b.n	8002ade <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fa1d 	bl	8000e4c <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Transmit+0x6c>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a44:	e02e      	b.n	8002aa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f8df 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e03a      	b.n	8002ade <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10b      	bne.n	8002a86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3302      	adds	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	e007      	b.n	8002a96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	3301      	adds	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1cb      	bne.n	8002a46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2140      	movs	r1, #64	; 0x40
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f8ab 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e006      	b.n	8002ade <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08a      	sub	sp, #40	; 0x28
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	f040 8081 	bne.w	8002c0a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_UART_Receive+0x2e>
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e079      	b.n	8002c0c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2222      	movs	r2, #34	; 0x22
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe f98e 	bl	8000e4c <HAL_GetTick>
 8002b30:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b46:	d108      	bne.n	8002b5a <HAL_UART_Receive+0x74>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e003      	b.n	8002b62 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b62:	e047      	b.n	8002bf4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f850 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e042      	b.n	8002c0c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e01f      	b.n	8002be6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bae:	d007      	beq.n	8002bc0 <HAL_UART_Receive+0xda>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_UART_Receive+0xe8>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e008      	b.n	8002be0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1b2      	bne.n	8002b64 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c24:	e03b      	b.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d037      	beq.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe f90d 	bl	8000e4c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e03a      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d023      	beq.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d020      	beq.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d01d      	beq.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d116      	bne.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f81d 	bl	8002cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d0b4      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b095      	sub	sp, #84	; 0x54
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cee:	643a      	str	r2, [r7, #64]	; 0x40
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e5      	bne.n	8002cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3314      	adds	r3, #20
 8002d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d119      	bne.n	8002d72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f023 0310 	bic.w	r3, r3, #16
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d5e:	61ba      	str	r2, [r7, #24]
 8002d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e5      	bne.n	8002d3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d80:	bf00      	nop
 8002d82:	3754      	adds	r7, #84	; 0x54
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d90:	b0c0      	sub	sp, #256	; 0x100
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	68d9      	ldr	r1, [r3, #12]
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	ea40 0301 	orr.w	r3, r0, r1
 8002db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002de4:	f021 010c 	bic.w	r1, r1, #12
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002df2:	430b      	orrs	r3, r1
 8002df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e06:	6999      	ldr	r1, [r3, #24]
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	ea40 0301 	orr.w	r3, r0, r1
 8002e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <UART_SetConfig+0x2cc>)
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d005      	beq.n	8002e2c <UART_SetConfig+0xa0>
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b8d      	ldr	r3, [pc, #564]	; (800305c <UART_SetConfig+0x2d0>)
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d104      	bne.n	8002e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e2c:	f7fe ff44 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8002e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e34:	e003      	b.n	8002e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e36:	f7fe ff2b 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8002e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e48:	f040 810c 	bne.w	8003064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	1891      	adds	r1, r2, r2
 8002e64:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e66:	415b      	adcs	r3, r3
 8002e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e6e:	4621      	mov	r1, r4
 8002e70:	eb12 0801 	adds.w	r8, r2, r1
 8002e74:	4629      	mov	r1, r5
 8002e76:	eb43 0901 	adc.w	r9, r3, r1
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8e:	4690      	mov	r8, r2
 8002e90:	4699      	mov	r9, r3
 8002e92:	4623      	mov	r3, r4
 8002e94:	eb18 0303 	adds.w	r3, r8, r3
 8002e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	eb49 0303 	adc.w	r3, r9, r3
 8002ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eba:	460b      	mov	r3, r1
 8002ebc:	18db      	adds	r3, r3, r3
 8002ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	eb42 0303 	adc.w	r3, r2, r3
 8002ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ed0:	f7fd f9d6 	bl	8000280 <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <UART_SetConfig+0x2d4>)
 8002eda:	fba3 2302 	umull	r2, r3, r3, r2
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	011c      	lsls	r4, r3, #4
 8002ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	1891      	adds	r1, r2, r2
 8002efa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002efc:	415b      	adcs	r3, r3
 8002efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f04:	4641      	mov	r1, r8
 8002f06:	eb12 0a01 	adds.w	sl, r2, r1
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f24:	4692      	mov	sl, r2
 8002f26:	469b      	mov	fp, r3
 8002f28:	4643      	mov	r3, r8
 8002f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f32:	464b      	mov	r3, r9
 8002f34:	eb4b 0303 	adc.w	r3, fp, r3
 8002f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f50:	460b      	mov	r3, r1
 8002f52:	18db      	adds	r3, r3, r3
 8002f54:	643b      	str	r3, [r7, #64]	; 0x40
 8002f56:	4613      	mov	r3, r2
 8002f58:	eb42 0303 	adc.w	r3, r2, r3
 8002f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f66:	f7fd f98b 	bl	8000280 <__aeabi_uldivmod>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <UART_SetConfig+0x2d4>)
 8002f72:	fba3 2301 	umull	r2, r3, r3, r1
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2264      	movs	r2, #100	; 0x64
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	1acb      	subs	r3, r1, r3
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <UART_SetConfig+0x2d4>)
 8002f88:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f94:	441c      	add	r4, r3
 8002f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	1891      	adds	r1, r2, r2
 8002fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fb0:	415b      	adcs	r3, r3
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fb8:	4641      	mov	r1, r8
 8002fba:	1851      	adds	r1, r2, r1
 8002fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	414b      	adcs	r3, r1
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fd0:	4659      	mov	r1, fp
 8002fd2:	00cb      	lsls	r3, r1, #3
 8002fd4:	4651      	mov	r1, sl
 8002fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fda:	4651      	mov	r1, sl
 8002fdc:	00ca      	lsls	r2, r1, #3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fec:	464b      	mov	r3, r9
 8002fee:	460a      	mov	r2, r1
 8002ff0:	eb42 0303 	adc.w	r3, r2, r3
 8002ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003004:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800300c:	460b      	mov	r3, r1
 800300e:	18db      	adds	r3, r3, r3
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 8003012:	4613      	mov	r3, r2
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800301e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003022:	f7fd f92d 	bl	8000280 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <UART_SetConfig+0x2d4>)
 800302c:	fba3 1302 	umull	r1, r3, r3, r2
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	2164      	movs	r1, #100	; 0x64
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	3332      	adds	r3, #50	; 0x32
 800303e:	4a08      	ldr	r2, [pc, #32]	; (8003060 <UART_SetConfig+0x2d4>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	f003 0207 	and.w	r2, r3, #7
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4422      	add	r2, r4
 8003052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003054:	e106      	b.n	8003264 <UART_SetConfig+0x4d8>
 8003056:	bf00      	nop
 8003058:	40011000 	.word	0x40011000
 800305c:	40011400 	.word	0x40011400
 8003060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003068:	2200      	movs	r2, #0
 800306a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800306e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003076:	4642      	mov	r2, r8
 8003078:	464b      	mov	r3, r9
 800307a:	1891      	adds	r1, r2, r2
 800307c:	6239      	str	r1, [r7, #32]
 800307e:	415b      	adcs	r3, r3
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003086:	4641      	mov	r1, r8
 8003088:	1854      	adds	r4, r2, r1
 800308a:	4649      	mov	r1, r9
 800308c:	eb43 0501 	adc.w	r5, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	00eb      	lsls	r3, r5, #3
 800309a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309e:	00e2      	lsls	r2, r4, #3
 80030a0:	4614      	mov	r4, r2
 80030a2:	461d      	mov	r5, r3
 80030a4:	4643      	mov	r3, r8
 80030a6:	18e3      	adds	r3, r4, r3
 80030a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030ac:	464b      	mov	r3, r9
 80030ae:	eb45 0303 	adc.w	r3, r5, r3
 80030b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030d2:	4629      	mov	r1, r5
 80030d4:	008b      	lsls	r3, r1, #2
 80030d6:	4621      	mov	r1, r4
 80030d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030dc:	4621      	mov	r1, r4
 80030de:	008a      	lsls	r2, r1, #2
 80030e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030e4:	f7fd f8cc 	bl	8000280 <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4b60      	ldr	r3, [pc, #384]	; (8003270 <UART_SetConfig+0x4e4>)
 80030ee:	fba3 2302 	umull	r2, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	011c      	lsls	r4, r3, #4
 80030f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003100:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003108:	4642      	mov	r2, r8
 800310a:	464b      	mov	r3, r9
 800310c:	1891      	adds	r1, r2, r2
 800310e:	61b9      	str	r1, [r7, #24]
 8003110:	415b      	adcs	r3, r3
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003118:	4641      	mov	r1, r8
 800311a:	1851      	adds	r1, r2, r1
 800311c:	6139      	str	r1, [r7, #16]
 800311e:	4649      	mov	r1, r9
 8003120:	414b      	adcs	r3, r1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003130:	4659      	mov	r1, fp
 8003132:	00cb      	lsls	r3, r1, #3
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313a:	4651      	mov	r1, sl
 800313c:	00ca      	lsls	r2, r1, #3
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	4603      	mov	r3, r0
 8003144:	4642      	mov	r2, r8
 8003146:	189b      	adds	r3, r3, r2
 8003148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800314c:	464b      	mov	r3, r9
 800314e:	460a      	mov	r2, r1
 8003150:	eb42 0303 	adc.w	r3, r2, r3
 8003154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	67bb      	str	r3, [r7, #120]	; 0x78
 8003162:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003170:	4649      	mov	r1, r9
 8003172:	008b      	lsls	r3, r1, #2
 8003174:	4641      	mov	r1, r8
 8003176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317a:	4641      	mov	r1, r8
 800317c:	008a      	lsls	r2, r1, #2
 800317e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003182:	f7fd f87d 	bl	8000280 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4611      	mov	r1, r2
 800318c:	4b38      	ldr	r3, [pc, #224]	; (8003270 <UART_SetConfig+0x4e4>)
 800318e:	fba3 2301 	umull	r2, r3, r3, r1
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2264      	movs	r2, #100	; 0x64
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	1acb      	subs	r3, r1, r3
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	3332      	adds	r3, #50	; 0x32
 80031a0:	4a33      	ldr	r2, [pc, #204]	; (8003270 <UART_SetConfig+0x4e4>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ac:	441c      	add	r4, r3
 80031ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b2:	2200      	movs	r2, #0
 80031b4:	673b      	str	r3, [r7, #112]	; 0x70
 80031b6:	677a      	str	r2, [r7, #116]	; 0x74
 80031b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	1891      	adds	r1, r2, r2
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	415b      	adcs	r3, r3
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031cc:	4641      	mov	r1, r8
 80031ce:	1851      	adds	r1, r2, r1
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	4649      	mov	r1, r9
 80031d4:	414b      	adcs	r3, r1
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031e4:	4659      	mov	r1, fp
 80031e6:	00cb      	lsls	r3, r1, #3
 80031e8:	4651      	mov	r1, sl
 80031ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ee:	4651      	mov	r1, sl
 80031f0:	00ca      	lsls	r2, r1, #3
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	4642      	mov	r2, r8
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80031fe:	464b      	mov	r3, r9
 8003200:	460a      	mov	r2, r1
 8003202:	eb42 0303 	adc.w	r3, r2, r3
 8003206:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	663b      	str	r3, [r7, #96]	; 0x60
 8003212:	667a      	str	r2, [r7, #100]	; 0x64
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003220:	4649      	mov	r1, r9
 8003222:	008b      	lsls	r3, r1, #2
 8003224:	4641      	mov	r1, r8
 8003226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322a:	4641      	mov	r1, r8
 800322c:	008a      	lsls	r2, r1, #2
 800322e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003232:	f7fd f825 	bl	8000280 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <UART_SetConfig+0x4e4>)
 800323c:	fba3 1302 	umull	r1, r3, r3, r2
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	2164      	movs	r1, #100	; 0x64
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	3332      	adds	r3, #50	; 0x32
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <UART_SetConfig+0x4e4>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f003 020f 	and.w	r2, r3, #15
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4422      	add	r2, r4
 8003262:	609a      	str	r2, [r3, #8]
}
 8003264:	bf00      	nop
 8003266:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800326a:	46bd      	mov	sp, r7
 800326c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003270:	51eb851f 	.word	0x51eb851f

08003274 <std>:
 8003274:	2300      	movs	r3, #0
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
 800327a:	e9c0 3300 	strd	r3, r3, [r0]
 800327e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003282:	6083      	str	r3, [r0, #8]
 8003284:	8181      	strh	r1, [r0, #12]
 8003286:	6643      	str	r3, [r0, #100]	; 0x64
 8003288:	81c2      	strh	r2, [r0, #14]
 800328a:	6183      	str	r3, [r0, #24]
 800328c:	4619      	mov	r1, r3
 800328e:	2208      	movs	r2, #8
 8003290:	305c      	adds	r0, #92	; 0x5c
 8003292:	f000 fac5 	bl	8003820 <memset>
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <std+0x58>)
 8003298:	6263      	str	r3, [r4, #36]	; 0x24
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <std+0x5c>)
 800329c:	62a3      	str	r3, [r4, #40]	; 0x28
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <std+0x60>)
 80032a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <std+0x64>)
 80032a4:	6323      	str	r3, [r4, #48]	; 0x30
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <std+0x68>)
 80032a8:	6224      	str	r4, [r4, #32]
 80032aa:	429c      	cmp	r4, r3
 80032ac:	d006      	beq.n	80032bc <std+0x48>
 80032ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80032b2:	4294      	cmp	r4, r2
 80032b4:	d002      	beq.n	80032bc <std+0x48>
 80032b6:	33d0      	adds	r3, #208	; 0xd0
 80032b8:	429c      	cmp	r4, r3
 80032ba:	d105      	bne.n	80032c8 <std+0x54>
 80032bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c4:	f000 bb24 	b.w	8003910 <__retarget_lock_init_recursive>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	08003671 	.word	0x08003671
 80032d0:	08003693 	.word	0x08003693
 80032d4:	080036cb 	.word	0x080036cb
 80032d8:	080036ef 	.word	0x080036ef
 80032dc:	2000011c 	.word	0x2000011c

080032e0 <stdio_exit_handler>:
 80032e0:	4a02      	ldr	r2, [pc, #8]	; (80032ec <stdio_exit_handler+0xc>)
 80032e2:	4903      	ldr	r1, [pc, #12]	; (80032f0 <stdio_exit_handler+0x10>)
 80032e4:	4803      	ldr	r0, [pc, #12]	; (80032f4 <stdio_exit_handler+0x14>)
 80032e6:	f000 b869 	b.w	80033bc <_fwalk_sglue>
 80032ea:	bf00      	nop
 80032ec:	2000000c 	.word	0x2000000c
 80032f0:	0800447d 	.word	0x0800447d
 80032f4:	20000018 	.word	0x20000018

080032f8 <cleanup_stdio>:
 80032f8:	6841      	ldr	r1, [r0, #4]
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <cleanup_stdio+0x34>)
 80032fc:	4299      	cmp	r1, r3
 80032fe:	b510      	push	{r4, lr}
 8003300:	4604      	mov	r4, r0
 8003302:	d001      	beq.n	8003308 <cleanup_stdio+0x10>
 8003304:	f001 f8ba 	bl	800447c <_fflush_r>
 8003308:	68a1      	ldr	r1, [r4, #8]
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <cleanup_stdio+0x38>)
 800330c:	4299      	cmp	r1, r3
 800330e:	d002      	beq.n	8003316 <cleanup_stdio+0x1e>
 8003310:	4620      	mov	r0, r4
 8003312:	f001 f8b3 	bl	800447c <_fflush_r>
 8003316:	68e1      	ldr	r1, [r4, #12]
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <cleanup_stdio+0x3c>)
 800331a:	4299      	cmp	r1, r3
 800331c:	d004      	beq.n	8003328 <cleanup_stdio+0x30>
 800331e:	4620      	mov	r0, r4
 8003320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003324:	f001 b8aa 	b.w	800447c <_fflush_r>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	2000011c 	.word	0x2000011c
 8003330:	20000184 	.word	0x20000184
 8003334:	200001ec 	.word	0x200001ec

08003338 <global_stdio_init.part.0>:
 8003338:	b510      	push	{r4, lr}
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <global_stdio_init.part.0+0x30>)
 800333c:	4c0b      	ldr	r4, [pc, #44]	; (800336c <global_stdio_init.part.0+0x34>)
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <global_stdio_init.part.0+0x38>)
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	4620      	mov	r0, r4
 8003344:	2200      	movs	r2, #0
 8003346:	2104      	movs	r1, #4
 8003348:	f7ff ff94 	bl	8003274 <std>
 800334c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003350:	2201      	movs	r2, #1
 8003352:	2109      	movs	r1, #9
 8003354:	f7ff ff8e 	bl	8003274 <std>
 8003358:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800335c:	2202      	movs	r2, #2
 800335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003362:	2112      	movs	r1, #18
 8003364:	f7ff bf86 	b.w	8003274 <std>
 8003368:	20000254 	.word	0x20000254
 800336c:	2000011c 	.word	0x2000011c
 8003370:	080032e1 	.word	0x080032e1

08003374 <__sfp_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sfp_lock_acquire+0x8>)
 8003376:	f000 bacc 	b.w	8003912 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	2000025d 	.word	0x2000025d

08003380 <__sfp_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sfp_lock_release+0x8>)
 8003382:	f000 bac7 	b.w	8003914 <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	2000025d 	.word	0x2000025d

0800338c <__sinit>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	f7ff fff0 	bl	8003374 <__sfp_lock_acquire>
 8003394:	6a23      	ldr	r3, [r4, #32]
 8003396:	b11b      	cbz	r3, 80033a0 <__sinit+0x14>
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f7ff bff0 	b.w	8003380 <__sfp_lock_release>
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__sinit+0x28>)
 80033a2:	6223      	str	r3, [r4, #32]
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__sinit+0x2c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f5      	bne.n	8003398 <__sinit+0xc>
 80033ac:	f7ff ffc4 	bl	8003338 <global_stdio_init.part.0>
 80033b0:	e7f2      	b.n	8003398 <__sinit+0xc>
 80033b2:	bf00      	nop
 80033b4:	080032f9 	.word	0x080032f9
 80033b8:	20000254 	.word	0x20000254

080033bc <_fwalk_sglue>:
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4607      	mov	r7, r0
 80033c2:	4688      	mov	r8, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	2600      	movs	r6, #0
 80033c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033cc:	f1b9 0901 	subs.w	r9, r9, #1
 80033d0:	d505      	bpl.n	80033de <_fwalk_sglue+0x22>
 80033d2:	6824      	ldr	r4, [r4, #0]
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d1f7      	bne.n	80033c8 <_fwalk_sglue+0xc>
 80033d8:	4630      	mov	r0, r6
 80033da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033de:	89ab      	ldrh	r3, [r5, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d907      	bls.n	80033f4 <_fwalk_sglue+0x38>
 80033e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033e8:	3301      	adds	r3, #1
 80033ea:	d003      	beq.n	80033f4 <_fwalk_sglue+0x38>
 80033ec:	4629      	mov	r1, r5
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c0      	blx	r8
 80033f2:	4306      	orrs	r6, r0
 80033f4:	3568      	adds	r5, #104	; 0x68
 80033f6:	e7e9      	b.n	80033cc <_fwalk_sglue+0x10>

080033f8 <iprintf>:
 80033f8:	b40f      	push	{r0, r1, r2, r3}
 80033fa:	b507      	push	{r0, r1, r2, lr}
 80033fc:	4906      	ldr	r1, [pc, #24]	; (8003418 <iprintf+0x20>)
 80033fe:	ab04      	add	r3, sp, #16
 8003400:	6808      	ldr	r0, [r1, #0]
 8003402:	f853 2b04 	ldr.w	r2, [r3], #4
 8003406:	6881      	ldr	r1, [r0, #8]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	f000 fd07 	bl	8003e1c <_vfiprintf_r>
 800340e:	b003      	add	sp, #12
 8003410:	f85d eb04 	ldr.w	lr, [sp], #4
 8003414:	b004      	add	sp, #16
 8003416:	4770      	bx	lr
 8003418:	20000064 	.word	0x20000064

0800341c <_puts_r>:
 800341c:	6a03      	ldr	r3, [r0, #32]
 800341e:	b570      	push	{r4, r5, r6, lr}
 8003420:	6884      	ldr	r4, [r0, #8]
 8003422:	4605      	mov	r5, r0
 8003424:	460e      	mov	r6, r1
 8003426:	b90b      	cbnz	r3, 800342c <_puts_r+0x10>
 8003428:	f7ff ffb0 	bl	800338c <__sinit>
 800342c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800342e:	07db      	lsls	r3, r3, #31
 8003430:	d405      	bmi.n	800343e <_puts_r+0x22>
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	0598      	lsls	r0, r3, #22
 8003436:	d402      	bmi.n	800343e <_puts_r+0x22>
 8003438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800343a:	f000 fa6a 	bl	8003912 <__retarget_lock_acquire_recursive>
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	0719      	lsls	r1, r3, #28
 8003442:	d513      	bpl.n	800346c <_puts_r+0x50>
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	b18b      	cbz	r3, 800346c <_puts_r+0x50>
 8003448:	3e01      	subs	r6, #1
 800344a:	68a3      	ldr	r3, [r4, #8]
 800344c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003450:	3b01      	subs	r3, #1
 8003452:	60a3      	str	r3, [r4, #8]
 8003454:	b9e9      	cbnz	r1, 8003492 <_puts_r+0x76>
 8003456:	2b00      	cmp	r3, #0
 8003458:	da2e      	bge.n	80034b8 <_puts_r+0x9c>
 800345a:	4622      	mov	r2, r4
 800345c:	210a      	movs	r1, #10
 800345e:	4628      	mov	r0, r5
 8003460:	f000 f949 	bl	80036f6 <__swbuf_r>
 8003464:	3001      	adds	r0, #1
 8003466:	d007      	beq.n	8003478 <_puts_r+0x5c>
 8003468:	250a      	movs	r5, #10
 800346a:	e007      	b.n	800347c <_puts_r+0x60>
 800346c:	4621      	mov	r1, r4
 800346e:	4628      	mov	r0, r5
 8003470:	f000 f97e 	bl	8003770 <__swsetup_r>
 8003474:	2800      	cmp	r0, #0
 8003476:	d0e7      	beq.n	8003448 <_puts_r+0x2c>
 8003478:	f04f 35ff 	mov.w	r5, #4294967295
 800347c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800347e:	07da      	lsls	r2, r3, #31
 8003480:	d405      	bmi.n	800348e <_puts_r+0x72>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	059b      	lsls	r3, r3, #22
 8003486:	d402      	bmi.n	800348e <_puts_r+0x72>
 8003488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348a:	f000 fa43 	bl	8003914 <__retarget_lock_release_recursive>
 800348e:	4628      	mov	r0, r5
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	da04      	bge.n	80034a0 <_puts_r+0x84>
 8003496:	69a2      	ldr	r2, [r4, #24]
 8003498:	429a      	cmp	r2, r3
 800349a:	dc06      	bgt.n	80034aa <_puts_r+0x8e>
 800349c:	290a      	cmp	r1, #10
 800349e:	d004      	beq.n	80034aa <_puts_r+0x8e>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	7019      	strb	r1, [r3, #0]
 80034a8:	e7cf      	b.n	800344a <_puts_r+0x2e>
 80034aa:	4622      	mov	r2, r4
 80034ac:	4628      	mov	r0, r5
 80034ae:	f000 f922 	bl	80036f6 <__swbuf_r>
 80034b2:	3001      	adds	r0, #1
 80034b4:	d1c9      	bne.n	800344a <_puts_r+0x2e>
 80034b6:	e7df      	b.n	8003478 <_puts_r+0x5c>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	250a      	movs	r5, #10
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	6022      	str	r2, [r4, #0]
 80034c0:	701d      	strb	r5, [r3, #0]
 80034c2:	e7db      	b.n	800347c <_puts_r+0x60>

080034c4 <puts>:
 80034c4:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <puts+0xc>)
 80034c6:	4601      	mov	r1, r0
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	f7ff bfa7 	b.w	800341c <_puts_r>
 80034ce:	bf00      	nop
 80034d0:	20000064 	.word	0x20000064

080034d4 <setvbuf>:
 80034d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80034d8:	461d      	mov	r5, r3
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <setvbuf+0x158>)
 80034dc:	681f      	ldr	r7, [r3, #0]
 80034de:	4604      	mov	r4, r0
 80034e0:	460e      	mov	r6, r1
 80034e2:	4690      	mov	r8, r2
 80034e4:	b127      	cbz	r7, 80034f0 <setvbuf+0x1c>
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	b913      	cbnz	r3, 80034f0 <setvbuf+0x1c>
 80034ea:	4638      	mov	r0, r7
 80034ec:	f7ff ff4e 	bl	800338c <__sinit>
 80034f0:	f1b8 0f02 	cmp.w	r8, #2
 80034f4:	d006      	beq.n	8003504 <setvbuf+0x30>
 80034f6:	f1b8 0f01 	cmp.w	r8, #1
 80034fa:	f200 8094 	bhi.w	8003626 <setvbuf+0x152>
 80034fe:	2d00      	cmp	r5, #0
 8003500:	f2c0 8091 	blt.w	8003626 <setvbuf+0x152>
 8003504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003506:	07da      	lsls	r2, r3, #31
 8003508:	d405      	bmi.n	8003516 <setvbuf+0x42>
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	059b      	lsls	r3, r3, #22
 800350e:	d402      	bmi.n	8003516 <setvbuf+0x42>
 8003510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003512:	f000 f9fe 	bl	8003912 <__retarget_lock_acquire_recursive>
 8003516:	4621      	mov	r1, r4
 8003518:	4638      	mov	r0, r7
 800351a:	f000 ffaf 	bl	800447c <_fflush_r>
 800351e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003520:	b141      	cbz	r1, 8003534 <setvbuf+0x60>
 8003522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003526:	4299      	cmp	r1, r3
 8003528:	d002      	beq.n	8003530 <setvbuf+0x5c>
 800352a:	4638      	mov	r0, r7
 800352c:	f000 f9f4 	bl	8003918 <_free_r>
 8003530:	2300      	movs	r3, #0
 8003532:	6363      	str	r3, [r4, #52]	; 0x34
 8003534:	2300      	movs	r3, #0
 8003536:	61a3      	str	r3, [r4, #24]
 8003538:	6063      	str	r3, [r4, #4]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	0618      	lsls	r0, r3, #24
 800353e:	d503      	bpl.n	8003548 <setvbuf+0x74>
 8003540:	6921      	ldr	r1, [r4, #16]
 8003542:	4638      	mov	r0, r7
 8003544:	f000 f9e8 	bl	8003918 <_free_r>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	f1b8 0f02 	cmp.w	r8, #2
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	d05f      	beq.n	800361a <setvbuf+0x146>
 800355a:	ab01      	add	r3, sp, #4
 800355c:	466a      	mov	r2, sp
 800355e:	4621      	mov	r1, r4
 8003560:	4638      	mov	r0, r7
 8003562:	f000 ffb3 	bl	80044cc <__swhatbuf_r>
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	4318      	orrs	r0, r3
 800356a:	81a0      	strh	r0, [r4, #12]
 800356c:	bb2d      	cbnz	r5, 80035ba <setvbuf+0xe6>
 800356e:	9d00      	ldr	r5, [sp, #0]
 8003570:	4628      	mov	r0, r5
 8003572:	f000 fa1d 	bl	80039b0 <malloc>
 8003576:	4606      	mov	r6, r0
 8003578:	2800      	cmp	r0, #0
 800357a:	d150      	bne.n	800361e <setvbuf+0x14a>
 800357c:	f8dd 9000 	ldr.w	r9, [sp]
 8003580:	45a9      	cmp	r9, r5
 8003582:	d13e      	bne.n	8003602 <setvbuf+0x12e>
 8003584:	f04f 35ff 	mov.w	r5, #4294967295
 8003588:	2200      	movs	r2, #0
 800358a:	60a2      	str	r2, [r4, #8]
 800358c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003590:	6022      	str	r2, [r4, #0]
 8003592:	6122      	str	r2, [r4, #16]
 8003594:	2201      	movs	r2, #1
 8003596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800359a:	6162      	str	r2, [r4, #20]
 800359c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	07d1      	lsls	r1, r2, #31
 80035a4:	81a3      	strh	r3, [r4, #12]
 80035a6:	d404      	bmi.n	80035b2 <setvbuf+0xde>
 80035a8:	059b      	lsls	r3, r3, #22
 80035aa:	d402      	bmi.n	80035b2 <setvbuf+0xde>
 80035ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ae:	f000 f9b1 	bl	8003914 <__retarget_lock_release_recursive>
 80035b2:	4628      	mov	r0, r5
 80035b4:	b003      	add	sp, #12
 80035b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ba:	2e00      	cmp	r6, #0
 80035bc:	d0d8      	beq.n	8003570 <setvbuf+0x9c>
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	b913      	cbnz	r3, 80035c8 <setvbuf+0xf4>
 80035c2:	4638      	mov	r0, r7
 80035c4:	f7ff fee2 	bl	800338c <__sinit>
 80035c8:	f1b8 0f01 	cmp.w	r8, #1
 80035cc:	bf08      	it	eq
 80035ce:	89a3      	ldrheq	r3, [r4, #12]
 80035d0:	6026      	str	r6, [r4, #0]
 80035d2:	bf04      	itt	eq
 80035d4:	f043 0301 	orreq.w	r3, r3, #1
 80035d8:	81a3      	strheq	r3, [r4, #12]
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	f013 0208 	ands.w	r2, r3, #8
 80035e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80035e4:	d01d      	beq.n	8003622 <setvbuf+0x14e>
 80035e6:	07da      	lsls	r2, r3, #31
 80035e8:	bf41      	itttt	mi
 80035ea:	2200      	movmi	r2, #0
 80035ec:	426d      	negmi	r5, r5
 80035ee:	60a2      	strmi	r2, [r4, #8]
 80035f0:	61a5      	strmi	r5, [r4, #24]
 80035f2:	bf58      	it	pl
 80035f4:	60a5      	strpl	r5, [r4, #8]
 80035f6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80035f8:	f015 0501 	ands.w	r5, r5, #1
 80035fc:	d0d4      	beq.n	80035a8 <setvbuf+0xd4>
 80035fe:	2500      	movs	r5, #0
 8003600:	e7d7      	b.n	80035b2 <setvbuf+0xde>
 8003602:	4648      	mov	r0, r9
 8003604:	f000 f9d4 	bl	80039b0 <malloc>
 8003608:	4606      	mov	r6, r0
 800360a:	2800      	cmp	r0, #0
 800360c:	d0ba      	beq.n	8003584 <setvbuf+0xb0>
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003614:	81a3      	strh	r3, [r4, #12]
 8003616:	464d      	mov	r5, r9
 8003618:	e7d1      	b.n	80035be <setvbuf+0xea>
 800361a:	2500      	movs	r5, #0
 800361c:	e7b4      	b.n	8003588 <setvbuf+0xb4>
 800361e:	46a9      	mov	r9, r5
 8003620:	e7f5      	b.n	800360e <setvbuf+0x13a>
 8003622:	60a2      	str	r2, [r4, #8]
 8003624:	e7e7      	b.n	80035f6 <setvbuf+0x122>
 8003626:	f04f 35ff 	mov.w	r5, #4294967295
 800362a:	e7c2      	b.n	80035b2 <setvbuf+0xde>
 800362c:	20000064 	.word	0x20000064

08003630 <siprintf>:
 8003630:	b40e      	push	{r1, r2, r3}
 8003632:	b500      	push	{lr}
 8003634:	b09c      	sub	sp, #112	; 0x70
 8003636:	ab1d      	add	r3, sp, #116	; 0x74
 8003638:	9002      	str	r0, [sp, #8]
 800363a:	9006      	str	r0, [sp, #24]
 800363c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003640:	4809      	ldr	r0, [pc, #36]	; (8003668 <siprintf+0x38>)
 8003642:	9107      	str	r1, [sp, #28]
 8003644:	9104      	str	r1, [sp, #16]
 8003646:	4909      	ldr	r1, [pc, #36]	; (800366c <siprintf+0x3c>)
 8003648:	f853 2b04 	ldr.w	r2, [r3], #4
 800364c:	9105      	str	r1, [sp, #20]
 800364e:	6800      	ldr	r0, [r0, #0]
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	a902      	add	r1, sp, #8
 8003654:	f000 faba 	bl	8003bcc <_svfiprintf_r>
 8003658:	9b02      	ldr	r3, [sp, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	b01c      	add	sp, #112	; 0x70
 8003660:	f85d eb04 	ldr.w	lr, [sp], #4
 8003664:	b003      	add	sp, #12
 8003666:	4770      	bx	lr
 8003668:	20000064 	.word	0x20000064
 800366c:	ffff0208 	.word	0xffff0208

08003670 <__sread>:
 8003670:	b510      	push	{r4, lr}
 8003672:	460c      	mov	r4, r1
 8003674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003678:	f000 f8fc 	bl	8003874 <_read_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	bfab      	itete	ge
 8003680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003682:	89a3      	ldrhlt	r3, [r4, #12]
 8003684:	181b      	addge	r3, r3, r0
 8003686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800368a:	bfac      	ite	ge
 800368c:	6563      	strge	r3, [r4, #84]	; 0x54
 800368e:	81a3      	strhlt	r3, [r4, #12]
 8003690:	bd10      	pop	{r4, pc}

08003692 <__swrite>:
 8003692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003696:	461f      	mov	r7, r3
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	05db      	lsls	r3, r3, #23
 800369c:	4605      	mov	r5, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	4616      	mov	r6, r2
 80036a2:	d505      	bpl.n	80036b0 <__swrite+0x1e>
 80036a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a8:	2302      	movs	r3, #2
 80036aa:	2200      	movs	r2, #0
 80036ac:	f000 f8d0 	bl	8003850 <_lseek_r>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	4632      	mov	r2, r6
 80036be:	463b      	mov	r3, r7
 80036c0:	4628      	mov	r0, r5
 80036c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036c6:	f000 b8e7 	b.w	8003898 <_write_r>

080036ca <__sseek>:
 80036ca:	b510      	push	{r4, lr}
 80036cc:	460c      	mov	r4, r1
 80036ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d2:	f000 f8bd 	bl	8003850 <_lseek_r>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	bf15      	itete	ne
 80036dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036e6:	81a3      	strheq	r3, [r4, #12]
 80036e8:	bf18      	it	ne
 80036ea:	81a3      	strhne	r3, [r4, #12]
 80036ec:	bd10      	pop	{r4, pc}

080036ee <__sclose>:
 80036ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f2:	f000 b89d 	b.w	8003830 <_close_r>

080036f6 <__swbuf_r>:
 80036f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f8:	460e      	mov	r6, r1
 80036fa:	4614      	mov	r4, r2
 80036fc:	4605      	mov	r5, r0
 80036fe:	b118      	cbz	r0, 8003708 <__swbuf_r+0x12>
 8003700:	6a03      	ldr	r3, [r0, #32]
 8003702:	b90b      	cbnz	r3, 8003708 <__swbuf_r+0x12>
 8003704:	f7ff fe42 	bl	800338c <__sinit>
 8003708:	69a3      	ldr	r3, [r4, #24]
 800370a:	60a3      	str	r3, [r4, #8]
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	071a      	lsls	r2, r3, #28
 8003710:	d525      	bpl.n	800375e <__swbuf_r+0x68>
 8003712:	6923      	ldr	r3, [r4, #16]
 8003714:	b31b      	cbz	r3, 800375e <__swbuf_r+0x68>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	1a98      	subs	r0, r3, r2
 800371c:	6963      	ldr	r3, [r4, #20]
 800371e:	b2f6      	uxtb	r6, r6
 8003720:	4283      	cmp	r3, r0
 8003722:	4637      	mov	r7, r6
 8003724:	dc04      	bgt.n	8003730 <__swbuf_r+0x3a>
 8003726:	4621      	mov	r1, r4
 8003728:	4628      	mov	r0, r5
 800372a:	f000 fea7 	bl	800447c <_fflush_r>
 800372e:	b9e0      	cbnz	r0, 800376a <__swbuf_r+0x74>
 8003730:	68a3      	ldr	r3, [r4, #8]
 8003732:	3b01      	subs	r3, #1
 8003734:	60a3      	str	r3, [r4, #8]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	6022      	str	r2, [r4, #0]
 800373c:	701e      	strb	r6, [r3, #0]
 800373e:	6962      	ldr	r2, [r4, #20]
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	429a      	cmp	r2, r3
 8003744:	d004      	beq.n	8003750 <__swbuf_r+0x5a>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	07db      	lsls	r3, r3, #31
 800374a:	d506      	bpl.n	800375a <__swbuf_r+0x64>
 800374c:	2e0a      	cmp	r6, #10
 800374e:	d104      	bne.n	800375a <__swbuf_r+0x64>
 8003750:	4621      	mov	r1, r4
 8003752:	4628      	mov	r0, r5
 8003754:	f000 fe92 	bl	800447c <_fflush_r>
 8003758:	b938      	cbnz	r0, 800376a <__swbuf_r+0x74>
 800375a:	4638      	mov	r0, r7
 800375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375e:	4621      	mov	r1, r4
 8003760:	4628      	mov	r0, r5
 8003762:	f000 f805 	bl	8003770 <__swsetup_r>
 8003766:	2800      	cmp	r0, #0
 8003768:	d0d5      	beq.n	8003716 <__swbuf_r+0x20>
 800376a:	f04f 37ff 	mov.w	r7, #4294967295
 800376e:	e7f4      	b.n	800375a <__swbuf_r+0x64>

08003770 <__swsetup_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <__swsetup_r+0xac>)
 8003774:	4605      	mov	r5, r0
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	460c      	mov	r4, r1
 800377a:	b118      	cbz	r0, 8003784 <__swsetup_r+0x14>
 800377c:	6a03      	ldr	r3, [r0, #32]
 800377e:	b90b      	cbnz	r3, 8003784 <__swsetup_r+0x14>
 8003780:	f7ff fe04 	bl	800338c <__sinit>
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800378a:	0718      	lsls	r0, r3, #28
 800378c:	d422      	bmi.n	80037d4 <__swsetup_r+0x64>
 800378e:	06d9      	lsls	r1, r3, #27
 8003790:	d407      	bmi.n	80037a2 <__swsetup_r+0x32>
 8003792:	2309      	movs	r3, #9
 8003794:	602b      	str	r3, [r5, #0]
 8003796:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800379a:	81a3      	strh	r3, [r4, #12]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e034      	b.n	800380c <__swsetup_r+0x9c>
 80037a2:	0758      	lsls	r0, r3, #29
 80037a4:	d512      	bpl.n	80037cc <__swsetup_r+0x5c>
 80037a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037a8:	b141      	cbz	r1, 80037bc <__swsetup_r+0x4c>
 80037aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ae:	4299      	cmp	r1, r3
 80037b0:	d002      	beq.n	80037b8 <__swsetup_r+0x48>
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 f8b0 	bl	8003918 <_free_r>
 80037b8:	2300      	movs	r3, #0
 80037ba:	6363      	str	r3, [r4, #52]	; 0x34
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037c2:	81a3      	strh	r3, [r4, #12]
 80037c4:	2300      	movs	r3, #0
 80037c6:	6063      	str	r3, [r4, #4]
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	6023      	str	r3, [r4, #0]
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	6923      	ldr	r3, [r4, #16]
 80037d6:	b94b      	cbnz	r3, 80037ec <__swsetup_r+0x7c>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e2:	d003      	beq.n	80037ec <__swsetup_r+0x7c>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 fe96 	bl	8004518 <__smakebuf_r>
 80037ec:	89a0      	ldrh	r0, [r4, #12]
 80037ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037f2:	f010 0301 	ands.w	r3, r0, #1
 80037f6:	d00a      	beq.n	800380e <__swsetup_r+0x9e>
 80037f8:	2300      	movs	r3, #0
 80037fa:	60a3      	str	r3, [r4, #8]
 80037fc:	6963      	ldr	r3, [r4, #20]
 80037fe:	425b      	negs	r3, r3
 8003800:	61a3      	str	r3, [r4, #24]
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	b943      	cbnz	r3, 8003818 <__swsetup_r+0xa8>
 8003806:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800380a:	d1c4      	bne.n	8003796 <__swsetup_r+0x26>
 800380c:	bd38      	pop	{r3, r4, r5, pc}
 800380e:	0781      	lsls	r1, r0, #30
 8003810:	bf58      	it	pl
 8003812:	6963      	ldrpl	r3, [r4, #20]
 8003814:	60a3      	str	r3, [r4, #8]
 8003816:	e7f4      	b.n	8003802 <__swsetup_r+0x92>
 8003818:	2000      	movs	r0, #0
 800381a:	e7f7      	b.n	800380c <__swsetup_r+0x9c>
 800381c:	20000064 	.word	0x20000064

08003820 <memset>:
 8003820:	4402      	add	r2, r0
 8003822:	4603      	mov	r3, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <_close_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d06      	ldr	r5, [pc, #24]	; (800384c <_close_r+0x1c>)
 8003834:	2300      	movs	r3, #0
 8003836:	4604      	mov	r4, r0
 8003838:	4608      	mov	r0, r1
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	f7fd f9f9 	bl	8000c32 <_close>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_close_r+0x1a>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_close_r+0x1a>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	20000258 	.word	0x20000258

08003850 <_lseek_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4d07      	ldr	r5, [pc, #28]	; (8003870 <_lseek_r+0x20>)
 8003854:	4604      	mov	r4, r0
 8003856:	4608      	mov	r0, r1
 8003858:	4611      	mov	r1, r2
 800385a:	2200      	movs	r2, #0
 800385c:	602a      	str	r2, [r5, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f7fd fa0e 	bl	8000c80 <_lseek>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d102      	bne.n	800386e <_lseek_r+0x1e>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	b103      	cbz	r3, 800386e <_lseek_r+0x1e>
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	20000258 	.word	0x20000258

08003874 <_read_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4d07      	ldr	r5, [pc, #28]	; (8003894 <_read_r+0x20>)
 8003878:	4604      	mov	r4, r0
 800387a:	4608      	mov	r0, r1
 800387c:	4611      	mov	r1, r2
 800387e:	2200      	movs	r2, #0
 8003880:	602a      	str	r2, [r5, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f7fd f99c 	bl	8000bc0 <_read>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d102      	bne.n	8003892 <_read_r+0x1e>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	b103      	cbz	r3, 8003892 <_read_r+0x1e>
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	20000258 	.word	0x20000258

08003898 <_write_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d07      	ldr	r5, [pc, #28]	; (80038b8 <_write_r+0x20>)
 800389c:	4604      	mov	r4, r0
 800389e:	4608      	mov	r0, r1
 80038a0:	4611      	mov	r1, r2
 80038a2:	2200      	movs	r2, #0
 80038a4:	602a      	str	r2, [r5, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f7fd f9a7 	bl	8000bfa <_write>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_write_r+0x1e>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_write_r+0x1e>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	20000258 	.word	0x20000258

080038bc <__errno>:
 80038bc:	4b01      	ldr	r3, [pc, #4]	; (80038c4 <__errno+0x8>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000064 	.word	0x20000064

080038c8 <__libc_init_array>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4d0d      	ldr	r5, [pc, #52]	; (8003900 <__libc_init_array+0x38>)
 80038cc:	4c0d      	ldr	r4, [pc, #52]	; (8003904 <__libc_init_array+0x3c>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	2600      	movs	r6, #0
 80038d4:	42a6      	cmp	r6, r4
 80038d6:	d109      	bne.n	80038ec <__libc_init_array+0x24>
 80038d8:	4d0b      	ldr	r5, [pc, #44]	; (8003908 <__libc_init_array+0x40>)
 80038da:	4c0c      	ldr	r4, [pc, #48]	; (800390c <__libc_init_array+0x44>)
 80038dc:	f000 feea 	bl	80046b4 <_init>
 80038e0:	1b64      	subs	r4, r4, r5
 80038e2:	10a4      	asrs	r4, r4, #2
 80038e4:	2600      	movs	r6, #0
 80038e6:	42a6      	cmp	r6, r4
 80038e8:	d105      	bne.n	80038f6 <__libc_init_array+0x2e>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f0:	4798      	blx	r3
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7ee      	b.n	80038d4 <__libc_init_array+0xc>
 80038f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fa:	4798      	blx	r3
 80038fc:	3601      	adds	r6, #1
 80038fe:	e7f2      	b.n	80038e6 <__libc_init_array+0x1e>
 8003900:	080047a0 	.word	0x080047a0
 8003904:	080047a0 	.word	0x080047a0
 8003908:	080047a0 	.word	0x080047a0
 800390c:	080047a4 	.word	0x080047a4

08003910 <__retarget_lock_init_recursive>:
 8003910:	4770      	bx	lr

08003912 <__retarget_lock_acquire_recursive>:
 8003912:	4770      	bx	lr

08003914 <__retarget_lock_release_recursive>:
 8003914:	4770      	bx	lr
	...

08003918 <_free_r>:
 8003918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800391a:	2900      	cmp	r1, #0
 800391c:	d044      	beq.n	80039a8 <_free_r+0x90>
 800391e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003922:	9001      	str	r0, [sp, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f1a1 0404 	sub.w	r4, r1, #4
 800392a:	bfb8      	it	lt
 800392c:	18e4      	addlt	r4, r4, r3
 800392e:	f000 f8e7 	bl	8003b00 <__malloc_lock>
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <_free_r+0x94>)
 8003934:	9801      	ldr	r0, [sp, #4]
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	b933      	cbnz	r3, 8003948 <_free_r+0x30>
 800393a:	6063      	str	r3, [r4, #4]
 800393c:	6014      	str	r4, [r2, #0]
 800393e:	b003      	add	sp, #12
 8003940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003944:	f000 b8e2 	b.w	8003b0c <__malloc_unlock>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d908      	bls.n	800395e <_free_r+0x46>
 800394c:	6825      	ldr	r5, [r4, #0]
 800394e:	1961      	adds	r1, r4, r5
 8003950:	428b      	cmp	r3, r1
 8003952:	bf01      	itttt	eq
 8003954:	6819      	ldreq	r1, [r3, #0]
 8003956:	685b      	ldreq	r3, [r3, #4]
 8003958:	1949      	addeq	r1, r1, r5
 800395a:	6021      	streq	r1, [r4, #0]
 800395c:	e7ed      	b.n	800393a <_free_r+0x22>
 800395e:	461a      	mov	r2, r3
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b10b      	cbz	r3, 8003968 <_free_r+0x50>
 8003964:	42a3      	cmp	r3, r4
 8003966:	d9fa      	bls.n	800395e <_free_r+0x46>
 8003968:	6811      	ldr	r1, [r2, #0]
 800396a:	1855      	adds	r5, r2, r1
 800396c:	42a5      	cmp	r5, r4
 800396e:	d10b      	bne.n	8003988 <_free_r+0x70>
 8003970:	6824      	ldr	r4, [r4, #0]
 8003972:	4421      	add	r1, r4
 8003974:	1854      	adds	r4, r2, r1
 8003976:	42a3      	cmp	r3, r4
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	d1e0      	bne.n	800393e <_free_r+0x26>
 800397c:	681c      	ldr	r4, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	6053      	str	r3, [r2, #4]
 8003982:	440c      	add	r4, r1
 8003984:	6014      	str	r4, [r2, #0]
 8003986:	e7da      	b.n	800393e <_free_r+0x26>
 8003988:	d902      	bls.n	8003990 <_free_r+0x78>
 800398a:	230c      	movs	r3, #12
 800398c:	6003      	str	r3, [r0, #0]
 800398e:	e7d6      	b.n	800393e <_free_r+0x26>
 8003990:	6825      	ldr	r5, [r4, #0]
 8003992:	1961      	adds	r1, r4, r5
 8003994:	428b      	cmp	r3, r1
 8003996:	bf04      	itt	eq
 8003998:	6819      	ldreq	r1, [r3, #0]
 800399a:	685b      	ldreq	r3, [r3, #4]
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	bf04      	itt	eq
 80039a0:	1949      	addeq	r1, r1, r5
 80039a2:	6021      	streq	r1, [r4, #0]
 80039a4:	6054      	str	r4, [r2, #4]
 80039a6:	e7ca      	b.n	800393e <_free_r+0x26>
 80039a8:	b003      	add	sp, #12
 80039aa:	bd30      	pop	{r4, r5, pc}
 80039ac:	20000260 	.word	0x20000260

080039b0 <malloc>:
 80039b0:	4b02      	ldr	r3, [pc, #8]	; (80039bc <malloc+0xc>)
 80039b2:	4601      	mov	r1, r0
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	f000 b823 	b.w	8003a00 <_malloc_r>
 80039ba:	bf00      	nop
 80039bc:	20000064 	.word	0x20000064

080039c0 <sbrk_aligned>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4e0e      	ldr	r6, [pc, #56]	; (80039fc <sbrk_aligned+0x3c>)
 80039c4:	460c      	mov	r4, r1
 80039c6:	6831      	ldr	r1, [r6, #0]
 80039c8:	4605      	mov	r5, r0
 80039ca:	b911      	cbnz	r1, 80039d2 <sbrk_aligned+0x12>
 80039cc:	f000 fe1c 	bl	8004608 <_sbrk_r>
 80039d0:	6030      	str	r0, [r6, #0]
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f000 fe17 	bl	8004608 <_sbrk_r>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	d00a      	beq.n	80039f4 <sbrk_aligned+0x34>
 80039de:	1cc4      	adds	r4, r0, #3
 80039e0:	f024 0403 	bic.w	r4, r4, #3
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d007      	beq.n	80039f8 <sbrk_aligned+0x38>
 80039e8:	1a21      	subs	r1, r4, r0
 80039ea:	4628      	mov	r0, r5
 80039ec:	f000 fe0c 	bl	8004608 <_sbrk_r>
 80039f0:	3001      	adds	r0, #1
 80039f2:	d101      	bne.n	80039f8 <sbrk_aligned+0x38>
 80039f4:	f04f 34ff 	mov.w	r4, #4294967295
 80039f8:	4620      	mov	r0, r4
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	20000264 	.word	0x20000264

08003a00 <_malloc_r>:
 8003a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a04:	1ccd      	adds	r5, r1, #3
 8003a06:	f025 0503 	bic.w	r5, r5, #3
 8003a0a:	3508      	adds	r5, #8
 8003a0c:	2d0c      	cmp	r5, #12
 8003a0e:	bf38      	it	cc
 8003a10:	250c      	movcc	r5, #12
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	4607      	mov	r7, r0
 8003a16:	db01      	blt.n	8003a1c <_malloc_r+0x1c>
 8003a18:	42a9      	cmp	r1, r5
 8003a1a:	d905      	bls.n	8003a28 <_malloc_r+0x28>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	2600      	movs	r6, #0
 8003a22:	4630      	mov	r0, r6
 8003a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003afc <_malloc_r+0xfc>
 8003a2c:	f000 f868 	bl	8003b00 <__malloc_lock>
 8003a30:	f8d8 3000 	ldr.w	r3, [r8]
 8003a34:	461c      	mov	r4, r3
 8003a36:	bb5c      	cbnz	r4, 8003a90 <_malloc_r+0x90>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f7ff ffc0 	bl	80039c0 <sbrk_aligned>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	4604      	mov	r4, r0
 8003a44:	d155      	bne.n	8003af2 <_malloc_r+0xf2>
 8003a46:	f8d8 4000 	ldr.w	r4, [r8]
 8003a4a:	4626      	mov	r6, r4
 8003a4c:	2e00      	cmp	r6, #0
 8003a4e:	d145      	bne.n	8003adc <_malloc_r+0xdc>
 8003a50:	2c00      	cmp	r4, #0
 8003a52:	d048      	beq.n	8003ae6 <_malloc_r+0xe6>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	4631      	mov	r1, r6
 8003a58:	4638      	mov	r0, r7
 8003a5a:	eb04 0903 	add.w	r9, r4, r3
 8003a5e:	f000 fdd3 	bl	8004608 <_sbrk_r>
 8003a62:	4581      	cmp	r9, r0
 8003a64:	d13f      	bne.n	8003ae6 <_malloc_r+0xe6>
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	1a6d      	subs	r5, r5, r1
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f7ff ffa7 	bl	80039c0 <sbrk_aligned>
 8003a72:	3001      	adds	r0, #1
 8003a74:	d037      	beq.n	8003ae6 <_malloc_r+0xe6>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	442b      	add	r3, r5
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d038      	beq.n	8003af6 <_malloc_r+0xf6>
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	42a2      	cmp	r2, r4
 8003a88:	d12b      	bne.n	8003ae2 <_malloc_r+0xe2>
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e00f      	b.n	8003ab0 <_malloc_r+0xb0>
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	1b52      	subs	r2, r2, r5
 8003a94:	d41f      	bmi.n	8003ad6 <_malloc_r+0xd6>
 8003a96:	2a0b      	cmp	r2, #11
 8003a98:	d917      	bls.n	8003aca <_malloc_r+0xca>
 8003a9a:	1961      	adds	r1, r4, r5
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	6025      	str	r5, [r4, #0]
 8003aa0:	bf18      	it	ne
 8003aa2:	6059      	strne	r1, [r3, #4]
 8003aa4:	6863      	ldr	r3, [r4, #4]
 8003aa6:	bf08      	it	eq
 8003aa8:	f8c8 1000 	streq.w	r1, [r8]
 8003aac:	5162      	str	r2, [r4, r5]
 8003aae:	604b      	str	r3, [r1, #4]
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f104 060b 	add.w	r6, r4, #11
 8003ab6:	f000 f829 	bl	8003b0c <__malloc_unlock>
 8003aba:	f026 0607 	bic.w	r6, r6, #7
 8003abe:	1d23      	adds	r3, r4, #4
 8003ac0:	1af2      	subs	r2, r6, r3
 8003ac2:	d0ae      	beq.n	8003a22 <_malloc_r+0x22>
 8003ac4:	1b9b      	subs	r3, r3, r6
 8003ac6:	50a3      	str	r3, [r4, r2]
 8003ac8:	e7ab      	b.n	8003a22 <_malloc_r+0x22>
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	6862      	ldr	r2, [r4, #4]
 8003ace:	d1dd      	bne.n	8003a8c <_malloc_r+0x8c>
 8003ad0:	f8c8 2000 	str.w	r2, [r8]
 8003ad4:	e7ec      	b.n	8003ab0 <_malloc_r+0xb0>
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	6864      	ldr	r4, [r4, #4]
 8003ada:	e7ac      	b.n	8003a36 <_malloc_r+0x36>
 8003adc:	4634      	mov	r4, r6
 8003ade:	6876      	ldr	r6, [r6, #4]
 8003ae0:	e7b4      	b.n	8003a4c <_malloc_r+0x4c>
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	e7cc      	b.n	8003a80 <_malloc_r+0x80>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4638      	mov	r0, r7
 8003aec:	f000 f80e 	bl	8003b0c <__malloc_unlock>
 8003af0:	e797      	b.n	8003a22 <_malloc_r+0x22>
 8003af2:	6025      	str	r5, [r4, #0]
 8003af4:	e7dc      	b.n	8003ab0 <_malloc_r+0xb0>
 8003af6:	605b      	str	r3, [r3, #4]
 8003af8:	deff      	udf	#255	; 0xff
 8003afa:	bf00      	nop
 8003afc:	20000260 	.word	0x20000260

08003b00 <__malloc_lock>:
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <__malloc_lock+0x8>)
 8003b02:	f7ff bf06 	b.w	8003912 <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	2000025c 	.word	0x2000025c

08003b0c <__malloc_unlock>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	; (8003b14 <__malloc_unlock+0x8>)
 8003b0e:	f7ff bf01 	b.w	8003914 <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	2000025c 	.word	0x2000025c

08003b18 <__ssputs_r>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	688e      	ldr	r6, [r1, #8]
 8003b1e:	461f      	mov	r7, r3
 8003b20:	42be      	cmp	r6, r7
 8003b22:	680b      	ldr	r3, [r1, #0]
 8003b24:	4682      	mov	sl, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	4690      	mov	r8, r2
 8003b2a:	d82c      	bhi.n	8003b86 <__ssputs_r+0x6e>
 8003b2c:	898a      	ldrh	r2, [r1, #12]
 8003b2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b32:	d026      	beq.n	8003b82 <__ssputs_r+0x6a>
 8003b34:	6965      	ldr	r5, [r4, #20]
 8003b36:	6909      	ldr	r1, [r1, #16]
 8003b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b3c:	eba3 0901 	sub.w	r9, r3, r1
 8003b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b44:	1c7b      	adds	r3, r7, #1
 8003b46:	444b      	add	r3, r9
 8003b48:	106d      	asrs	r5, r5, #1
 8003b4a:	429d      	cmp	r5, r3
 8003b4c:	bf38      	it	cc
 8003b4e:	461d      	movcc	r5, r3
 8003b50:	0553      	lsls	r3, r2, #21
 8003b52:	d527      	bpl.n	8003ba4 <__ssputs_r+0x8c>
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7ff ff53 	bl	8003a00 <_malloc_r>
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	b360      	cbz	r0, 8003bb8 <__ssputs_r+0xa0>
 8003b5e:	6921      	ldr	r1, [r4, #16]
 8003b60:	464a      	mov	r2, r9
 8003b62:	f000 fd61 	bl	8004628 <memcpy>
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	6126      	str	r6, [r4, #16]
 8003b74:	6165      	str	r5, [r4, #20]
 8003b76:	444e      	add	r6, r9
 8003b78:	eba5 0509 	sub.w	r5, r5, r9
 8003b7c:	6026      	str	r6, [r4, #0]
 8003b7e:	60a5      	str	r5, [r4, #8]
 8003b80:	463e      	mov	r6, r7
 8003b82:	42be      	cmp	r6, r7
 8003b84:	d900      	bls.n	8003b88 <__ssputs_r+0x70>
 8003b86:	463e      	mov	r6, r7
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	4632      	mov	r2, r6
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	f000 fcff 	bl	8004590 <memmove>
 8003b92:	68a3      	ldr	r3, [r4, #8]
 8003b94:	1b9b      	subs	r3, r3, r6
 8003b96:	60a3      	str	r3, [r4, #8]
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	4433      	add	r3, r6
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba4:	462a      	mov	r2, r5
 8003ba6:	f000 fd4d 	bl	8004644 <_realloc_r>
 8003baa:	4606      	mov	r6, r0
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d1e0      	bne.n	8003b72 <__ssputs_r+0x5a>
 8003bb0:	6921      	ldr	r1, [r4, #16]
 8003bb2:	4650      	mov	r0, sl
 8003bb4:	f7ff feb0 	bl	8003918 <_free_r>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	f8ca 3000 	str.w	r3, [sl]
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bca:	e7e9      	b.n	8003ba0 <__ssputs_r+0x88>

08003bcc <_svfiprintf_r>:
 8003bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd0:	4698      	mov	r8, r3
 8003bd2:	898b      	ldrh	r3, [r1, #12]
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	b09d      	sub	sp, #116	; 0x74
 8003bd8:	4607      	mov	r7, r0
 8003bda:	460d      	mov	r5, r1
 8003bdc:	4614      	mov	r4, r2
 8003bde:	d50e      	bpl.n	8003bfe <_svfiprintf_r+0x32>
 8003be0:	690b      	ldr	r3, [r1, #16]
 8003be2:	b963      	cbnz	r3, 8003bfe <_svfiprintf_r+0x32>
 8003be4:	2140      	movs	r1, #64	; 0x40
 8003be6:	f7ff ff0b 	bl	8003a00 <_malloc_r>
 8003bea:	6028      	str	r0, [r5, #0]
 8003bec:	6128      	str	r0, [r5, #16]
 8003bee:	b920      	cbnz	r0, 8003bfa <_svfiprintf_r+0x2e>
 8003bf0:	230c      	movs	r3, #12
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	e0d0      	b.n	8003d9c <_svfiprintf_r+0x1d0>
 8003bfa:	2340      	movs	r3, #64	; 0x40
 8003bfc:	616b      	str	r3, [r5, #20]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9309      	str	r3, [sp, #36]	; 0x24
 8003c02:	2320      	movs	r3, #32
 8003c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c0c:	2330      	movs	r3, #48	; 0x30
 8003c0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003db4 <_svfiprintf_r+0x1e8>
 8003c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c16:	f04f 0901 	mov.w	r9, #1
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	469a      	mov	sl, r3
 8003c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c22:	b10a      	cbz	r2, 8003c28 <_svfiprintf_r+0x5c>
 8003c24:	2a25      	cmp	r2, #37	; 0x25
 8003c26:	d1f9      	bne.n	8003c1c <_svfiprintf_r+0x50>
 8003c28:	ebba 0b04 	subs.w	fp, sl, r4
 8003c2c:	d00b      	beq.n	8003c46 <_svfiprintf_r+0x7a>
 8003c2e:	465b      	mov	r3, fp
 8003c30:	4622      	mov	r2, r4
 8003c32:	4629      	mov	r1, r5
 8003c34:	4638      	mov	r0, r7
 8003c36:	f7ff ff6f 	bl	8003b18 <__ssputs_r>
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	f000 80a9 	beq.w	8003d92 <_svfiprintf_r+0x1c6>
 8003c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c42:	445a      	add	r2, fp
 8003c44:	9209      	str	r2, [sp, #36]	; 0x24
 8003c46:	f89a 3000 	ldrb.w	r3, [sl]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80a1 	beq.w	8003d92 <_svfiprintf_r+0x1c6>
 8003c50:	2300      	movs	r3, #0
 8003c52:	f04f 32ff 	mov.w	r2, #4294967295
 8003c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c5a:	f10a 0a01 	add.w	sl, sl, #1
 8003c5e:	9304      	str	r3, [sp, #16]
 8003c60:	9307      	str	r3, [sp, #28]
 8003c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c66:	931a      	str	r3, [sp, #104]	; 0x68
 8003c68:	4654      	mov	r4, sl
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c70:	4850      	ldr	r0, [pc, #320]	; (8003db4 <_svfiprintf_r+0x1e8>)
 8003c72:	f7fc fab5 	bl	80001e0 <memchr>
 8003c76:	9a04      	ldr	r2, [sp, #16]
 8003c78:	b9d8      	cbnz	r0, 8003cb2 <_svfiprintf_r+0xe6>
 8003c7a:	06d0      	lsls	r0, r2, #27
 8003c7c:	bf44      	itt	mi
 8003c7e:	2320      	movmi	r3, #32
 8003c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c84:	0711      	lsls	r1, r2, #28
 8003c86:	bf44      	itt	mi
 8003c88:	232b      	movmi	r3, #43	; 0x2b
 8003c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c92:	2b2a      	cmp	r3, #42	; 0x2a
 8003c94:	d015      	beq.n	8003cc2 <_svfiprintf_r+0xf6>
 8003c96:	9a07      	ldr	r2, [sp, #28]
 8003c98:	4654      	mov	r4, sl
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f04f 0c0a 	mov.w	ip, #10
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ca6:	3b30      	subs	r3, #48	; 0x30
 8003ca8:	2b09      	cmp	r3, #9
 8003caa:	d94d      	bls.n	8003d48 <_svfiprintf_r+0x17c>
 8003cac:	b1b0      	cbz	r0, 8003cdc <_svfiprintf_r+0x110>
 8003cae:	9207      	str	r2, [sp, #28]
 8003cb0:	e014      	b.n	8003cdc <_svfiprintf_r+0x110>
 8003cb2:	eba0 0308 	sub.w	r3, r0, r8
 8003cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	9304      	str	r3, [sp, #16]
 8003cbe:	46a2      	mov	sl, r4
 8003cc0:	e7d2      	b.n	8003c68 <_svfiprintf_r+0x9c>
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	1d19      	adds	r1, r3, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	9103      	str	r1, [sp, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bfbb      	ittet	lt
 8003cce:	425b      	neglt	r3, r3
 8003cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cd4:	9307      	strge	r3, [sp, #28]
 8003cd6:	9307      	strlt	r3, [sp, #28]
 8003cd8:	bfb8      	it	lt
 8003cda:	9204      	strlt	r2, [sp, #16]
 8003cdc:	7823      	ldrb	r3, [r4, #0]
 8003cde:	2b2e      	cmp	r3, #46	; 0x2e
 8003ce0:	d10c      	bne.n	8003cfc <_svfiprintf_r+0x130>
 8003ce2:	7863      	ldrb	r3, [r4, #1]
 8003ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ce6:	d134      	bne.n	8003d52 <_svfiprintf_r+0x186>
 8003ce8:	9b03      	ldr	r3, [sp, #12]
 8003cea:	1d1a      	adds	r2, r3, #4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	9203      	str	r2, [sp, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bfb8      	it	lt
 8003cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cf8:	3402      	adds	r4, #2
 8003cfa:	9305      	str	r3, [sp, #20]
 8003cfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003dc4 <_svfiprintf_r+0x1f8>
 8003d00:	7821      	ldrb	r1, [r4, #0]
 8003d02:	2203      	movs	r2, #3
 8003d04:	4650      	mov	r0, sl
 8003d06:	f7fc fa6b 	bl	80001e0 <memchr>
 8003d0a:	b138      	cbz	r0, 8003d1c <_svfiprintf_r+0x150>
 8003d0c:	9b04      	ldr	r3, [sp, #16]
 8003d0e:	eba0 000a 	sub.w	r0, r0, sl
 8003d12:	2240      	movs	r2, #64	; 0x40
 8003d14:	4082      	lsls	r2, r0
 8003d16:	4313      	orrs	r3, r2
 8003d18:	3401      	adds	r4, #1
 8003d1a:	9304      	str	r3, [sp, #16]
 8003d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d20:	4825      	ldr	r0, [pc, #148]	; (8003db8 <_svfiprintf_r+0x1ec>)
 8003d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d26:	2206      	movs	r2, #6
 8003d28:	f7fc fa5a 	bl	80001e0 <memchr>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d038      	beq.n	8003da2 <_svfiprintf_r+0x1d6>
 8003d30:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <_svfiprintf_r+0x1f0>)
 8003d32:	bb1b      	cbnz	r3, 8003d7c <_svfiprintf_r+0x1b0>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	3307      	adds	r3, #7
 8003d38:	f023 0307 	bic.w	r3, r3, #7
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	9303      	str	r3, [sp, #12]
 8003d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d42:	4433      	add	r3, r6
 8003d44:	9309      	str	r3, [sp, #36]	; 0x24
 8003d46:	e768      	b.n	8003c1a <_svfiprintf_r+0x4e>
 8003d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d4c:	460c      	mov	r4, r1
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7a6      	b.n	8003ca0 <_svfiprintf_r+0xd4>
 8003d52:	2300      	movs	r3, #0
 8003d54:	3401      	adds	r4, #1
 8003d56:	9305      	str	r3, [sp, #20]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f04f 0c0a 	mov.w	ip, #10
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d64:	3a30      	subs	r2, #48	; 0x30
 8003d66:	2a09      	cmp	r2, #9
 8003d68:	d903      	bls.n	8003d72 <_svfiprintf_r+0x1a6>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0c6      	beq.n	8003cfc <_svfiprintf_r+0x130>
 8003d6e:	9105      	str	r1, [sp, #20]
 8003d70:	e7c4      	b.n	8003cfc <_svfiprintf_r+0x130>
 8003d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d76:	4604      	mov	r4, r0
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e7f0      	b.n	8003d5e <_svfiprintf_r+0x192>
 8003d7c:	ab03      	add	r3, sp, #12
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	462a      	mov	r2, r5
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <_svfiprintf_r+0x1f4>)
 8003d84:	a904      	add	r1, sp, #16
 8003d86:	4638      	mov	r0, r7
 8003d88:	f3af 8000 	nop.w
 8003d8c:	1c42      	adds	r2, r0, #1
 8003d8e:	4606      	mov	r6, r0
 8003d90:	d1d6      	bne.n	8003d40 <_svfiprintf_r+0x174>
 8003d92:	89ab      	ldrh	r3, [r5, #12]
 8003d94:	065b      	lsls	r3, r3, #25
 8003d96:	f53f af2d 	bmi.w	8003bf4 <_svfiprintf_r+0x28>
 8003d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d9c:	b01d      	add	sp, #116	; 0x74
 8003d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da2:	ab03      	add	r3, sp, #12
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	462a      	mov	r2, r5
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <_svfiprintf_r+0x1f4>)
 8003daa:	a904      	add	r1, sp, #16
 8003dac:	4638      	mov	r0, r7
 8003dae:	f000 f9bd 	bl	800412c <_printf_i>
 8003db2:	e7eb      	b.n	8003d8c <_svfiprintf_r+0x1c0>
 8003db4:	08004764 	.word	0x08004764
 8003db8:	0800476e 	.word	0x0800476e
 8003dbc:	00000000 	.word	0x00000000
 8003dc0:	08003b19 	.word	0x08003b19
 8003dc4:	0800476a 	.word	0x0800476a

08003dc8 <__sfputc_r>:
 8003dc8:	6893      	ldr	r3, [r2, #8]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	b410      	push	{r4}
 8003dd0:	6093      	str	r3, [r2, #8]
 8003dd2:	da08      	bge.n	8003de6 <__sfputc_r+0x1e>
 8003dd4:	6994      	ldr	r4, [r2, #24]
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	db01      	blt.n	8003dde <__sfputc_r+0x16>
 8003dda:	290a      	cmp	r1, #10
 8003ddc:	d103      	bne.n	8003de6 <__sfputc_r+0x1e>
 8003dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de2:	f7ff bc88 	b.w	80036f6 <__swbuf_r>
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	1c58      	adds	r0, r3, #1
 8003dea:	6010      	str	r0, [r2, #0]
 8003dec:	7019      	strb	r1, [r3, #0]
 8003dee:	4608      	mov	r0, r1
 8003df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <__sfputs_r>:
 8003df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df8:	4606      	mov	r6, r0
 8003dfa:	460f      	mov	r7, r1
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	18d5      	adds	r5, r2, r3
 8003e00:	42ac      	cmp	r4, r5
 8003e02:	d101      	bne.n	8003e08 <__sfputs_r+0x12>
 8003e04:	2000      	movs	r0, #0
 8003e06:	e007      	b.n	8003e18 <__sfputs_r+0x22>
 8003e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e0c:	463a      	mov	r2, r7
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f7ff ffda 	bl	8003dc8 <__sfputc_r>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d1f3      	bne.n	8003e00 <__sfputs_r+0xa>
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e1c <_vfiprintf_r>:
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	460d      	mov	r5, r1
 8003e22:	b09d      	sub	sp, #116	; 0x74
 8003e24:	4614      	mov	r4, r2
 8003e26:	4698      	mov	r8, r3
 8003e28:	4606      	mov	r6, r0
 8003e2a:	b118      	cbz	r0, 8003e34 <_vfiprintf_r+0x18>
 8003e2c:	6a03      	ldr	r3, [r0, #32]
 8003e2e:	b90b      	cbnz	r3, 8003e34 <_vfiprintf_r+0x18>
 8003e30:	f7ff faac 	bl	800338c <__sinit>
 8003e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e36:	07d9      	lsls	r1, r3, #31
 8003e38:	d405      	bmi.n	8003e46 <_vfiprintf_r+0x2a>
 8003e3a:	89ab      	ldrh	r3, [r5, #12]
 8003e3c:	059a      	lsls	r2, r3, #22
 8003e3e:	d402      	bmi.n	8003e46 <_vfiprintf_r+0x2a>
 8003e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e42:	f7ff fd66 	bl	8003912 <__retarget_lock_acquire_recursive>
 8003e46:	89ab      	ldrh	r3, [r5, #12]
 8003e48:	071b      	lsls	r3, r3, #28
 8003e4a:	d501      	bpl.n	8003e50 <_vfiprintf_r+0x34>
 8003e4c:	692b      	ldr	r3, [r5, #16]
 8003e4e:	b99b      	cbnz	r3, 8003e78 <_vfiprintf_r+0x5c>
 8003e50:	4629      	mov	r1, r5
 8003e52:	4630      	mov	r0, r6
 8003e54:	f7ff fc8c 	bl	8003770 <__swsetup_r>
 8003e58:	b170      	cbz	r0, 8003e78 <_vfiprintf_r+0x5c>
 8003e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e5c:	07dc      	lsls	r4, r3, #31
 8003e5e:	d504      	bpl.n	8003e6a <_vfiprintf_r+0x4e>
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	b01d      	add	sp, #116	; 0x74
 8003e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	0598      	lsls	r0, r3, #22
 8003e6e:	d4f7      	bmi.n	8003e60 <_vfiprintf_r+0x44>
 8003e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e72:	f7ff fd4f 	bl	8003914 <__retarget_lock_release_recursive>
 8003e76:	e7f3      	b.n	8003e60 <_vfiprintf_r+0x44>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e86:	2330      	movs	r3, #48	; 0x30
 8003e88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800403c <_vfiprintf_r+0x220>
 8003e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e90:	f04f 0901 	mov.w	r9, #1
 8003e94:	4623      	mov	r3, r4
 8003e96:	469a      	mov	sl, r3
 8003e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9c:	b10a      	cbz	r2, 8003ea2 <_vfiprintf_r+0x86>
 8003e9e:	2a25      	cmp	r2, #37	; 0x25
 8003ea0:	d1f9      	bne.n	8003e96 <_vfiprintf_r+0x7a>
 8003ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea6:	d00b      	beq.n	8003ec0 <_vfiprintf_r+0xa4>
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff ffa1 	bl	8003df6 <__sfputs_r>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f000 80a9 	beq.w	800400c <_vfiprintf_r+0x1f0>
 8003eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ebc:	445a      	add	r2, fp
 8003ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a1 	beq.w	800400c <_vfiprintf_r+0x1f0>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed4:	f10a 0a01 	add.w	sl, sl, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	9307      	str	r3, [sp, #28]
 8003edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee2:	4654      	mov	r4, sl
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eea:	4854      	ldr	r0, [pc, #336]	; (800403c <_vfiprintf_r+0x220>)
 8003eec:	f7fc f978 	bl	80001e0 <memchr>
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	b9d8      	cbnz	r0, 8003f2c <_vfiprintf_r+0x110>
 8003ef4:	06d1      	lsls	r1, r2, #27
 8003ef6:	bf44      	itt	mi
 8003ef8:	2320      	movmi	r3, #32
 8003efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efe:	0713      	lsls	r3, r2, #28
 8003f00:	bf44      	itt	mi
 8003f02:	232b      	movmi	r3, #43	; 0x2b
 8003f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f08:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d015      	beq.n	8003f3c <_vfiprintf_r+0x120>
 8003f10:	9a07      	ldr	r2, [sp, #28]
 8003f12:	4654      	mov	r4, sl
 8003f14:	2000      	movs	r0, #0
 8003f16:	f04f 0c0a 	mov.w	ip, #10
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f20:	3b30      	subs	r3, #48	; 0x30
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	d94d      	bls.n	8003fc2 <_vfiprintf_r+0x1a6>
 8003f26:	b1b0      	cbz	r0, 8003f56 <_vfiprintf_r+0x13a>
 8003f28:	9207      	str	r2, [sp, #28]
 8003f2a:	e014      	b.n	8003f56 <_vfiprintf_r+0x13a>
 8003f2c:	eba0 0308 	sub.w	r3, r0, r8
 8003f30:	fa09 f303 	lsl.w	r3, r9, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	46a2      	mov	sl, r4
 8003f3a:	e7d2      	b.n	8003ee2 <_vfiprintf_r+0xc6>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	1d19      	adds	r1, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	9103      	str	r1, [sp, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfbb      	ittet	lt
 8003f48:	425b      	neglt	r3, r3
 8003f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f4e:	9307      	strge	r3, [sp, #28]
 8003f50:	9307      	strlt	r3, [sp, #28]
 8003f52:	bfb8      	it	lt
 8003f54:	9204      	strlt	r2, [sp, #16]
 8003f56:	7823      	ldrb	r3, [r4, #0]
 8003f58:	2b2e      	cmp	r3, #46	; 0x2e
 8003f5a:	d10c      	bne.n	8003f76 <_vfiprintf_r+0x15a>
 8003f5c:	7863      	ldrb	r3, [r4, #1]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d134      	bne.n	8003fcc <_vfiprintf_r+0x1b0>
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	1d1a      	adds	r2, r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	9203      	str	r2, [sp, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfb8      	it	lt
 8003f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f72:	3402      	adds	r4, #2
 8003f74:	9305      	str	r3, [sp, #20]
 8003f76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800404c <_vfiprintf_r+0x230>
 8003f7a:	7821      	ldrb	r1, [r4, #0]
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	4650      	mov	r0, sl
 8003f80:	f7fc f92e 	bl	80001e0 <memchr>
 8003f84:	b138      	cbz	r0, 8003f96 <_vfiprintf_r+0x17a>
 8003f86:	9b04      	ldr	r3, [sp, #16]
 8003f88:	eba0 000a 	sub.w	r0, r0, sl
 8003f8c:	2240      	movs	r2, #64	; 0x40
 8003f8e:	4082      	lsls	r2, r0
 8003f90:	4313      	orrs	r3, r2
 8003f92:	3401      	adds	r4, #1
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9a:	4829      	ldr	r0, [pc, #164]	; (8004040 <_vfiprintf_r+0x224>)
 8003f9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	f7fc f91d 	bl	80001e0 <memchr>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d03f      	beq.n	800402a <_vfiprintf_r+0x20e>
 8003faa:	4b26      	ldr	r3, [pc, #152]	; (8004044 <_vfiprintf_r+0x228>)
 8003fac:	bb1b      	cbnz	r3, 8003ff6 <_vfiprintf_r+0x1da>
 8003fae:	9b03      	ldr	r3, [sp, #12]
 8003fb0:	3307      	adds	r3, #7
 8003fb2:	f023 0307 	bic.w	r3, r3, #7
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fbc:	443b      	add	r3, r7
 8003fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc0:	e768      	b.n	8003e94 <_vfiprintf_r+0x78>
 8003fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	2001      	movs	r0, #1
 8003fca:	e7a6      	b.n	8003f1a <_vfiprintf_r+0xfe>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	3401      	adds	r4, #1
 8003fd0:	9305      	str	r3, [sp, #20]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f04f 0c0a 	mov.w	ip, #10
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fde:	3a30      	subs	r2, #48	; 0x30
 8003fe0:	2a09      	cmp	r2, #9
 8003fe2:	d903      	bls.n	8003fec <_vfiprintf_r+0x1d0>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0c6      	beq.n	8003f76 <_vfiprintf_r+0x15a>
 8003fe8:	9105      	str	r1, [sp, #20]
 8003fea:	e7c4      	b.n	8003f76 <_vfiprintf_r+0x15a>
 8003fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e7f0      	b.n	8003fd8 <_vfiprintf_r+0x1bc>
 8003ff6:	ab03      	add	r3, sp, #12
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <_vfiprintf_r+0x22c>)
 8003ffe:	a904      	add	r1, sp, #16
 8004000:	4630      	mov	r0, r6
 8004002:	f3af 8000 	nop.w
 8004006:	4607      	mov	r7, r0
 8004008:	1c78      	adds	r0, r7, #1
 800400a:	d1d6      	bne.n	8003fba <_vfiprintf_r+0x19e>
 800400c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800400e:	07d9      	lsls	r1, r3, #31
 8004010:	d405      	bmi.n	800401e <_vfiprintf_r+0x202>
 8004012:	89ab      	ldrh	r3, [r5, #12]
 8004014:	059a      	lsls	r2, r3, #22
 8004016:	d402      	bmi.n	800401e <_vfiprintf_r+0x202>
 8004018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800401a:	f7ff fc7b 	bl	8003914 <__retarget_lock_release_recursive>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	065b      	lsls	r3, r3, #25
 8004022:	f53f af1d 	bmi.w	8003e60 <_vfiprintf_r+0x44>
 8004026:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004028:	e71c      	b.n	8003e64 <_vfiprintf_r+0x48>
 800402a:	ab03      	add	r3, sp, #12
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	462a      	mov	r2, r5
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <_vfiprintf_r+0x22c>)
 8004032:	a904      	add	r1, sp, #16
 8004034:	4630      	mov	r0, r6
 8004036:	f000 f879 	bl	800412c <_printf_i>
 800403a:	e7e4      	b.n	8004006 <_vfiprintf_r+0x1ea>
 800403c:	08004764 	.word	0x08004764
 8004040:	0800476e 	.word	0x0800476e
 8004044:	00000000 	.word	0x00000000
 8004048:	08003df7 	.word	0x08003df7
 800404c:	0800476a 	.word	0x0800476a

08004050 <_printf_common>:
 8004050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	4616      	mov	r6, r2
 8004056:	4699      	mov	r9, r3
 8004058:	688a      	ldr	r2, [r1, #8]
 800405a:	690b      	ldr	r3, [r1, #16]
 800405c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004060:	4293      	cmp	r3, r2
 8004062:	bfb8      	it	lt
 8004064:	4613      	movlt	r3, r2
 8004066:	6033      	str	r3, [r6, #0]
 8004068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800406c:	4607      	mov	r7, r0
 800406e:	460c      	mov	r4, r1
 8004070:	b10a      	cbz	r2, 8004076 <_printf_common+0x26>
 8004072:	3301      	adds	r3, #1
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	0699      	lsls	r1, r3, #26
 800407a:	bf42      	ittt	mi
 800407c:	6833      	ldrmi	r3, [r6, #0]
 800407e:	3302      	addmi	r3, #2
 8004080:	6033      	strmi	r3, [r6, #0]
 8004082:	6825      	ldr	r5, [r4, #0]
 8004084:	f015 0506 	ands.w	r5, r5, #6
 8004088:	d106      	bne.n	8004098 <_printf_common+0x48>
 800408a:	f104 0a19 	add.w	sl, r4, #25
 800408e:	68e3      	ldr	r3, [r4, #12]
 8004090:	6832      	ldr	r2, [r6, #0]
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	42ab      	cmp	r3, r5
 8004096:	dc26      	bgt.n	80040e6 <_printf_common+0x96>
 8004098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800409c:	1e13      	subs	r3, r2, #0
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	bf18      	it	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	0692      	lsls	r2, r2, #26
 80040a6:	d42b      	bmi.n	8004100 <_printf_common+0xb0>
 80040a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ac:	4649      	mov	r1, r9
 80040ae:	4638      	mov	r0, r7
 80040b0:	47c0      	blx	r8
 80040b2:	3001      	adds	r0, #1
 80040b4:	d01e      	beq.n	80040f4 <_printf_common+0xa4>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	f003 0306 	and.w	r3, r3, #6
 80040be:	2b04      	cmp	r3, #4
 80040c0:	bf02      	ittt	eq
 80040c2:	68e5      	ldreq	r5, [r4, #12]
 80040c4:	6833      	ldreq	r3, [r6, #0]
 80040c6:	1aed      	subeq	r5, r5, r3
 80040c8:	68a3      	ldr	r3, [r4, #8]
 80040ca:	bf0c      	ite	eq
 80040cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d0:	2500      	movne	r5, #0
 80040d2:	4293      	cmp	r3, r2
 80040d4:	bfc4      	itt	gt
 80040d6:	1a9b      	subgt	r3, r3, r2
 80040d8:	18ed      	addgt	r5, r5, r3
 80040da:	2600      	movs	r6, #0
 80040dc:	341a      	adds	r4, #26
 80040de:	42b5      	cmp	r5, r6
 80040e0:	d11a      	bne.n	8004118 <_printf_common+0xc8>
 80040e2:	2000      	movs	r0, #0
 80040e4:	e008      	b.n	80040f8 <_printf_common+0xa8>
 80040e6:	2301      	movs	r3, #1
 80040e8:	4652      	mov	r2, sl
 80040ea:	4649      	mov	r1, r9
 80040ec:	4638      	mov	r0, r7
 80040ee:	47c0      	blx	r8
 80040f0:	3001      	adds	r0, #1
 80040f2:	d103      	bne.n	80040fc <_printf_common+0xac>
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fc:	3501      	adds	r5, #1
 80040fe:	e7c6      	b.n	800408e <_printf_common+0x3e>
 8004100:	18e1      	adds	r1, r4, r3
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	2030      	movs	r0, #48	; 0x30
 8004106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800410a:	4422      	add	r2, r4
 800410c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004114:	3302      	adds	r3, #2
 8004116:	e7c7      	b.n	80040a8 <_printf_common+0x58>
 8004118:	2301      	movs	r3, #1
 800411a:	4622      	mov	r2, r4
 800411c:	4649      	mov	r1, r9
 800411e:	4638      	mov	r0, r7
 8004120:	47c0      	blx	r8
 8004122:	3001      	adds	r0, #1
 8004124:	d0e6      	beq.n	80040f4 <_printf_common+0xa4>
 8004126:	3601      	adds	r6, #1
 8004128:	e7d9      	b.n	80040de <_printf_common+0x8e>
	...

0800412c <_printf_i>:
 800412c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004130:	7e0f      	ldrb	r7, [r1, #24]
 8004132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004134:	2f78      	cmp	r7, #120	; 0x78
 8004136:	4691      	mov	r9, r2
 8004138:	4680      	mov	r8, r0
 800413a:	460c      	mov	r4, r1
 800413c:	469a      	mov	sl, r3
 800413e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004142:	d807      	bhi.n	8004154 <_printf_i+0x28>
 8004144:	2f62      	cmp	r7, #98	; 0x62
 8004146:	d80a      	bhi.n	800415e <_printf_i+0x32>
 8004148:	2f00      	cmp	r7, #0
 800414a:	f000 80d4 	beq.w	80042f6 <_printf_i+0x1ca>
 800414e:	2f58      	cmp	r7, #88	; 0x58
 8004150:	f000 80c0 	beq.w	80042d4 <_printf_i+0x1a8>
 8004154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800415c:	e03a      	b.n	80041d4 <_printf_i+0xa8>
 800415e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004162:	2b15      	cmp	r3, #21
 8004164:	d8f6      	bhi.n	8004154 <_printf_i+0x28>
 8004166:	a101      	add	r1, pc, #4	; (adr r1, 800416c <_printf_i+0x40>)
 8004168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041d9 	.word	0x080041d9
 8004174:	08004155 	.word	0x08004155
 8004178:	08004155 	.word	0x08004155
 800417c:	08004155 	.word	0x08004155
 8004180:	08004155 	.word	0x08004155
 8004184:	080041d9 	.word	0x080041d9
 8004188:	08004155 	.word	0x08004155
 800418c:	08004155 	.word	0x08004155
 8004190:	08004155 	.word	0x08004155
 8004194:	08004155 	.word	0x08004155
 8004198:	080042dd 	.word	0x080042dd
 800419c:	08004205 	.word	0x08004205
 80041a0:	08004297 	.word	0x08004297
 80041a4:	08004155 	.word	0x08004155
 80041a8:	08004155 	.word	0x08004155
 80041ac:	080042ff 	.word	0x080042ff
 80041b0:	08004155 	.word	0x08004155
 80041b4:	08004205 	.word	0x08004205
 80041b8:	08004155 	.word	0x08004155
 80041bc:	08004155 	.word	0x08004155
 80041c0:	0800429f 	.word	0x0800429f
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	602a      	str	r2, [r5, #0]
 80041cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041d4:	2301      	movs	r3, #1
 80041d6:	e09f      	b.n	8004318 <_printf_i+0x1ec>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	682b      	ldr	r3, [r5, #0]
 80041dc:	0607      	lsls	r7, r0, #24
 80041de:	f103 0104 	add.w	r1, r3, #4
 80041e2:	6029      	str	r1, [r5, #0]
 80041e4:	d501      	bpl.n	80041ea <_printf_i+0xbe>
 80041e6:	681e      	ldr	r6, [r3, #0]
 80041e8:	e003      	b.n	80041f2 <_printf_i+0xc6>
 80041ea:	0646      	lsls	r6, r0, #25
 80041ec:	d5fb      	bpl.n	80041e6 <_printf_i+0xba>
 80041ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041f2:	2e00      	cmp	r6, #0
 80041f4:	da03      	bge.n	80041fe <_printf_i+0xd2>
 80041f6:	232d      	movs	r3, #45	; 0x2d
 80041f8:	4276      	negs	r6, r6
 80041fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041fe:	485a      	ldr	r0, [pc, #360]	; (8004368 <_printf_i+0x23c>)
 8004200:	230a      	movs	r3, #10
 8004202:	e012      	b.n	800422a <_printf_i+0xfe>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	1d19      	adds	r1, r3, #4
 800420a:	6029      	str	r1, [r5, #0]
 800420c:	0605      	lsls	r5, r0, #24
 800420e:	d501      	bpl.n	8004214 <_printf_i+0xe8>
 8004210:	681e      	ldr	r6, [r3, #0]
 8004212:	e002      	b.n	800421a <_printf_i+0xee>
 8004214:	0641      	lsls	r1, r0, #25
 8004216:	d5fb      	bpl.n	8004210 <_printf_i+0xe4>
 8004218:	881e      	ldrh	r6, [r3, #0]
 800421a:	4853      	ldr	r0, [pc, #332]	; (8004368 <_printf_i+0x23c>)
 800421c:	2f6f      	cmp	r7, #111	; 0x6f
 800421e:	bf0c      	ite	eq
 8004220:	2308      	moveq	r3, #8
 8004222:	230a      	movne	r3, #10
 8004224:	2100      	movs	r1, #0
 8004226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800422a:	6865      	ldr	r5, [r4, #4]
 800422c:	60a5      	str	r5, [r4, #8]
 800422e:	2d00      	cmp	r5, #0
 8004230:	bfa2      	ittt	ge
 8004232:	6821      	ldrge	r1, [r4, #0]
 8004234:	f021 0104 	bicge.w	r1, r1, #4
 8004238:	6021      	strge	r1, [r4, #0]
 800423a:	b90e      	cbnz	r6, 8004240 <_printf_i+0x114>
 800423c:	2d00      	cmp	r5, #0
 800423e:	d04b      	beq.n	80042d8 <_printf_i+0x1ac>
 8004240:	4615      	mov	r5, r2
 8004242:	fbb6 f1f3 	udiv	r1, r6, r3
 8004246:	fb03 6711 	mls	r7, r3, r1, r6
 800424a:	5dc7      	ldrb	r7, [r0, r7]
 800424c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004250:	4637      	mov	r7, r6
 8004252:	42bb      	cmp	r3, r7
 8004254:	460e      	mov	r6, r1
 8004256:	d9f4      	bls.n	8004242 <_printf_i+0x116>
 8004258:	2b08      	cmp	r3, #8
 800425a:	d10b      	bne.n	8004274 <_printf_i+0x148>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	07de      	lsls	r6, r3, #31
 8004260:	d508      	bpl.n	8004274 <_printf_i+0x148>
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	6861      	ldr	r1, [r4, #4]
 8004266:	4299      	cmp	r1, r3
 8004268:	bfde      	ittt	le
 800426a:	2330      	movle	r3, #48	; 0x30
 800426c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004270:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004274:	1b52      	subs	r2, r2, r5
 8004276:	6122      	str	r2, [r4, #16]
 8004278:	f8cd a000 	str.w	sl, [sp]
 800427c:	464b      	mov	r3, r9
 800427e:	aa03      	add	r2, sp, #12
 8004280:	4621      	mov	r1, r4
 8004282:	4640      	mov	r0, r8
 8004284:	f7ff fee4 	bl	8004050 <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	d14a      	bne.n	8004322 <_printf_i+0x1f6>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	b004      	add	sp, #16
 8004292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	f043 0320 	orr.w	r3, r3, #32
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	4833      	ldr	r0, [pc, #204]	; (800436c <_printf_i+0x240>)
 80042a0:	2778      	movs	r7, #120	; 0x78
 80042a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	6829      	ldr	r1, [r5, #0]
 80042aa:	061f      	lsls	r7, r3, #24
 80042ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80042b0:	d402      	bmi.n	80042b8 <_printf_i+0x18c>
 80042b2:	065f      	lsls	r7, r3, #25
 80042b4:	bf48      	it	mi
 80042b6:	b2b6      	uxthmi	r6, r6
 80042b8:	07df      	lsls	r7, r3, #31
 80042ba:	bf48      	it	mi
 80042bc:	f043 0320 	orrmi.w	r3, r3, #32
 80042c0:	6029      	str	r1, [r5, #0]
 80042c2:	bf48      	it	mi
 80042c4:	6023      	strmi	r3, [r4, #0]
 80042c6:	b91e      	cbnz	r6, 80042d0 <_printf_i+0x1a4>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	f023 0320 	bic.w	r3, r3, #32
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	2310      	movs	r3, #16
 80042d2:	e7a7      	b.n	8004224 <_printf_i+0xf8>
 80042d4:	4824      	ldr	r0, [pc, #144]	; (8004368 <_printf_i+0x23c>)
 80042d6:	e7e4      	b.n	80042a2 <_printf_i+0x176>
 80042d8:	4615      	mov	r5, r2
 80042da:	e7bd      	b.n	8004258 <_printf_i+0x12c>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	6826      	ldr	r6, [r4, #0]
 80042e0:	6961      	ldr	r1, [r4, #20]
 80042e2:	1d18      	adds	r0, r3, #4
 80042e4:	6028      	str	r0, [r5, #0]
 80042e6:	0635      	lsls	r5, r6, #24
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	d501      	bpl.n	80042f0 <_printf_i+0x1c4>
 80042ec:	6019      	str	r1, [r3, #0]
 80042ee:	e002      	b.n	80042f6 <_printf_i+0x1ca>
 80042f0:	0670      	lsls	r0, r6, #25
 80042f2:	d5fb      	bpl.n	80042ec <_printf_i+0x1c0>
 80042f4:	8019      	strh	r1, [r3, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	4615      	mov	r5, r2
 80042fc:	e7bc      	b.n	8004278 <_printf_i+0x14c>
 80042fe:	682b      	ldr	r3, [r5, #0]
 8004300:	1d1a      	adds	r2, r3, #4
 8004302:	602a      	str	r2, [r5, #0]
 8004304:	681d      	ldr	r5, [r3, #0]
 8004306:	6862      	ldr	r2, [r4, #4]
 8004308:	2100      	movs	r1, #0
 800430a:	4628      	mov	r0, r5
 800430c:	f7fb ff68 	bl	80001e0 <memchr>
 8004310:	b108      	cbz	r0, 8004316 <_printf_i+0x1ea>
 8004312:	1b40      	subs	r0, r0, r5
 8004314:	6060      	str	r0, [r4, #4]
 8004316:	6863      	ldr	r3, [r4, #4]
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	2300      	movs	r3, #0
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004320:	e7aa      	b.n	8004278 <_printf_i+0x14c>
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	462a      	mov	r2, r5
 8004326:	4649      	mov	r1, r9
 8004328:	4640      	mov	r0, r8
 800432a:	47d0      	blx	sl
 800432c:	3001      	adds	r0, #1
 800432e:	d0ad      	beq.n	800428c <_printf_i+0x160>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	079b      	lsls	r3, r3, #30
 8004334:	d413      	bmi.n	800435e <_printf_i+0x232>
 8004336:	68e0      	ldr	r0, [r4, #12]
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	4298      	cmp	r0, r3
 800433c:	bfb8      	it	lt
 800433e:	4618      	movlt	r0, r3
 8004340:	e7a6      	b.n	8004290 <_printf_i+0x164>
 8004342:	2301      	movs	r3, #1
 8004344:	4632      	mov	r2, r6
 8004346:	4649      	mov	r1, r9
 8004348:	4640      	mov	r0, r8
 800434a:	47d0      	blx	sl
 800434c:	3001      	adds	r0, #1
 800434e:	d09d      	beq.n	800428c <_printf_i+0x160>
 8004350:	3501      	adds	r5, #1
 8004352:	68e3      	ldr	r3, [r4, #12]
 8004354:	9903      	ldr	r1, [sp, #12]
 8004356:	1a5b      	subs	r3, r3, r1
 8004358:	42ab      	cmp	r3, r5
 800435a:	dcf2      	bgt.n	8004342 <_printf_i+0x216>
 800435c:	e7eb      	b.n	8004336 <_printf_i+0x20a>
 800435e:	2500      	movs	r5, #0
 8004360:	f104 0619 	add.w	r6, r4, #25
 8004364:	e7f5      	b.n	8004352 <_printf_i+0x226>
 8004366:	bf00      	nop
 8004368:	08004775 	.word	0x08004775
 800436c:	08004786 	.word	0x08004786

08004370 <__sflush_r>:
 8004370:	898a      	ldrh	r2, [r1, #12]
 8004372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004376:	4605      	mov	r5, r0
 8004378:	0710      	lsls	r0, r2, #28
 800437a:	460c      	mov	r4, r1
 800437c:	d458      	bmi.n	8004430 <__sflush_r+0xc0>
 800437e:	684b      	ldr	r3, [r1, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	dc05      	bgt.n	8004390 <__sflush_r+0x20>
 8004384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	dc02      	bgt.n	8004390 <__sflush_r+0x20>
 800438a:	2000      	movs	r0, #0
 800438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004392:	2e00      	cmp	r6, #0
 8004394:	d0f9      	beq.n	800438a <__sflush_r+0x1a>
 8004396:	2300      	movs	r3, #0
 8004398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800439c:	682f      	ldr	r7, [r5, #0]
 800439e:	6a21      	ldr	r1, [r4, #32]
 80043a0:	602b      	str	r3, [r5, #0]
 80043a2:	d032      	beq.n	800440a <__sflush_r+0x9a>
 80043a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	075a      	lsls	r2, r3, #29
 80043aa:	d505      	bpl.n	80043b8 <__sflush_r+0x48>
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	1ac0      	subs	r0, r0, r3
 80043b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043b2:	b10b      	cbz	r3, 80043b8 <__sflush_r+0x48>
 80043b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043b6:	1ac0      	subs	r0, r0, r3
 80043b8:	2300      	movs	r3, #0
 80043ba:	4602      	mov	r2, r0
 80043bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043be:	6a21      	ldr	r1, [r4, #32]
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b0      	blx	r6
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	d106      	bne.n	80043d8 <__sflush_r+0x68>
 80043ca:	6829      	ldr	r1, [r5, #0]
 80043cc:	291d      	cmp	r1, #29
 80043ce:	d82b      	bhi.n	8004428 <__sflush_r+0xb8>
 80043d0:	4a29      	ldr	r2, [pc, #164]	; (8004478 <__sflush_r+0x108>)
 80043d2:	410a      	asrs	r2, r1
 80043d4:	07d6      	lsls	r6, r2, #31
 80043d6:	d427      	bmi.n	8004428 <__sflush_r+0xb8>
 80043d8:	2200      	movs	r2, #0
 80043da:	6062      	str	r2, [r4, #4]
 80043dc:	04d9      	lsls	r1, r3, #19
 80043de:	6922      	ldr	r2, [r4, #16]
 80043e0:	6022      	str	r2, [r4, #0]
 80043e2:	d504      	bpl.n	80043ee <__sflush_r+0x7e>
 80043e4:	1c42      	adds	r2, r0, #1
 80043e6:	d101      	bne.n	80043ec <__sflush_r+0x7c>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	b903      	cbnz	r3, 80043ee <__sflush_r+0x7e>
 80043ec:	6560      	str	r0, [r4, #84]	; 0x54
 80043ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f0:	602f      	str	r7, [r5, #0]
 80043f2:	2900      	cmp	r1, #0
 80043f4:	d0c9      	beq.n	800438a <__sflush_r+0x1a>
 80043f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043fa:	4299      	cmp	r1, r3
 80043fc:	d002      	beq.n	8004404 <__sflush_r+0x94>
 80043fe:	4628      	mov	r0, r5
 8004400:	f7ff fa8a 	bl	8003918 <_free_r>
 8004404:	2000      	movs	r0, #0
 8004406:	6360      	str	r0, [r4, #52]	; 0x34
 8004408:	e7c0      	b.n	800438c <__sflush_r+0x1c>
 800440a:	2301      	movs	r3, #1
 800440c:	4628      	mov	r0, r5
 800440e:	47b0      	blx	r6
 8004410:	1c41      	adds	r1, r0, #1
 8004412:	d1c8      	bne.n	80043a6 <__sflush_r+0x36>
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0c5      	beq.n	80043a6 <__sflush_r+0x36>
 800441a:	2b1d      	cmp	r3, #29
 800441c:	d001      	beq.n	8004422 <__sflush_r+0xb2>
 800441e:	2b16      	cmp	r3, #22
 8004420:	d101      	bne.n	8004426 <__sflush_r+0xb6>
 8004422:	602f      	str	r7, [r5, #0]
 8004424:	e7b1      	b.n	800438a <__sflush_r+0x1a>
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442c:	81a3      	strh	r3, [r4, #12]
 800442e:	e7ad      	b.n	800438c <__sflush_r+0x1c>
 8004430:	690f      	ldr	r7, [r1, #16]
 8004432:	2f00      	cmp	r7, #0
 8004434:	d0a9      	beq.n	800438a <__sflush_r+0x1a>
 8004436:	0793      	lsls	r3, r2, #30
 8004438:	680e      	ldr	r6, [r1, #0]
 800443a:	bf08      	it	eq
 800443c:	694b      	ldreq	r3, [r1, #20]
 800443e:	600f      	str	r7, [r1, #0]
 8004440:	bf18      	it	ne
 8004442:	2300      	movne	r3, #0
 8004444:	eba6 0807 	sub.w	r8, r6, r7
 8004448:	608b      	str	r3, [r1, #8]
 800444a:	f1b8 0f00 	cmp.w	r8, #0
 800444e:	dd9c      	ble.n	800438a <__sflush_r+0x1a>
 8004450:	6a21      	ldr	r1, [r4, #32]
 8004452:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004454:	4643      	mov	r3, r8
 8004456:	463a      	mov	r2, r7
 8004458:	4628      	mov	r0, r5
 800445a:	47b0      	blx	r6
 800445c:	2800      	cmp	r0, #0
 800445e:	dc06      	bgt.n	800446e <__sflush_r+0xfe>
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	e78e      	b.n	800438c <__sflush_r+0x1c>
 800446e:	4407      	add	r7, r0
 8004470:	eba8 0800 	sub.w	r8, r8, r0
 8004474:	e7e9      	b.n	800444a <__sflush_r+0xda>
 8004476:	bf00      	nop
 8004478:	dfbffffe 	.word	0xdfbffffe

0800447c <_fflush_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	690b      	ldr	r3, [r1, #16]
 8004480:	4605      	mov	r5, r0
 8004482:	460c      	mov	r4, r1
 8004484:	b913      	cbnz	r3, 800448c <_fflush_r+0x10>
 8004486:	2500      	movs	r5, #0
 8004488:	4628      	mov	r0, r5
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	b118      	cbz	r0, 8004496 <_fflush_r+0x1a>
 800448e:	6a03      	ldr	r3, [r0, #32]
 8004490:	b90b      	cbnz	r3, 8004496 <_fflush_r+0x1a>
 8004492:	f7fe ff7b 	bl	800338c <__sinit>
 8004496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f3      	beq.n	8004486 <_fflush_r+0xa>
 800449e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044a0:	07d0      	lsls	r0, r2, #31
 80044a2:	d404      	bmi.n	80044ae <_fflush_r+0x32>
 80044a4:	0599      	lsls	r1, r3, #22
 80044a6:	d402      	bmi.n	80044ae <_fflush_r+0x32>
 80044a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044aa:	f7ff fa32 	bl	8003912 <__retarget_lock_acquire_recursive>
 80044ae:	4628      	mov	r0, r5
 80044b0:	4621      	mov	r1, r4
 80044b2:	f7ff ff5d 	bl	8004370 <__sflush_r>
 80044b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044b8:	07da      	lsls	r2, r3, #31
 80044ba:	4605      	mov	r5, r0
 80044bc:	d4e4      	bmi.n	8004488 <_fflush_r+0xc>
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	059b      	lsls	r3, r3, #22
 80044c2:	d4e1      	bmi.n	8004488 <_fflush_r+0xc>
 80044c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044c6:	f7ff fa25 	bl	8003914 <__retarget_lock_release_recursive>
 80044ca:	e7dd      	b.n	8004488 <_fflush_r+0xc>

080044cc <__swhatbuf_r>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	460c      	mov	r4, r1
 80044d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d4:	2900      	cmp	r1, #0
 80044d6:	b096      	sub	sp, #88	; 0x58
 80044d8:	4615      	mov	r5, r2
 80044da:	461e      	mov	r6, r3
 80044dc:	da0d      	bge.n	80044fa <__swhatbuf_r+0x2e>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044e4:	f04f 0100 	mov.w	r1, #0
 80044e8:	bf0c      	ite	eq
 80044ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80044ee:	2340      	movne	r3, #64	; 0x40
 80044f0:	2000      	movs	r0, #0
 80044f2:	6031      	str	r1, [r6, #0]
 80044f4:	602b      	str	r3, [r5, #0]
 80044f6:	b016      	add	sp, #88	; 0x58
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	466a      	mov	r2, sp
 80044fc:	f000 f862 	bl	80045c4 <_fstat_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	dbec      	blt.n	80044de <__swhatbuf_r+0x12>
 8004504:	9901      	ldr	r1, [sp, #4]
 8004506:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800450a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800450e:	4259      	negs	r1, r3
 8004510:	4159      	adcs	r1, r3
 8004512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004516:	e7eb      	b.n	80044f0 <__swhatbuf_r+0x24>

08004518 <__smakebuf_r>:
 8004518:	898b      	ldrh	r3, [r1, #12]
 800451a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800451c:	079d      	lsls	r5, r3, #30
 800451e:	4606      	mov	r6, r0
 8004520:	460c      	mov	r4, r1
 8004522:	d507      	bpl.n	8004534 <__smakebuf_r+0x1c>
 8004524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	2301      	movs	r3, #1
 800452e:	6163      	str	r3, [r4, #20]
 8004530:	b002      	add	sp, #8
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	ab01      	add	r3, sp, #4
 8004536:	466a      	mov	r2, sp
 8004538:	f7ff ffc8 	bl	80044cc <__swhatbuf_r>
 800453c:	9900      	ldr	r1, [sp, #0]
 800453e:	4605      	mov	r5, r0
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff fa5d 	bl	8003a00 <_malloc_r>
 8004546:	b948      	cbnz	r0, 800455c <__smakebuf_r+0x44>
 8004548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800454c:	059a      	lsls	r2, r3, #22
 800454e:	d4ef      	bmi.n	8004530 <__smakebuf_r+0x18>
 8004550:	f023 0303 	bic.w	r3, r3, #3
 8004554:	f043 0302 	orr.w	r3, r3, #2
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	e7e3      	b.n	8004524 <__smakebuf_r+0xc>
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	6020      	str	r0, [r4, #0]
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	81a3      	strh	r3, [r4, #12]
 8004566:	9b00      	ldr	r3, [sp, #0]
 8004568:	6163      	str	r3, [r4, #20]
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	6120      	str	r0, [r4, #16]
 800456e:	b15b      	cbz	r3, 8004588 <__smakebuf_r+0x70>
 8004570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f837 	bl	80045e8 <_isatty_r>
 800457a:	b128      	cbz	r0, 8004588 <__smakebuf_r+0x70>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	431d      	orrs	r5, r3
 800458c:	81a5      	strh	r5, [r4, #12]
 800458e:	e7cf      	b.n	8004530 <__smakebuf_r+0x18>

08004590 <memmove>:
 8004590:	4288      	cmp	r0, r1
 8004592:	b510      	push	{r4, lr}
 8004594:	eb01 0402 	add.w	r4, r1, r2
 8004598:	d902      	bls.n	80045a0 <memmove+0x10>
 800459a:	4284      	cmp	r4, r0
 800459c:	4623      	mov	r3, r4
 800459e:	d807      	bhi.n	80045b0 <memmove+0x20>
 80045a0:	1e43      	subs	r3, r0, #1
 80045a2:	42a1      	cmp	r1, r4
 80045a4:	d008      	beq.n	80045b8 <memmove+0x28>
 80045a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ae:	e7f8      	b.n	80045a2 <memmove+0x12>
 80045b0:	4402      	add	r2, r0
 80045b2:	4601      	mov	r1, r0
 80045b4:	428a      	cmp	r2, r1
 80045b6:	d100      	bne.n	80045ba <memmove+0x2a>
 80045b8:	bd10      	pop	{r4, pc}
 80045ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045c2:	e7f7      	b.n	80045b4 <memmove+0x24>

080045c4 <_fstat_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d07      	ldr	r5, [pc, #28]	; (80045e4 <_fstat_r+0x20>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	602b      	str	r3, [r5, #0]
 80045d2:	f7fc fb3a 	bl	8000c4a <_fstat>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d102      	bne.n	80045e0 <_fstat_r+0x1c>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	b103      	cbz	r3, 80045e0 <_fstat_r+0x1c>
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	bf00      	nop
 80045e4:	20000258 	.word	0x20000258

080045e8 <_isatty_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d06      	ldr	r5, [pc, #24]	; (8004604 <_isatty_r+0x1c>)
 80045ec:	2300      	movs	r3, #0
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	f7fc fb39 	bl	8000c6a <_isatty>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_isatty_r+0x1a>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_isatty_r+0x1a>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	20000258 	.word	0x20000258

08004608 <_sbrk_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d06      	ldr	r5, [pc, #24]	; (8004624 <_sbrk_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fc fb42 	bl	8000c9c <_sbrk>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_sbrk_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_sbrk_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20000258 	.word	0x20000258

08004628 <memcpy>:
 8004628:	440a      	add	r2, r1
 800462a:	4291      	cmp	r1, r2
 800462c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004630:	d100      	bne.n	8004634 <memcpy+0xc>
 8004632:	4770      	bx	lr
 8004634:	b510      	push	{r4, lr}
 8004636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800463a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800463e:	4291      	cmp	r1, r2
 8004640:	d1f9      	bne.n	8004636 <memcpy+0xe>
 8004642:	bd10      	pop	{r4, pc}

08004644 <_realloc_r>:
 8004644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004648:	4680      	mov	r8, r0
 800464a:	4614      	mov	r4, r2
 800464c:	460e      	mov	r6, r1
 800464e:	b921      	cbnz	r1, 800465a <_realloc_r+0x16>
 8004650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	4611      	mov	r1, r2
 8004656:	f7ff b9d3 	b.w	8003a00 <_malloc_r>
 800465a:	b92a      	cbnz	r2, 8004668 <_realloc_r+0x24>
 800465c:	f7ff f95c 	bl	8003918 <_free_r>
 8004660:	4625      	mov	r5, r4
 8004662:	4628      	mov	r0, r5
 8004664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004668:	f000 f81b 	bl	80046a2 <_malloc_usable_size_r>
 800466c:	4284      	cmp	r4, r0
 800466e:	4607      	mov	r7, r0
 8004670:	d802      	bhi.n	8004678 <_realloc_r+0x34>
 8004672:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004676:	d812      	bhi.n	800469e <_realloc_r+0x5a>
 8004678:	4621      	mov	r1, r4
 800467a:	4640      	mov	r0, r8
 800467c:	f7ff f9c0 	bl	8003a00 <_malloc_r>
 8004680:	4605      	mov	r5, r0
 8004682:	2800      	cmp	r0, #0
 8004684:	d0ed      	beq.n	8004662 <_realloc_r+0x1e>
 8004686:	42bc      	cmp	r4, r7
 8004688:	4622      	mov	r2, r4
 800468a:	4631      	mov	r1, r6
 800468c:	bf28      	it	cs
 800468e:	463a      	movcs	r2, r7
 8004690:	f7ff ffca 	bl	8004628 <memcpy>
 8004694:	4631      	mov	r1, r6
 8004696:	4640      	mov	r0, r8
 8004698:	f7ff f93e 	bl	8003918 <_free_r>
 800469c:	e7e1      	b.n	8004662 <_realloc_r+0x1e>
 800469e:	4635      	mov	r5, r6
 80046a0:	e7df      	b.n	8004662 <_realloc_r+0x1e>

080046a2 <_malloc_usable_size_r>:
 80046a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a6:	1f18      	subs	r0, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bfbc      	itt	lt
 80046ac:	580b      	ldrlt	r3, [r1, r0]
 80046ae:	18c0      	addlt	r0, r0, r3
 80046b0:	4770      	bx	lr
	...

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
