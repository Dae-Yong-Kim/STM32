
Test998-ADC-LCD-1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005afc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d88  08005d88  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d90  08005d90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000068  08005e00  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08005e00  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c51  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002830  00000000  00000000  00032d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00035560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dac  00000000  00000000  000366c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001903c  00000000  00000000  0003746c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ef2  00000000  00000000  000504a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e76f  00000000  00000000  0006539a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053b8  00000000  00000000  00103b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00108ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c84 	.word	0x08005c84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005c84 	.word	0x08005c84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <i2c_init>:

I2C_HandleTypeDef *hi2c = NULL;
#define I2C_ADDR 0x4E	// 0x27 << 1


int i2c_init(I2C_HandleTypeDef *p) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	hi2c = p;
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <i2c_init+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000084 	.word	0x20000084

0800059c <i2c_scan>:

int i2c_scan() {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	if(hi2c == NULL) return;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <i2c_scan+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d025      	beq.n	80005f6 <i2c_scan+0x5a>
	for(int addr = 0; addr < 128; addr++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e01e      	b.n	80005ee <i2c_scan+0x52>
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10) == HAL_OK) {
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <i2c_scan+0x64>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b299      	uxth	r1, r3
 80005b8:	230a      	movs	r3, #10
 80005ba:	2201      	movs	r2, #1
 80005bc:	f002 f844 	bl	8002648 <HAL_I2C_IsDeviceReady>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d104      	bne.n	80005d0 <i2c_scan+0x34>
			printf("  %02x", addr);
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <i2c_scan+0x68>)
 80005ca:	f004 f9fd 	bl	80049c8 <iprintf>
 80005ce:	e002      	b.n	80005d6 <i2c_scan+0x3a>
		} else {
			printf("  . ");
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <i2c_scan+0x6c>)
 80005d2:	f004 f9f9 	bl	80049c8 <iprintf>
		}
		if((addr + 1) % 16 == 0) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3301      	adds	r3, #1
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d102      	bne.n	80005e8 <i2c_scan+0x4c>
			printf("\r\n");
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <i2c_scan+0x70>)
 80005e4:	f004 fa56 	bl	8004a94 <puts>
	for(int addr = 0; addr < 128; addr++) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b7f      	cmp	r3, #127	; 0x7f
 80005f2:	dddd      	ble.n	80005b0 <i2c_scan+0x14>
 80005f4:	e000      	b.n	80005f8 <i2c_scan+0x5c>
	if(hi2c == NULL) return;
 80005f6:	bf00      	nop
		}
	}
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000084 	.word	0x20000084
 8000604:	08005c9c 	.word	0x08005c9c
 8000608:	08005ca4 	.word	0x08005ca4
 800060c:	08005cac 	.word	0x08005cac

08000610 <lcd_command>:

void lcd_command(char cmd) { // cmd_bit : abcd_efgh | RS(Register Selector) = 0
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = cmd & 0xf0;					// n1 : abcd_0000	|	upper nibble
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	73fb      	strb	r3, [r7, #15]
	n2 = cmd << 4;						// n2 : efgh_0000	|	lower nibble to upper
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	73bb      	strb	r3, [r7, #14]
	n3 = (1 << 3) | (1 << 2) | 0 | 0;	// RW | EN_1 | NC | RS;	0x0c
 8000628:	230c      	movs	r3, #12
 800062a:	737b      	strb	r3, [r7, #13]
	n4 = (1 << 3) | 0 | 0 | 0;			// RW | EN_0 | NC | RS;	0x08
 800062c:	2308      	movs	r3, #8
 800062e:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	7b7b      	ldrb	r3, [r7, #13]
 8000634:	4313      	orrs	r3, r2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	7b3b      	ldrb	r3, [r7, #12]
 800063e:	4313      	orrs	r3, r2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000644:	7bba      	ldrb	r2, [r7, #14]
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	4313      	orrs	r3, r2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 800064e:	7bba      	ldrb	r2, [r7, #14]
 8000650:	7b3b      	ldrb	r3, [r7, #12]
 8000652:	4313      	orrs	r3, r2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <lcd_command+0x64>)
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	f107 0208 	add.w	r2, r7, #8
 8000660:	230a      	movs	r3, #10
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2304      	movs	r3, #4
 8000666:	214e      	movs	r1, #78	; 0x4e
 8000668:	f001 fef0 	bl	800244c <HAL_I2C_Master_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000084 	.word	0x20000084

08000678 <lcd_data>:

void lcd_data(char ch) { // data_bit : abcd_efgh | RS(Register Selector) = 1
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = ch & 0xf0;					// n1 : abcd_0000	|	upper nibble
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f023 030f 	bic.w	r3, r3, #15
 8000688:	73fb      	strb	r3, [r7, #15]
	n2 = ch << 4;						// n2 : efgh_0000	|	lower nibble to upper
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	73bb      	strb	r3, [r7, #14]
	n3 = (1 << 3) | (1 << 2) | 0 | (1 << 0);	// RW | EN_1 | NC | RS;	0x0d
 8000690:	230d      	movs	r3, #13
 8000692:	737b      	strb	r3, [r7, #13]
	n4 = (1 << 3) | 0 | 0 | (1 << 0);			// RW | EN_0 | NC | RS;	0x09
 8000694:	2309      	movs	r3, #9
 8000696:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000698:	7bfa      	ldrb	r2, [r7, #15]
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	4313      	orrs	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80006ac:	7bba      	ldrb	r2, [r7, #14]
 80006ae:	7b7b      	ldrb	r3, [r7, #13]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 80006b6:	7bba      	ldrb	r2, [r7, #14]
 80006b8:	7b3b      	ldrb	r3, [r7, #12]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <lcd_data+0x64>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f107 0208 	add.w	r2, r7, #8
 80006c8:	230a      	movs	r3, #10
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2304      	movs	r3, #4
 80006ce:	214e      	movs	r1, #78	; 0x4e
 80006d0:	f001 febc 	bl	800244c <HAL_I2C_Master_Transmit>
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000084 	.word	0x20000084

080006e0 <lcd_init>:

void lcd_init() { // Transmit Initialization
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	lcd_command(0x01); // Screen Clear
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff93 	bl	8000610 <lcd_command>
	lcd_command(0x02); // Cursor Home
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff ff90 	bl	8000610 <lcd_command>
	lcd_command(0x06); // Write Direction = Right
 80006f0:	2006      	movs	r0, #6
 80006f2:	f7ff ff8d 	bl	8000610 <lcd_command>
	lcd_command(0x0f); //
 80006f6:	200f      	movs	r0, #15
 80006f8:	f7ff ff8a 	bl	8000610 <lcd_command>
	//HAL_Delay(10);
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <lcd_print>:

void lcd_print(char* str) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
	while(*str) {
 800070c:	e006      	b.n	800071c <lcd_print+0x1c>
		lcd_data(*str++);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1c5a      	adds	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffae 	bl	8000678 <lcd_data>
	while(*str) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f4      	bne.n	800070e <lcd_print+0xe>
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_printEx>:

void lcd_printEx(char* str, int ln) {
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	6039      	str	r1, [r7, #0]
	if(ln == 0) {
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d102      	bne.n	8000744 <lcd_printEx+0x16>
		lcd_command(0x80);
 800073e:	2080      	movs	r0, #128	; 0x80
 8000740:	f7ff ff66 	bl	8000610 <lcd_command>
	}
	if(ln == 1) {
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d102      	bne.n	8000750 <lcd_printEx+0x22>
		lcd_command(0xc0);
 800074a:	20c0      	movs	r0, #192	; 0xc0
 800074c:	f7ff ff60 	bl	8000610 <lcd_command>
	}
	lcd_print(str);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffd5 	bl	8000700 <lcd_print>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <lcd_print_joystick>:
		lcd_printEx(str, 1);
		strcpy(sBuf, str);
	}
}

void lcd_print_joystick(unsigned short val, int ln) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	80fb      	strh	r3, [r7, #6]
	str[1] = ((val / 100) % 10) + 48;
	str[2] = ((val / 10) % 10) + 48;
	str[3] = (val % 10) + 48;
	str[4] = NULL;*/
	//sprintf(str, "%04d", val);
	if(ln) {
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d007      	beq.n	8000782 <lcd_print_joystick+0x22>
		sprintf(str, "Y : %-4d", val);
 8000772:	88fa      	ldrh	r2, [r7, #6]
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	490a      	ldr	r1, [pc, #40]	; (80007a4 <lcd_print_joystick+0x44>)
 800077a:	4618      	mov	r0, r3
 800077c:	f004 fa40 	bl	8004c00 <siprintf>
 8000780:	e006      	b.n	8000790 <lcd_print_joystick+0x30>
	} else {
		sprintf(str, "X : %-4d", val);
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <lcd_print_joystick+0x48>)
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fa38 	bl	8004c00 <siprintf>
	*(str + 1) = ((val / 100) % 10) + 48;
	*(str + 2) = ((val / 10) % 10) + 48;
	*(str + 3) = (val % 10) + 48;
	*(str + 4) = NULL;*/ // Not Working

	lcd_printEx(str, ln);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	6839      	ldr	r1, [r7, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ffc9 	bl	800072e <lcd_printEx>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08005cb0 	.word	0x08005cb0
 80007a8:	08005cbc 	.word	0x08005cbc

080007ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int ch = 0, val1, val2;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start_IT(&hadc1);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80007b6:	f000 fe15 	bl	80013e4 <HAL_ADC_Start_IT>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000088 	.word	0x20000088

080007c8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if(ch) {
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_ADC_ConvCpltCallback+0x4c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00c      	beq.n	80007f2 <HAL_ADC_ConvCpltCallback+0x2a>
		val1 = HAL_ADC_GetValue(&hadc1);
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <HAL_ADC_ConvCpltCallback+0x50>)
 80007da:	f000 ffd1 	bl	8001780 <HAL_ADC_GetValue>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_ADC_ConvCpltCallback+0x54>)
 80007e4:	601a      	str	r2, [r3, #0]
		ch--;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_ADC_ConvCpltCallback+0x4c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_ADC_ConvCpltCallback+0x4c>)
 80007ee:	6013      	str	r3, [r2, #0]
	} else {
		val2 = HAL_ADC_GetValue(&hadc1);
		ch++;
	}
}
 80007f0:	e00b      	b.n	800080a <HAL_ADC_ConvCpltCallback+0x42>
		val2 = HAL_ADC_GetValue(&hadc1);
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_ADC_ConvCpltCallback+0x50>)
 80007f4:	f000 ffc4 	bl	8001780 <HAL_ADC_GetValue>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_ADC_ConvCpltCallback+0x58>)
 80007fe:	601a      	str	r2, [r3, #0]
		ch++;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a03      	ldr	r2, [pc, #12]	; (8000814 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000808:	6013      	str	r3, [r2, #0]
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200001b4 	.word	0x200001b4
 8000818:	20000088 	.word	0x20000088
 800081c:	200001b8 	.word	0x200001b8
 8000820:	200001bc 	.word	0x200001bc

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 fd02 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f834 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f000 f9a6 	bl	8000b80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000834:	f000 f97a 	bl	8000b2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000838:	f000 f898 	bl	800096c <MX_ADC1_Init>
  MX_I2C2_Init();
 800083c:	f000 f8fa 	bl	8000a34 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000840:	f000 f926 	bl	8000a90 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("Test998");
 8000844:	480f      	ldr	r0, [pc, #60]	; (8000884 <main+0x60>)
 8000846:	f000 fa57 	bl	8000cf8 <ProgramStart>
  i2c_init(&hi2c2);
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <main+0x64>)
 800084c:	f7ff fe96 	bl	800057c <i2c_init>
  i2c_scan();
 8000850:	f7ff fea4 	bl	800059c <i2c_scan>
  lcd_init();
 8000854:	f7ff ff44 	bl	80006e0 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <main+0x68>)
 800085a:	f002 ff67 	bl	800372c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_print_joystick(val2, 0);
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <main+0x6c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff7b 	bl	8000760 <lcd_print_joystick>
	  HAL_Delay(50);
 800086a:	2032      	movs	r0, #50	; 0x32
 800086c:	f000 fd52 	bl	8001314 <HAL_Delay>
	  lcd_print_joystick(val1, 1);
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <main+0x70>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff72 	bl	8000760 <lcd_print_joystick>
	  HAL_Delay(50);
 800087c:	2032      	movs	r0, #50	; 0x32
 800087e:	f000 fd49 	bl	8001314 <HAL_Delay>
  {
 8000882:	e7ec      	b.n	800085e <main+0x3a>
 8000884:	08005ce0 	.word	0x08005ce0
 8000888:	200000d0 	.word	0x200000d0
 800088c:	20000124 	.word	0x20000124
 8000890:	200001bc 	.word	0x200001bc
 8000894:	200001b8 	.word	0x200001b8

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 faa2 	bl	8004df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	2310      	movs	r3, #16
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000904:	2300      	movs	r3, #0
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000908:	2310      	movs	r3, #16
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800090c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000912:	2304      	movs	r3, #4
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000916:	2304      	movs	r3, #4
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fa1c 	bl	8002d5c <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800092a:	f000 f997 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2102      	movs	r1, #2
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fc7e 	bl	800324c <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000956:	f000 f981 	bl	8000c5c <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <MX_ADC1_Init+0xbc>)
 8000980:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <MX_ADC1_Init+0xc0>)
 8000982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_ADC1_Init+0xbc>)
 8000986:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800098a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_ADC1_Init+0xbc>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_ADC1_Init+0xbc>)
 8000994:	2201      	movs	r2, #1
 8000996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_ADC1_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009b4:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <MX_ADC1_Init+0xc4>)
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009d4:	f000 fcc2 	bl	800135c <HAL_ADC_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80009de:	f000 f93d 	bl	8000c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_ADC1_Init+0xbc>)
 80009f4:	f000 fee6 	bl	80017c4 <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80009fe:	f000 f92d 	bl	8000c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_ADC1_Init+0xbc>)
 8000a10:	f000 fed8 	bl	80017c4 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a1a:	f000 f91f 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000088 	.word	0x20000088
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <MX_I2C2_Init+0x54>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_I2C2_Init+0x58>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_I2C2_Init+0x50>)
 8000a72:	f001 fba7 	bl	80021c4 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 f8ee 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000d0 	.word	0x200000d0
 8000a88:	40005800 	.word	0x40005800
 8000a8c:	000186a0 	.word	0x000186a0

08000a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <MX_TIM3_Init+0x98>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8399;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000ac2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ad4:	4813      	ldr	r0, [pc, #76]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000ad6:	f002 fdd9 	bl	800368c <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ae0:	f000 f8bc 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000af2:	f002 ff6d 	bl	80039d0 <HAL_TIM_ConfigClockSource>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000afc:	f000 f8ae 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_TIM3_Init+0x94>)
 8000b0e:	f003 f975 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f8a0 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000124 	.word	0x20000124
 8000b28:	40000400 	.word	0x40000400

08000b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_USART2_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f003 f9cc 	bl	8003f00 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 f875 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000016c 	.word	0x2000016c
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a25      	ldr	r2, [pc, #148]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_GPIO_Init+0xd0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2120      	movs	r1, #32
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c0c:	f001 fac0 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_GPIO_Init+0xd8>)
 8000c28:	f001 f916 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c44:	f001 f908 	bl	8001e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020800 	.word	0x40020800

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <__io_getchar>:
#include "main.h"
#include <stdio.h>
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h" //If you want to use it universally, You have to include "Absolute Path"
extern UART_HandleTypeDef huart2;

int __io_getchar(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	int ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000c6e:	bf00      	nop
 8000c70:	1d39      	adds	r1, r7, #4
 8000c72:	230a      	movs	r3, #10
 8000c74:	2201      	movs	r2, #1
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <__io_getchar+0x44>)
 8000c78:	f003 fa1d 	bl	80040b6 <HAL_UART_Receive>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f6      	bne.n	8000c70 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000c82:	1d39      	adds	r1, r7, #4
 8000c84:	230a      	movs	r3, #10
 8000c86:	2201      	movs	r2, #1
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <__io_getchar+0x44>)
 8000c8a:	f003 f989 	bl	8003fa0 <HAL_UART_Transmit>
	if((ch & 0x000000ff) == '\r'){
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b0d      	cmp	r3, #13
 8000c94:	d105      	bne.n	8000ca2 <__io_getchar+0x3a>
		HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000c96:	230a      	movs	r3, #10
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4905      	ldr	r1, [pc, #20]	; (8000cb0 <__io_getchar+0x48>)
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <__io_getchar+0x44>)
 8000c9e:	f003 f97f 	bl	8003fa0 <HAL_UART_Transmit>
	}
	return ch;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000016c 	.word	0x2000016c
 8000cb0:	08005ce8 	.word	0x08005ce8

08000cb4 <__io_putchar>:
int __io_putchar(int ch) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10); // size(byte), timeout(ms)
 8000cbc:	1d39      	adds	r1, r7, #4
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <__io_putchar+0x20>)
 8000cc4:	f003 f96c 	bl	8003fa0 <HAL_UART_Transmit>
	return ch;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000016c 	.word	0x2000016c

08000cd8 <StandBy>:

void StandBy() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {}
 8000cdc:	bf00      	nop
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <StandBy+0x1c>)
 8000ce4:	f001 fa3c 	bl	8002160 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f7      	bne.n	8000cde <StandBy+0x6>
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020800 	.word	0x40020800

08000cf8 <ProgramStart>:

void ProgramStart(char* str) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	//printf("\033[2J\033[0;0H");
	cls();
 8000d00:	f000 f820 	bl	8000d44 <cls>
	Cursor(0, 0);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 f826 	bl	8000d58 <Cursor>
	printf("Program Start - %s\r\n", str);
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	480a      	ldr	r0, [pc, #40]	; (8000d38 <ProgramStart+0x40>)
 8000d10:	f003 fe5a 	bl	80049c8 <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <ProgramStart+0x44>)
 8000d16:	f003 febd 	bl	8004a94 <puts>
	StandBy();
 8000d1a:	f7ff ffdd 	bl	8000cd8 <StandBy>
	setvbuf(stdin, NULL, _IONBF, 0);
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <ProgramStart+0x48>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6858      	ldr	r0, [r3, #4]
 8000d24:	2300      	movs	r3, #0
 8000d26:	2202      	movs	r2, #2
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f003 febb 	bl	8004aa4 <setvbuf>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08005cec 	.word	0x08005cec
 8000d3c:	08005d04 	.word	0x08005d04
 8000d40:	20000064 	.word	0x20000064

08000d44 <cls>:

void cls() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <cls+0x10>)
 8000d4a:	f003 fe3d 	bl	80049c8 <iprintf>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08005d28 	.word	0x08005d28

08000d58 <Cursor>:

void Cursor(int x, int y) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	char buf[20];
	printf("\033[%d;%dH", y, x);
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6839      	ldr	r1, [r7, #0]
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <Cursor+0x1c>)
 8000d68:	f003 fe2e 	bl	80049c8 <iprintf>
	//sprintf(buf, "\033[%d;%dH", y, x);
	//puts(buf);
	//printf("%s", buf);
}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08005d30 	.word	0x08005d30

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db6:	2007      	movs	r0, #7
 8000db8:	f001 f80c 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_ADC_MspInit+0x8c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12f      	bne.n	8000e4a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_ADC_MspInit+0x90>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_ADC_MspInit+0x90>)
 8000df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_ADC_MspInit+0x90>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_ADC_MspInit+0x90>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_ADC_MspInit+0x90>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_ADC_MspInit+0x90>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e22:	2303      	movs	r3, #3
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_ADC_MspInit+0x94>)
 8000e36:	f001 f80f 	bl	8001e58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2012      	movs	r0, #18
 8000e40:	f000 ffd3 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e44:	2012      	movs	r0, #18
 8000e46:	f000 ffec 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40012000 	.word	0x40012000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <HAL_I2C_MspInit+0xa8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d13d      	bne.n	8000efe <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4815      	ldr	r0, [pc, #84]	; (8000f10 <HAL_I2C_MspInit+0xb0>)
 8000ebc:	f000 ffcc 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec6:	2312      	movs	r3, #18
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <HAL_I2C_MspInit+0xb0>)
 8000ede:	f000 ffbb 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	; 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40005800 	.word	0x40005800
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020400 	.word	0x40020400

08000f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_TIM_Base_MspInit+0x48>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d115      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_TIM_Base_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_TIM_Base_MspInit+0x4c>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_TIM_Base_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	201d      	movs	r0, #29
 8000f48:	f000 ff4f 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f4c:	201d      	movs	r0, #29
 8000f4e:	f000 ff68 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12b      	bne.n	8000fde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fda:	f000 ff3d 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f948 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <ADC_IRQHandler+0x10>)
 800104e:	f000 fa87 	bl	8001560 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000088 	.word	0x20000088

0800105c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM3_IRQHandler+0x10>)
 8001062:	f002 fbc5 	bl	80037f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000124 	.word	0x20000124

08001070 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00a      	b.n	8001098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001082:	f7ff fdf1 	bl	8000c68 <__io_getchar>
 8001086:	4601      	mov	r1, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	b2ca      	uxtb	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf0      	blt.n	8001082 <_read+0x12>
  }

  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e009      	b.n	80010d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	60ba      	str	r2, [r7, #8]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fdf5 	bl	8000cb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf1      	blt.n	80010bc <_write+0x12>
  }
  return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_close>:

int _close(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	605a      	str	r2, [r3, #4]
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_isatty>:

int _isatty(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f003 fe86 	bl	8004e8c <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20020000 	.word	0x20020000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	200001c0 	.word	0x200001c0
 80011b4:	20000318 	.word	0x20000318

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e0:	f7ff ffea 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	; (800121c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	; (8001228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f003 fe45 	bl	8004e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fb09 	bl	8000824 <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001220:	08005d98 	.word	0x08005d98
  ldr r2, =_sbss
 8001224:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001228:	20000314 	.word	0x20000314

0800122c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <DMA1_Stream0_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_Init+0x40>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_Init+0x40>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x40>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 fdbb 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fd88 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fdd3 	bl	8001e3e <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 fd9b 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	200001c4 	.word	0x200001c4

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200001c4 	.word	0x200001c4

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e033      	b.n	80013da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fd24 	bl	8000dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013a2:	f023 0302 	bic.w	r3, r3, #2
 80013a6:	f043 0202 	orr.w	r2, r3, #2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fb3a 	bl	8001a28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
 80013ca:	e001      	b.n	80013d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Start_IT+0x1a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e0a1      	b.n	8001542 <HAL_ADC_Start_IT+0x15e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b01      	cmp	r3, #1
 8001412:	d018      	beq.n	8001446 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <HAL_ADC_Start_IT+0x16c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <HAL_ADC_Start_IT+0x170>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9a      	lsrs	r2, r3, #18
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001438:	e002      	b.n	8001440 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d169      	bne.n	8001528 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800147e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001492:	d106      	bne.n	80014a2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	f023 0206 	bic.w	r2, r3, #6
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
 80014a0:	e002      	b.n	80014a8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_ADC_Start_IT+0x174>)
 80014b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014bc:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d129      	bne.n	8001540 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	e020      	b.n	8001540 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_ADC_Start_IT+0x178>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d11b      	bne.n	8001540 <HAL_ADC_Start_IT+0x15c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d114      	bne.n	8001540 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	e00b      	b.n	8001540 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f043 0210 	orr.w	r2, r3, #16
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000
 8001554:	431bde83 	.word	0x431bde83
 8001558:	40012300 	.word	0x40012300
 800155c:	40012000 	.word	0x40012000

08001560 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d049      	beq.n	800162a <HAL_ADC_IRQHandler+0xca>
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d046      	beq.n	800162a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d12b      	bne.n	800161a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d127      	bne.n	800161a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0220 	bic.w	r2, r2, #32
 80015f4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff f8d4 	bl	80007c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0212 	mvn.w	r2, #18
 8001628:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001638:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d057      	beq.n	80016f0 <HAL_ADC_IRQHandler+0x190>
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d054      	beq.n	80016f0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d139      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001684:	2b00      	cmp	r3, #0
 8001686:	d12b      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d124      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d11d      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d119      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fa9d 	bl	8001c20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f06f 020c 	mvn.w	r2, #12
 80016ee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d017      	beq.n	8001736 <HAL_ADC_IRQHandler+0x1d6>
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d014      	beq.n	8001736 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d10d      	bne.n	8001736 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f837 	bl	800179a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f06f 0201 	mvn.w	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001744:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d015      	beq.n	8001778 <HAL_ADC_IRQHandler+0x218>
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d012      	beq.n	8001778 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f043 0202 	orr.w	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f06f 0220 	mvn.w	r2, #32
 8001766:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f820 	bl	80017ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f06f 0220 	mvn.w	r2, #32
 8001776:	601a      	str	r2, [r3, #0]
  }
}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1c>
 80017dc:	2302      	movs	r3, #2
 80017de:	e113      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x244>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d925      	bls.n	800183c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68d9      	ldr	r1, [r3, #12]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	3b1e      	subs	r3, #30
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43da      	mvns	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68d9      	ldr	r1, [r3, #12]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	4603      	mov	r3, r0
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4403      	add	r3, r0
 800182e:	3b1e      	subs	r3, #30
 8001830:	409a      	lsls	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e022      	b.n	8001882 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6919      	ldr	r1, [r3, #16]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	2207      	movs	r2, #7
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6919      	ldr	r1, [r3, #16]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	4603      	mov	r3, r0
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4403      	add	r3, r0
 8001878:	409a      	lsls	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b06      	cmp	r3, #6
 8001888:	d824      	bhi.n	80018d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b05      	subs	r3, #5
 800189c:	221f      	movs	r2, #31
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	400a      	ands	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b05      	subs	r3, #5
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
 80018d2:	e04c      	b.n	800196e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d824      	bhi.n	8001926 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b23      	subs	r3, #35	; 0x23
 80018ee:	221f      	movs	r2, #31
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43da      	mvns	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	400a      	ands	r2, r1
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	3b23      	subs	r3, #35	; 0x23
 8001918:	fa00 f203 	lsl.w	r2, r0, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
 8001924:	e023      	b.n	800196e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b41      	subs	r3, #65	; 0x41
 8001938:	221f      	movs	r2, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b41      	subs	r3, #65	; 0x41
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_ADC_ConfigChannel+0x250>)
 8001970:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <HAL_ADC_ConfigChannel+0x254>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d10f      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1d8>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b12      	cmp	r3, #18
 8001982:	d10b      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_ADC_ConfigChannel+0x254>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23a>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_ADC_ConfigChannel+0x258>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d003      	beq.n	80019b8 <HAL_ADC_ConfigChannel+0x1f4>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b11      	cmp	r3, #17
 80019b6:	d122      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_ADC_ConfigChannel+0x258>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_ADC_ConfigChannel+0x25c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_ADC_ConfigChannel+0x260>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9a      	lsrs	r2, r3, #18
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40012300 	.word	0x40012300
 8001a18:	40012000 	.word	0x40012000
 8001a1c:	10000012 	.word	0x10000012
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a30:	4b79      	ldr	r3, [pc, #484]	; (8001c18 <ADC_Init+0x1f0>)
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	021a      	lsls	r2, r3, #8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <ADC_Init+0x1f4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d022      	beq.n	8001b06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ace:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6899      	ldr	r1, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6899      	ldr	r1, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	e00f      	b.n	8001b26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0202 	bic.w	r2, r2, #2
 8001b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
 8001b40:	005a      	lsls	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01b      	beq.n	8001b8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	035a      	lsls	r2, r3, #13
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	e007      	b.n	8001b9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	051a      	lsls	r2, r3, #20
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bde:	025a      	lsls	r2, r3, #9
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	029a      	lsls	r2, r3, #10
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	0f000001 	.word	0x0f000001

08001c20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e159      	b.n	8002128 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8148 	bne.w	8002122 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a2 	beq.w	8002122 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b54      	ldr	r3, [pc, #336]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_GPIO_Init+0x2ec>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_GPIO_Init+0x2f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x202>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a48      	ldr	r2, [pc, #288]	; (800214c <HAL_GPIO_Init+0x2f4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x1fe>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a47      	ldr	r2, [pc, #284]	; (8002150 <HAL_GPIO_Init+0x2f8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a46      	ldr	r2, [pc, #280]	; (8002154 <HAL_GPIO_Init+0x2fc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x1f6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a45      	ldr	r2, [pc, #276]	; (8002158 <HAL_GPIO_Init+0x300>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x1f2>
 8002046:	2304      	movs	r3, #4
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204a:	2307      	movs	r3, #7
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x204>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <HAL_GPIO_Init+0x2ec>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_GPIO_Init+0x304>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a2f      	ldr	r2, [pc, #188]	; (800215c <HAL_GPIO_Init+0x304>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_GPIO_Init+0x304>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <HAL_GPIO_Init+0x304>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_GPIO_Init+0x304>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_GPIO_Init+0x304>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_GPIO_Init+0x304>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211c:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_GPIO_Init+0x304>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f aea2 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e12b      	b.n	800242e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe fe38 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2224      	movs	r2, #36	; 0x24
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002228:	f001 fa08 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 800222c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a81      	ldr	r2, [pc, #516]	; (8002438 <HAL_I2C_Init+0x274>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d807      	bhi.n	8002248 <HAL_I2C_Init+0x84>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a80      	ldr	r2, [pc, #512]	; (800243c <HAL_I2C_Init+0x278>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e006      	b.n	8002256 <HAL_I2C_Init+0x92>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a7d      	ldr	r2, [pc, #500]	; (8002440 <HAL_I2C_Init+0x27c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0e7      	b.n	800242e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a78      	ldr	r2, [pc, #480]	; (8002444 <HAL_I2C_Init+0x280>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a6a      	ldr	r2, [pc, #424]	; (8002438 <HAL_I2C_Init+0x274>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d802      	bhi.n	8002298 <HAL_I2C_Init+0xd4>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3301      	adds	r3, #1
 8002296:	e009      	b.n	80022ac <HAL_I2C_Init+0xe8>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a69      	ldr	r2, [pc, #420]	; (8002448 <HAL_I2C_Init+0x284>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	3301      	adds	r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	495c      	ldr	r1, [pc, #368]	; (8002438 <HAL_I2C_Init+0x274>)
 80022c8:	428b      	cmp	r3, r1
 80022ca:	d819      	bhi.n	8002300 <HAL_I2C_Init+0x13c>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e59      	subs	r1, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022da:	1c59      	adds	r1, r3, #1
 80022dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_I2C_Init+0x138>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e59      	subs	r1, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	e051      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e04f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_I2C_Init+0x168>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e012      	b.n	8002352 <HAL_I2C_Init+0x18e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	0099      	lsls	r1, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Init+0x196>
 8002356:	2301      	movs	r3, #1
 8002358:	e022      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10e      	bne.n	8002380 <HAL_I2C_Init+0x1bc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e58      	subs	r0, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	440b      	add	r3, r1
 8002370:	fbb0 f3f3 	udiv	r3, r0, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	e00f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	0099      	lsls	r1, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	6809      	ldr	r1, [r1, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6911      	ldr	r1, [r2, #16]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68d2      	ldr	r2, [r2, #12]
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	000186a0 	.word	0x000186a0
 800243c:	001e847f 	.word	0x001e847f
 8002440:	003d08ff 	.word	0x003d08ff
 8002444:	431bde83 	.word	0x431bde83
 8002448:	10624dd3 	.word	0x10624dd3

0800244c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	460b      	mov	r3, r1
 800245a:	817b      	strh	r3, [r7, #10]
 800245c:	4613      	mov	r3, r2
 800245e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7fe ff4c 	bl	80012fc <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	f040 80e0 	bne.w	8002634 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2319      	movs	r3, #25
 800247a:	2201      	movs	r2, #1
 800247c:	4970      	ldr	r1, [pc, #448]	; (8002640 <HAL_I2C_Master_Transmit+0x1f4>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa92 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	e0d3      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_I2C_Master_Transmit+0x50>
 8002498:	2302      	movs	r3, #2
 800249a:	e0cc      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d007      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2221      	movs	r2, #33	; 0x21
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2210      	movs	r2, #16
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	893a      	ldrh	r2, [r7, #8]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_I2C_Master_Transmit+0x1f8>)
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002504:	8979      	ldrh	r1, [r7, #10]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f9ca 	bl	80028a4 <I2C_MasterRequestWrite>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e08d      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002530:	e066      	b.n	8002600 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	6a39      	ldr	r1, [r7, #32]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fb50 	bl	8002bdc <I2C_WaitOnTXEFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b04      	cmp	r3, #4
 8002548:	d107      	bne.n	800255a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002558:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06b      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b04      	cmp	r3, #4
 800259a:	d11b      	bne.n	80025d4 <HAL_I2C_Master_Transmit+0x188>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d017      	beq.n	80025d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	6a39      	ldr	r1, [r7, #32]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fb47 	bl	8002c6c <I2C_WaitOnBTFFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d107      	bne.n	80025fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e01a      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	d194      	bne.n	8002532 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	00100002 	.word	0x00100002
 8002644:	ffff0000 	.word	0xffff0000

08002648 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	460b      	mov	r3, r1
 8002656:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7fe fe50 	bl	80012fc <HAL_GetTick>
 800265c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	f040 8111 	bne.w	8002892 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2319      	movs	r3, #25
 8002676:	2201      	movs	r2, #1
 8002678:	4988      	ldr	r1, [pc, #544]	; (800289c <HAL_I2C_IsDeviceReady+0x254>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f994 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	e104      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_I2C_IsDeviceReady+0x50>
 8002694:	2302      	movs	r3, #2
 8002696:	e0fd      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d007      	beq.n	80026be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2224      	movs	r2, #36	; 0x24
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a70      	ldr	r2, [pc, #448]	; (80028a0 <HAL_I2C_IsDeviceReady+0x258>)
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f952 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002718:	d103      	bne.n	8002722 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0b6      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002734:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe fde1 	bl	80012fc <HAL_GetTick>
 800273a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800276a:	e025      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7fe fdc6 	bl	80012fc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <HAL_I2C_IsDeviceReady+0x13a>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	22a0      	movs	r2, #160	; 0xa0
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2ba0      	cmp	r3, #160	; 0xa0
 80027c2:	d005      	beq.n	80027d0 <HAL_I2C_IsDeviceReady+0x188>
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_I2C_IsDeviceReady+0x188>
 80027ca:	7dbb      	ldrb	r3, [r7, #22]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0cd      	beq.n	800276c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d129      	bne.n	800283a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2319      	movs	r3, #25
 8002812:	2201      	movs	r2, #1
 8002814:	4921      	ldr	r1, [pc, #132]	; (800289c <HAL_I2C_IsDeviceReady+0x254>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f8c6 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e036      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e02c      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002848:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002852:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2319      	movs	r3, #25
 800285a:	2201      	movs	r2, #1
 800285c:	490f      	ldr	r1, [pc, #60]	; (800289c <HAL_I2C_IsDeviceReady+0x254>)
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f8a2 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e012      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3301      	adds	r3, #1
 8002872:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	f4ff af32 	bcc.w	80026e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00100002 	.word	0x00100002
 80028a0:	ffff0000 	.word	0xffff0000

080028a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	460b      	mov	r3, r1
 80028b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d006      	beq.n	80028ce <I2C_MasterRequestWrite+0x2a>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d003      	beq.n	80028ce <I2C_MasterRequestWrite+0x2a>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028cc:	d108      	bne.n	80028e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e00b      	b.n	80028f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b12      	cmp	r3, #18
 80028e6:	d107      	bne.n	80028f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f84f 	bl	80029a8 <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291e:	d103      	bne.n	8002928 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e035      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002934:	d108      	bne.n	8002948 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	e01b      	b.n	8002980 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002948:	897b      	ldrh	r3, [r7, #10]
 800294a:	11db      	asrs	r3, r3, #7
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0306 	and.w	r3, r3, #6
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f063 030f 	orn	r3, r3, #15
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <I2C_MasterRequestWrite+0xfc>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f898 	bl	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e010      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4907      	ldr	r1, [pc, #28]	; (80029a4 <I2C_MasterRequestWrite+0x100>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f888 	bl	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	00010008 	.word	0x00010008
 80029a4:	00010002 	.word	0x00010002

080029a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b8:	e048      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d044      	beq.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7fe fc9b 	bl	80012fc <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d139      	bne.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10d      	bne.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	43da      	mvns	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4013      	ands	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	e00c      	b.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	43da      	mvns	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d116      	bne.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e023      	b.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10d      	bne.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4013      	ands	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	e00c      	b.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d093      	beq.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aaa:	e071      	b.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d123      	bne.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e067      	b.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0a:	d041      	beq.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0c:	f7fe fbf6 	bl	80012fc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d302      	bcc.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d136      	bne.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10c      	bne.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e00b      	b.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e021      	b.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10c      	bne.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e00b      	b.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f af6d 	bne.w	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be8:	e034      	b.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f886 	bl	8002cfc <I2C_IsAcknowledgeFailed>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e034      	b.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d028      	beq.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe fb7b 	bl	80012fc <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11d      	bne.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d016      	beq.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d1c3      	bne.n	8002bea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c78:	e034      	b.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f83e 	bl	8002cfc <I2C_IsAcknowledgeFailed>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e034      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d028      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fe fb33 	bl	80012fc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11d      	bne.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d016      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e007      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d1c3      	bne.n	8002c7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d11b      	bne.n	8002d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e267      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d075      	beq.n	8002e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d112      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d157      	bne.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e242      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x74>
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6c      	ldr	r2, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fa72 	bl	80012fc <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fa6e 	bl	80012fc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e207      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fa5e 	bl	80012fc <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fa5a 	bl	80012fc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1f3      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1c7      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4937      	ldr	r1, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fa13 	bl	80012fc <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fa0f 	bl	80012fc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1a8      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4925      	ldr	r1, [pc, #148]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe f9f2 	bl	80012fc <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe f9ee 	bl	80012fc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e187      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d036      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe f9d2 	bl	80012fc <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f9ce 	bl	80012fc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e167      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x200>
 8002f7a:	e01b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe f9bb 	bl	80012fc <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe f9b7 	bl	80012fc <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e150      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ea      	bne.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8097 	beq.w	80030f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b81      	ldr	r3, [pc, #516]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b7d      	ldr	r3, [pc, #500]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b7a      	ldr	r3, [pc, #488]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b77      	ldr	r3, [pc, #476]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b74      	ldr	r3, [pc, #464]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a73      	ldr	r2, [pc, #460]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe f977 	bl	80012fc <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe f973 	bl	80012fc <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e10c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x2ea>
 8003038:	4b64      	ldr	r3, [pc, #400]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a63      	ldr	r2, [pc, #396]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	e01c      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x30c>
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a5e      	ldr	r2, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5b      	ldr	r2, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a57      	ldr	r2, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a54      	ldr	r2, [pc, #336]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe f938 	bl	80012fc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe f934 	bl	80012fc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0cb      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <HAL_RCC_OscConfig+0x334>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe f922 	bl	80012fc <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe f91e 	bl	80012fc <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0b5      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a38      	ldr	r2, [pc, #224]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a1 	beq.w	800323c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d05c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d141      	bne.n	8003192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe f8f2 	bl	80012fc <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe f8ee 	bl	80012fc <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e087      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	491b      	ldr	r1, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe f8c7 	bl	80012fc <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe f8c3 	bl	80012fc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e05c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x416>
 8003190:	e054      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe f8b0 	bl	80012fc <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe f8ac 	bl	80012fc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e045      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x444>
 80031be:	e03d      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e038      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
 80031d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x4ec>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d028      	beq.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d121      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d11a      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800320e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	3b01      	subs	r3, #1
 8003222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cc      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b68      	ldr	r3, [pc, #416]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d90c      	bls.n	8003288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b65      	ldr	r3, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d044      	beq.n	800336c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d119      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	2b03      	cmp	r3, #3
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e067      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4934      	ldr	r1, [pc, #208]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd ffde 	bl	80012fc <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fd ffda 	bl	80012fc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e04f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d20c      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd ff3e 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	08005d3c 	.word	0x08005d3c
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b094      	sub	sp, #80	; 0x50
 800341e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003430:	4b79      	ldr	r3, [pc, #484]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 800343c:	2b08      	cmp	r3, #8
 800343e:	f200 80e1 	bhi.w	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e0db      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b73      	ldr	r3, [pc, #460]	; (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 800344e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003450:	e0db      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b73      	ldr	r3, [pc, #460]	; (8003620 <HAL_RCC_GetSysClockFreq+0x208>)
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003456:	e0d8      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	2200      	movs	r2, #0
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38
 8003478:	63fa      	str	r2, [r7, #60]	; 0x3c
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
 8003482:	2300      	movs	r3, #0
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
 8003486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	0159      	lsls	r1, r3, #5
 8003498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349c:	0150      	lsls	r0, r2, #5
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4621      	mov	r1, r4
 80034a4:	1a51      	subs	r1, r2, r1
 80034a6:	6139      	str	r1, [r7, #16]
 80034a8:	4629      	mov	r1, r5
 80034aa:	eb63 0301 	sbc.w	r3, r3, r1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034bc:	4659      	mov	r1, fp
 80034be:	018b      	lsls	r3, r1, #6
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c6:	4651      	mov	r1, sl
 80034c8:	018a      	lsls	r2, r1, #6
 80034ca:	4651      	mov	r1, sl
 80034cc:	ebb2 0801 	subs.w	r8, r2, r1
 80034d0:	4659      	mov	r1, fp
 80034d2:	eb63 0901 	sbc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	462b      	mov	r3, r5
 80034f8:	eb49 0303 	adc.w	r3, r9, r3
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800350a:	4629      	mov	r1, r5
 800350c:	024b      	lsls	r3, r1, #9
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003514:	4621      	mov	r1, r4
 8003516:	024a      	lsls	r2, r1, #9
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003528:	f7fc feaa 	bl	8000280 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003534:	e058      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b38      	ldr	r3, [pc, #224]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	4618      	mov	r0, r3
 8003540:	4611      	mov	r1, r2
 8003542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	0159      	lsls	r1, r3, #5
 800355e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003562:	0150      	lsls	r0, r2, #5
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4641      	mov	r1, r8
 800356a:	ebb2 0a01 	subs.w	sl, r2, r1
 800356e:	4649      	mov	r1, r9
 8003570:	eb63 0b01 	sbc.w	fp, r3, r1
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003588:	ebb2 040a 	subs.w	r4, r2, sl
 800358c:	eb63 050b 	sbc.w	r5, r3, fp
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	00eb      	lsls	r3, r5, #3
 800359a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359e:	00e2      	lsls	r2, r4, #3
 80035a0:	4614      	mov	r4, r2
 80035a2:	461d      	mov	r5, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	18e3      	adds	r3, r4, r3
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	464b      	mov	r3, r9
 80035ac:	eb45 0303 	adc.w	r3, r5, r3
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035be:	4629      	mov	r1, r5
 80035c0:	028b      	lsls	r3, r1, #10
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c8:	4621      	mov	r1, r4
 80035ca:	028a      	lsls	r2, r1, #10
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	61fa      	str	r2, [r7, #28]
 80035d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035dc:	f7fc fe50 	bl	8000280 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80035f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003602:	e002      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800360c:	4618      	mov	r0, r3
 800360e:	3750      	adds	r7, #80	; 0x50
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	00f42400 	.word	0x00f42400
 8003620:	007a1200 	.word	0x007a1200

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCC_GetHCLKFreq+0x14>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000000 	.word	0x20000000

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003640:	f7ff fff0 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0a9b      	lsrs	r3, r3, #10
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	08005d4c 	.word	0x08005d4c

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003668:	f7ff ffdc 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0b5b      	lsrs	r3, r3, #13
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	08005d4c 	.word	0x08005d4c

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e041      	b.n	8003722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fc2e 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 fa70 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d001      	beq.n	8003744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e044      	b.n	80037ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x6c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d013      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x6c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00e      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x6c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x6c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x6c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a16      	ldr	r2, [pc, #88]	; (80037ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d010      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	e007      	b.n	80037cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	40014000 	.word	0x40014000

080037f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d020      	beq.n	8003854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01b      	beq.n	8003854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0202 	mvn.w	r2, #2
 8003824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f999 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f98b 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f99c 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d020      	beq.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01b      	beq.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0204 	mvn.w	r2, #4
 8003870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f973 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 800388c:	e005      	b.n	800389a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f965 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f976 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d020      	beq.n	80038ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01b      	beq.n	80038ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0208 	mvn.w	r2, #8
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2204      	movs	r2, #4
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f94d 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f93f 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f950 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d020      	beq.n	8003938 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0210 	mvn.w	r2, #16
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2208      	movs	r2, #8
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f927 	bl	8003b72 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f919 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f92a 	bl	8003b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0201 	mvn.w	r2, #1
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fc ff28 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fab6 	bl	8003eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8fb 	bl	8003b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00c      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0220 	mvn.w	r2, #32
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa88 	bl	8003ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_TIM_ConfigClockSource+0x1c>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0b4      	b.n	8003b56 <HAL_TIM_ConfigClockSource+0x186>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d03e      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	f200 8087 	bhi.w	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	f000 8086 	beq.w	8003b42 <HAL_TIM_ConfigClockSource+0x172>
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d87f      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d01a      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0xa6>
 8003a40:	2b70      	cmp	r3, #112	; 0x70
 8003a42:	d87b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d050      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x11a>
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d877      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d03c      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0xfa>
 8003a50:	2b50      	cmp	r3, #80	; 0x50
 8003a52:	d873      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d058      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x13a>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d86f      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d064      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d86b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d060      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d867      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05c      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d05a      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	e062      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	f000 f999 	bl	8003dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	609a      	str	r2, [r3, #8]
      break;
 8003aa2:	e04f      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ab4:	f000 f982 	bl	8003dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac6:	609a      	str	r2, [r3, #8]
      break;
 8003ac8:	e03c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 f8f6 	bl	8003cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2150      	movs	r1, #80	; 0x50
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f94f 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e02c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 f915 	bl	8003d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2160      	movs	r1, #96	; 0x60
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f93f 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e01c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b16:	461a      	mov	r2, r3
 8003b18:	f000 f8d6 	bl	8003cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2140      	movs	r1, #64	; 0x40
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f92f 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003b28:	e00c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f000 f926 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003b3a:	e003      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e000      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3a      	ldr	r2, [pc, #232]	; (8003cac <TIM_Base_SetConfig+0xfc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00f      	beq.n	8003be8 <TIM_Base_SetConfig+0x38>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d00b      	beq.n	8003be8 <TIM_Base_SetConfig+0x38>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a37      	ldr	r2, [pc, #220]	; (8003cb0 <TIM_Base_SetConfig+0x100>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_Base_SetConfig+0x38>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a36      	ldr	r2, [pc, #216]	; (8003cb4 <TIM_Base_SetConfig+0x104>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x38>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a35      	ldr	r2, [pc, #212]	; (8003cb8 <TIM_Base_SetConfig+0x108>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <TIM_Base_SetConfig+0xfc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01b      	beq.n	8003c3a <TIM_Base_SetConfig+0x8a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d017      	beq.n	8003c3a <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a28      	ldr	r2, [pc, #160]	; (8003cb0 <TIM_Base_SetConfig+0x100>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <TIM_Base_SetConfig+0x104>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00f      	beq.n	8003c3a <TIM_Base_SetConfig+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a26      	ldr	r2, [pc, #152]	; (8003cb8 <TIM_Base_SetConfig+0x108>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <TIM_Base_SetConfig+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <TIM_Base_SetConfig+0x10c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <TIM_Base_SetConfig+0x8a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a24      	ldr	r2, [pc, #144]	; (8003cc0 <TIM_Base_SetConfig+0x110>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d003      	beq.n	8003c3a <TIM_Base_SetConfig+0x8a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <TIM_Base_SetConfig+0x114>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <TIM_Base_SetConfig+0xfc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d103      	bne.n	8003c80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800

08003cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f023 0201 	bic.w	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f023 030a 	bic.w	r3, r3, #10
 8003d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f023 0210 	bic.w	r2, r3, #16
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	031b      	lsls	r3, r3, #12
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f043 0307 	orr.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	021a      	lsls	r2, r3, #8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e050      	b.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d013      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10c      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40014000 	.word	0x40014000

08003ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e042      	b.n	8003f98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd f81c 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa09 	bl	800435c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d175      	bne.n	80040ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_UART_Transmit+0x2c>
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e06e      	b.n	80040ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2221      	movs	r2, #33	; 0x21
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fde:	f7fd f98d 	bl	80012fc <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d108      	bne.n	800400c <HAL_UART_Transmit+0x6c>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e003      	b.n	8004014 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004014:	e02e      	b.n	8004074 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f8df 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e03a      	b.n	80040ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	3302      	adds	r3, #2
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e007      	b.n	8004066 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3301      	adds	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1cb      	bne.n	8004016 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f8ab 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e006      	b.n	80040ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b08a      	sub	sp, #40	; 0x28
 80040ba:	af02      	add	r7, sp, #8
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	f040 8081 	bne.w	80041da <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Receive+0x2e>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e079      	b.n	80041dc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2222      	movs	r2, #34	; 0x22
 80040f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040fc:	f7fd f8fe 	bl	80012fc <HAL_GetTick>
 8004100:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	88fa      	ldrh	r2, [r7, #6]
 800410c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004116:	d108      	bne.n	800412a <HAL_UART_Receive+0x74>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e003      	b.n	8004132 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004132:	e047      	b.n	80041c4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	2120      	movs	r1, #32
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f850 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e042      	b.n	80041dc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10c      	bne.n	8004176 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004168:	b29a      	uxth	r2, r3
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	3302      	adds	r3, #2
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	e01f      	b.n	80041b6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	d007      	beq.n	8004190 <HAL_UART_Receive+0xda>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <HAL_UART_Receive+0xe8>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	b2da      	uxtb	r2, r3
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e008      	b.n	80041b0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	3301      	adds	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1b2      	bne.n	8004134 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f4:	e03b      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d037      	beq.n	800426e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fe:	f7fd f87d 	bl	80012fc <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	429a      	cmp	r2, r3
 800420c:	d302      	bcc.n	8004214 <UART_WaitOnFlagUntilTimeout+0x30>
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e03a      	b.n	800428e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d023      	beq.n	800426e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b80      	cmp	r3, #128	; 0x80
 800422a:	d020      	beq.n	800426e <UART_WaitOnFlagUntilTimeout+0x8a>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d01d      	beq.n	800426e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b08      	cmp	r3, #8
 800423e:	d116      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f81d 	bl	8004296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2208      	movs	r2, #8
 8004260:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e00f      	b.n	800428e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	429a      	cmp	r2, r3
 800428a:	d0b4      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004296:	b480      	push	{r7}
 8004298:	b095      	sub	sp, #84	; 0x54
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042be:	643a      	str	r2, [r7, #64]	; 0x40
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	2b01      	cmp	r3, #1
 800430c:	d119      	bne.n	8004342 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60bb      	str	r3, [r7, #8]
   return(result);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800432e:	61ba      	str	r2, [r7, #24]
 8004330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e5      	bne.n	800430e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004350:	bf00      	nop
 8004352:	3754      	adds	r7, #84	; 0x54
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800435c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004360:	b0c0      	sub	sp, #256	; 0x100
 8004362:	af00      	add	r7, sp, #0
 8004364:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	68d9      	ldr	r1, [r3, #12]
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	ea40 0301 	orr.w	r3, r0, r1
 8004384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	431a      	orrs	r2, r3
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	431a      	orrs	r2, r3
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043b4:	f021 010c 	bic.w	r1, r1, #12
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043c2:	430b      	orrs	r3, r1
 80043c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d6:	6999      	ldr	r1, [r3, #24]
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	ea40 0301 	orr.w	r3, r0, r1
 80043e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b8f      	ldr	r3, [pc, #572]	; (8004628 <UART_SetConfig+0x2cc>)
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d005      	beq.n	80043fc <UART_SetConfig+0xa0>
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b8d      	ldr	r3, [pc, #564]	; (800462c <UART_SetConfig+0x2d0>)
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d104      	bne.n	8004406 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7ff f932 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8004400:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004404:	e003      	b.n	800440e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004406:	f7ff f919 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 800440a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004418:	f040 810c 	bne.w	8004634 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800441c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004420:	2200      	movs	r2, #0
 8004422:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004426:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800442a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	1891      	adds	r1, r2, r2
 8004434:	65b9      	str	r1, [r7, #88]	; 0x58
 8004436:	415b      	adcs	r3, r3
 8004438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800443a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800443e:	4621      	mov	r1, r4
 8004440:	eb12 0801 	adds.w	r8, r2, r1
 8004444:	4629      	mov	r1, r5
 8004446:	eb43 0901 	adc.w	r9, r3, r1
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800445a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800445e:	4690      	mov	r8, r2
 8004460:	4699      	mov	r9, r3
 8004462:	4623      	mov	r3, r4
 8004464:	eb18 0303 	adds.w	r3, r8, r3
 8004468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800446c:	462b      	mov	r3, r5
 800446e:	eb49 0303 	adc.w	r3, r9, r3
 8004472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004482:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800448a:	460b      	mov	r3, r1
 800448c:	18db      	adds	r3, r3, r3
 800448e:	653b      	str	r3, [r7, #80]	; 0x50
 8004490:	4613      	mov	r3, r2
 8004492:	eb42 0303 	adc.w	r3, r2, r3
 8004496:	657b      	str	r3, [r7, #84]	; 0x54
 8004498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800449c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044a0:	f7fb feee 	bl	8000280 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4b61      	ldr	r3, [pc, #388]	; (8004630 <UART_SetConfig+0x2d4>)
 80044aa:	fba3 2302 	umull	r2, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	011c      	lsls	r4, r3, #4
 80044b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044c4:	4642      	mov	r2, r8
 80044c6:	464b      	mov	r3, r9
 80044c8:	1891      	adds	r1, r2, r2
 80044ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80044cc:	415b      	adcs	r3, r3
 80044ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044d4:	4641      	mov	r1, r8
 80044d6:	eb12 0a01 	adds.w	sl, r2, r1
 80044da:	4649      	mov	r1, r9
 80044dc:	eb43 0b01 	adc.w	fp, r3, r1
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f4:	4692      	mov	sl, r2
 80044f6:	469b      	mov	fp, r3
 80044f8:	4643      	mov	r3, r8
 80044fa:	eb1a 0303 	adds.w	r3, sl, r3
 80044fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004502:	464b      	mov	r3, r9
 8004504:	eb4b 0303 	adc.w	r3, fp, r3
 8004508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004518:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800451c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004520:	460b      	mov	r3, r1
 8004522:	18db      	adds	r3, r3, r3
 8004524:	643b      	str	r3, [r7, #64]	; 0x40
 8004526:	4613      	mov	r3, r2
 8004528:	eb42 0303 	adc.w	r3, r2, r3
 800452c:	647b      	str	r3, [r7, #68]	; 0x44
 800452e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004532:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004536:	f7fb fea3 	bl	8000280 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4611      	mov	r1, r2
 8004540:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <UART_SetConfig+0x2d4>)
 8004542:	fba3 2301 	umull	r2, r3, r3, r1
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2264      	movs	r2, #100	; 0x64
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	1acb      	subs	r3, r1, r3
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <UART_SetConfig+0x2d4>)
 8004558:	fba3 2302 	umull	r2, r3, r3, r2
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004564:	441c      	add	r4, r3
 8004566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004570:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004574:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	1891      	adds	r1, r2, r2
 800457e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004580:	415b      	adcs	r3, r3
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004588:	4641      	mov	r1, r8
 800458a:	1851      	adds	r1, r2, r1
 800458c:	6339      	str	r1, [r7, #48]	; 0x30
 800458e:	4649      	mov	r1, r9
 8004590:	414b      	adcs	r3, r1
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045a0:	4659      	mov	r1, fp
 80045a2:	00cb      	lsls	r3, r1, #3
 80045a4:	4651      	mov	r1, sl
 80045a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045aa:	4651      	mov	r1, sl
 80045ac:	00ca      	lsls	r2, r1, #3
 80045ae:	4610      	mov	r0, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	4603      	mov	r3, r0
 80045b4:	4642      	mov	r2, r8
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045bc:	464b      	mov	r3, r9
 80045be:	460a      	mov	r2, r1
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045dc:	460b      	mov	r3, r1
 80045de:	18db      	adds	r3, r3, r3
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e2:	4613      	mov	r3, r2
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045f2:	f7fb fe45 	bl	8000280 <__aeabi_uldivmod>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <UART_SetConfig+0x2d4>)
 80045fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	2164      	movs	r1, #100	; 0x64
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	3332      	adds	r3, #50	; 0x32
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <UART_SetConfig+0x2d4>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	f003 0207 	and.w	r2, r3, #7
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4422      	add	r2, r4
 8004622:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004624:	e106      	b.n	8004834 <UART_SetConfig+0x4d8>
 8004626:	bf00      	nop
 8004628:	40011000 	.word	0x40011000
 800462c:	40011400 	.word	0x40011400
 8004630:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800463e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004642:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004646:	4642      	mov	r2, r8
 8004648:	464b      	mov	r3, r9
 800464a:	1891      	adds	r1, r2, r2
 800464c:	6239      	str	r1, [r7, #32]
 800464e:	415b      	adcs	r3, r3
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004656:	4641      	mov	r1, r8
 8004658:	1854      	adds	r4, r2, r1
 800465a:	4649      	mov	r1, r9
 800465c:	eb43 0501 	adc.w	r5, r3, r1
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	00eb      	lsls	r3, r5, #3
 800466a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466e:	00e2      	lsls	r2, r4, #3
 8004670:	4614      	mov	r4, r2
 8004672:	461d      	mov	r5, r3
 8004674:	4643      	mov	r3, r8
 8004676:	18e3      	adds	r3, r4, r3
 8004678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800467c:	464b      	mov	r3, r9
 800467e:	eb45 0303 	adc.w	r3, r5, r3
 8004682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004692:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046a2:	4629      	mov	r1, r5
 80046a4:	008b      	lsls	r3, r1, #2
 80046a6:	4621      	mov	r1, r4
 80046a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ac:	4621      	mov	r1, r4
 80046ae:	008a      	lsls	r2, r1, #2
 80046b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046b4:	f7fb fde4 	bl	8000280 <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4b60      	ldr	r3, [pc, #384]	; (8004840 <UART_SetConfig+0x4e4>)
 80046be:	fba3 2302 	umull	r2, r3, r3, r2
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	011c      	lsls	r4, r3, #4
 80046c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	1891      	adds	r1, r2, r2
 80046de:	61b9      	str	r1, [r7, #24]
 80046e0:	415b      	adcs	r3, r3
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e8:	4641      	mov	r1, r8
 80046ea:	1851      	adds	r1, r2, r1
 80046ec:	6139      	str	r1, [r7, #16]
 80046ee:	4649      	mov	r1, r9
 80046f0:	414b      	adcs	r3, r1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004700:	4659      	mov	r1, fp
 8004702:	00cb      	lsls	r3, r1, #3
 8004704:	4651      	mov	r1, sl
 8004706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470a:	4651      	mov	r1, sl
 800470c:	00ca      	lsls	r2, r1, #3
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	4603      	mov	r3, r0
 8004714:	4642      	mov	r2, r8
 8004716:	189b      	adds	r3, r3, r2
 8004718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800471c:	464b      	mov	r3, r9
 800471e:	460a      	mov	r2, r1
 8004720:	eb42 0303 	adc.w	r3, r2, r3
 8004724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	67bb      	str	r3, [r7, #120]	; 0x78
 8004732:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004740:	4649      	mov	r1, r9
 8004742:	008b      	lsls	r3, r1, #2
 8004744:	4641      	mov	r1, r8
 8004746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474a:	4641      	mov	r1, r8
 800474c:	008a      	lsls	r2, r1, #2
 800474e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004752:	f7fb fd95 	bl	8000280 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4611      	mov	r1, r2
 800475c:	4b38      	ldr	r3, [pc, #224]	; (8004840 <UART_SetConfig+0x4e4>)
 800475e:	fba3 2301 	umull	r2, r3, r3, r1
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2264      	movs	r2, #100	; 0x64
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	1acb      	subs	r3, r1, r3
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	3332      	adds	r3, #50	; 0x32
 8004770:	4a33      	ldr	r2, [pc, #204]	; (8004840 <UART_SetConfig+0x4e4>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477c:	441c      	add	r4, r3
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	673b      	str	r3, [r7, #112]	; 0x70
 8004786:	677a      	str	r2, [r7, #116]	; 0x74
 8004788:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	1891      	adds	r1, r2, r2
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	415b      	adcs	r3, r3
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800479c:	4641      	mov	r1, r8
 800479e:	1851      	adds	r1, r2, r1
 80047a0:	6039      	str	r1, [r7, #0]
 80047a2:	4649      	mov	r1, r9
 80047a4:	414b      	adcs	r3, r1
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047b4:	4659      	mov	r1, fp
 80047b6:	00cb      	lsls	r3, r1, #3
 80047b8:	4651      	mov	r1, sl
 80047ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047be:	4651      	mov	r1, sl
 80047c0:	00ca      	lsls	r2, r1, #3
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	4642      	mov	r2, r8
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ce:	464b      	mov	r3, r9
 80047d0:	460a      	mov	r2, r1
 80047d2:	eb42 0303 	adc.w	r3, r2, r3
 80047d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	663b      	str	r3, [r7, #96]	; 0x60
 80047e2:	667a      	str	r2, [r7, #100]	; 0x64
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047f0:	4649      	mov	r1, r9
 80047f2:	008b      	lsls	r3, r1, #2
 80047f4:	4641      	mov	r1, r8
 80047f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047fa:	4641      	mov	r1, r8
 80047fc:	008a      	lsls	r2, r1, #2
 80047fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004802:	f7fb fd3d 	bl	8000280 <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <UART_SetConfig+0x4e4>)
 800480c:	fba3 1302 	umull	r1, r3, r3, r2
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	2164      	movs	r1, #100	; 0x64
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	3332      	adds	r3, #50	; 0x32
 800481e:	4a08      	ldr	r2, [pc, #32]	; (8004840 <UART_SetConfig+0x4e4>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	f003 020f 	and.w	r2, r3, #15
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4422      	add	r2, r4
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800483a:	46bd      	mov	sp, r7
 800483c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004840:	51eb851f 	.word	0x51eb851f

08004844 <std>:
 8004844:	2300      	movs	r3, #0
 8004846:	b510      	push	{r4, lr}
 8004848:	4604      	mov	r4, r0
 800484a:	e9c0 3300 	strd	r3, r3, [r0]
 800484e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004852:	6083      	str	r3, [r0, #8]
 8004854:	8181      	strh	r1, [r0, #12]
 8004856:	6643      	str	r3, [r0, #100]	; 0x64
 8004858:	81c2      	strh	r2, [r0, #14]
 800485a:	6183      	str	r3, [r0, #24]
 800485c:	4619      	mov	r1, r3
 800485e:	2208      	movs	r2, #8
 8004860:	305c      	adds	r0, #92	; 0x5c
 8004862:	f000 fac5 	bl	8004df0 <memset>
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <std+0x58>)
 8004868:	6263      	str	r3, [r4, #36]	; 0x24
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <std+0x5c>)
 800486c:	62a3      	str	r3, [r4, #40]	; 0x28
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <std+0x60>)
 8004870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <std+0x64>)
 8004874:	6323      	str	r3, [r4, #48]	; 0x30
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <std+0x68>)
 8004878:	6224      	str	r4, [r4, #32]
 800487a:	429c      	cmp	r4, r3
 800487c:	d006      	beq.n	800488c <std+0x48>
 800487e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004882:	4294      	cmp	r4, r2
 8004884:	d002      	beq.n	800488c <std+0x48>
 8004886:	33d0      	adds	r3, #208	; 0xd0
 8004888:	429c      	cmp	r4, r3
 800488a:	d105      	bne.n	8004898 <std+0x54>
 800488c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004894:	f000 bb24 	b.w	8004ee0 <__retarget_lock_init_recursive>
 8004898:	bd10      	pop	{r4, pc}
 800489a:	bf00      	nop
 800489c:	08004c41 	.word	0x08004c41
 80048a0:	08004c63 	.word	0x08004c63
 80048a4:	08004c9b 	.word	0x08004c9b
 80048a8:	08004cbf 	.word	0x08004cbf
 80048ac:	200001c8 	.word	0x200001c8

080048b0 <stdio_exit_handler>:
 80048b0:	4a02      	ldr	r2, [pc, #8]	; (80048bc <stdio_exit_handler+0xc>)
 80048b2:	4903      	ldr	r1, [pc, #12]	; (80048c0 <stdio_exit_handler+0x10>)
 80048b4:	4803      	ldr	r0, [pc, #12]	; (80048c4 <stdio_exit_handler+0x14>)
 80048b6:	f000 b869 	b.w	800498c <_fwalk_sglue>
 80048ba:	bf00      	nop
 80048bc:	2000000c 	.word	0x2000000c
 80048c0:	08005a4d 	.word	0x08005a4d
 80048c4:	20000018 	.word	0x20000018

080048c8 <cleanup_stdio>:
 80048c8:	6841      	ldr	r1, [r0, #4]
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <cleanup_stdio+0x34>)
 80048cc:	4299      	cmp	r1, r3
 80048ce:	b510      	push	{r4, lr}
 80048d0:	4604      	mov	r4, r0
 80048d2:	d001      	beq.n	80048d8 <cleanup_stdio+0x10>
 80048d4:	f001 f8ba 	bl	8005a4c <_fflush_r>
 80048d8:	68a1      	ldr	r1, [r4, #8]
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <cleanup_stdio+0x38>)
 80048dc:	4299      	cmp	r1, r3
 80048de:	d002      	beq.n	80048e6 <cleanup_stdio+0x1e>
 80048e0:	4620      	mov	r0, r4
 80048e2:	f001 f8b3 	bl	8005a4c <_fflush_r>
 80048e6:	68e1      	ldr	r1, [r4, #12]
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <cleanup_stdio+0x3c>)
 80048ea:	4299      	cmp	r1, r3
 80048ec:	d004      	beq.n	80048f8 <cleanup_stdio+0x30>
 80048ee:	4620      	mov	r0, r4
 80048f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f4:	f001 b8aa 	b.w	8005a4c <_fflush_r>
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	bf00      	nop
 80048fc:	200001c8 	.word	0x200001c8
 8004900:	20000230 	.word	0x20000230
 8004904:	20000298 	.word	0x20000298

08004908 <global_stdio_init.part.0>:
 8004908:	b510      	push	{r4, lr}
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <global_stdio_init.part.0+0x30>)
 800490c:	4c0b      	ldr	r4, [pc, #44]	; (800493c <global_stdio_init.part.0+0x34>)
 800490e:	4a0c      	ldr	r2, [pc, #48]	; (8004940 <global_stdio_init.part.0+0x38>)
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	4620      	mov	r0, r4
 8004914:	2200      	movs	r2, #0
 8004916:	2104      	movs	r1, #4
 8004918:	f7ff ff94 	bl	8004844 <std>
 800491c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004920:	2201      	movs	r2, #1
 8004922:	2109      	movs	r1, #9
 8004924:	f7ff ff8e 	bl	8004844 <std>
 8004928:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800492c:	2202      	movs	r2, #2
 800492e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004932:	2112      	movs	r1, #18
 8004934:	f7ff bf86 	b.w	8004844 <std>
 8004938:	20000300 	.word	0x20000300
 800493c:	200001c8 	.word	0x200001c8
 8004940:	080048b1 	.word	0x080048b1

08004944 <__sfp_lock_acquire>:
 8004944:	4801      	ldr	r0, [pc, #4]	; (800494c <__sfp_lock_acquire+0x8>)
 8004946:	f000 bacc 	b.w	8004ee2 <__retarget_lock_acquire_recursive>
 800494a:	bf00      	nop
 800494c:	20000309 	.word	0x20000309

08004950 <__sfp_lock_release>:
 8004950:	4801      	ldr	r0, [pc, #4]	; (8004958 <__sfp_lock_release+0x8>)
 8004952:	f000 bac7 	b.w	8004ee4 <__retarget_lock_release_recursive>
 8004956:	bf00      	nop
 8004958:	20000309 	.word	0x20000309

0800495c <__sinit>:
 800495c:	b510      	push	{r4, lr}
 800495e:	4604      	mov	r4, r0
 8004960:	f7ff fff0 	bl	8004944 <__sfp_lock_acquire>
 8004964:	6a23      	ldr	r3, [r4, #32]
 8004966:	b11b      	cbz	r3, 8004970 <__sinit+0x14>
 8004968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800496c:	f7ff bff0 	b.w	8004950 <__sfp_lock_release>
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <__sinit+0x28>)
 8004972:	6223      	str	r3, [r4, #32]
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <__sinit+0x2c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f5      	bne.n	8004968 <__sinit+0xc>
 800497c:	f7ff ffc4 	bl	8004908 <global_stdio_init.part.0>
 8004980:	e7f2      	b.n	8004968 <__sinit+0xc>
 8004982:	bf00      	nop
 8004984:	080048c9 	.word	0x080048c9
 8004988:	20000300 	.word	0x20000300

0800498c <_fwalk_sglue>:
 800498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004990:	4607      	mov	r7, r0
 8004992:	4688      	mov	r8, r1
 8004994:	4614      	mov	r4, r2
 8004996:	2600      	movs	r6, #0
 8004998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800499c:	f1b9 0901 	subs.w	r9, r9, #1
 80049a0:	d505      	bpl.n	80049ae <_fwalk_sglue+0x22>
 80049a2:	6824      	ldr	r4, [r4, #0]
 80049a4:	2c00      	cmp	r4, #0
 80049a6:	d1f7      	bne.n	8004998 <_fwalk_sglue+0xc>
 80049a8:	4630      	mov	r0, r6
 80049aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ae:	89ab      	ldrh	r3, [r5, #12]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d907      	bls.n	80049c4 <_fwalk_sglue+0x38>
 80049b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049b8:	3301      	adds	r3, #1
 80049ba:	d003      	beq.n	80049c4 <_fwalk_sglue+0x38>
 80049bc:	4629      	mov	r1, r5
 80049be:	4638      	mov	r0, r7
 80049c0:	47c0      	blx	r8
 80049c2:	4306      	orrs	r6, r0
 80049c4:	3568      	adds	r5, #104	; 0x68
 80049c6:	e7e9      	b.n	800499c <_fwalk_sglue+0x10>

080049c8 <iprintf>:
 80049c8:	b40f      	push	{r0, r1, r2, r3}
 80049ca:	b507      	push	{r0, r1, r2, lr}
 80049cc:	4906      	ldr	r1, [pc, #24]	; (80049e8 <iprintf+0x20>)
 80049ce:	ab04      	add	r3, sp, #16
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d6:	6881      	ldr	r1, [r0, #8]
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	f000 fd07 	bl	80053ec <_vfiprintf_r>
 80049de:	b003      	add	sp, #12
 80049e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049e4:	b004      	add	sp, #16
 80049e6:	4770      	bx	lr
 80049e8:	20000064 	.word	0x20000064

080049ec <_puts_r>:
 80049ec:	6a03      	ldr	r3, [r0, #32]
 80049ee:	b570      	push	{r4, r5, r6, lr}
 80049f0:	6884      	ldr	r4, [r0, #8]
 80049f2:	4605      	mov	r5, r0
 80049f4:	460e      	mov	r6, r1
 80049f6:	b90b      	cbnz	r3, 80049fc <_puts_r+0x10>
 80049f8:	f7ff ffb0 	bl	800495c <__sinit>
 80049fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049fe:	07db      	lsls	r3, r3, #31
 8004a00:	d405      	bmi.n	8004a0e <_puts_r+0x22>
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	0598      	lsls	r0, r3, #22
 8004a06:	d402      	bmi.n	8004a0e <_puts_r+0x22>
 8004a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0a:	f000 fa6a 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	0719      	lsls	r1, r3, #28
 8004a12:	d513      	bpl.n	8004a3c <_puts_r+0x50>
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	b18b      	cbz	r3, 8004a3c <_puts_r+0x50>
 8004a18:	3e01      	subs	r6, #1
 8004a1a:	68a3      	ldr	r3, [r4, #8]
 8004a1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a20:	3b01      	subs	r3, #1
 8004a22:	60a3      	str	r3, [r4, #8]
 8004a24:	b9e9      	cbnz	r1, 8004a62 <_puts_r+0x76>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da2e      	bge.n	8004a88 <_puts_r+0x9c>
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	210a      	movs	r1, #10
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f949 	bl	8004cc6 <__swbuf_r>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d007      	beq.n	8004a48 <_puts_r+0x5c>
 8004a38:	250a      	movs	r5, #10
 8004a3a:	e007      	b.n	8004a4c <_puts_r+0x60>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 f97e 	bl	8004d40 <__swsetup_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d0e7      	beq.n	8004a18 <_puts_r+0x2c>
 8004a48:	f04f 35ff 	mov.w	r5, #4294967295
 8004a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a4e:	07da      	lsls	r2, r3, #31
 8004a50:	d405      	bmi.n	8004a5e <_puts_r+0x72>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	059b      	lsls	r3, r3, #22
 8004a56:	d402      	bmi.n	8004a5e <_puts_r+0x72>
 8004a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a5a:	f000 fa43 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004a5e:	4628      	mov	r0, r5
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da04      	bge.n	8004a70 <_puts_r+0x84>
 8004a66:	69a2      	ldr	r2, [r4, #24]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	dc06      	bgt.n	8004a7a <_puts_r+0x8e>
 8004a6c:	290a      	cmp	r1, #10
 8004a6e:	d004      	beq.n	8004a7a <_puts_r+0x8e>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	6022      	str	r2, [r4, #0]
 8004a76:	7019      	strb	r1, [r3, #0]
 8004a78:	e7cf      	b.n	8004a1a <_puts_r+0x2e>
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 f922 	bl	8004cc6 <__swbuf_r>
 8004a82:	3001      	adds	r0, #1
 8004a84:	d1c9      	bne.n	8004a1a <_puts_r+0x2e>
 8004a86:	e7df      	b.n	8004a48 <_puts_r+0x5c>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	250a      	movs	r5, #10
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	6022      	str	r2, [r4, #0]
 8004a90:	701d      	strb	r5, [r3, #0]
 8004a92:	e7db      	b.n	8004a4c <_puts_r+0x60>

08004a94 <puts>:
 8004a94:	4b02      	ldr	r3, [pc, #8]	; (8004aa0 <puts+0xc>)
 8004a96:	4601      	mov	r1, r0
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	f7ff bfa7 	b.w	80049ec <_puts_r>
 8004a9e:	bf00      	nop
 8004aa0:	20000064 	.word	0x20000064

08004aa4 <setvbuf>:
 8004aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	461d      	mov	r5, r3
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <setvbuf+0x158>)
 8004aac:	681f      	ldr	r7, [r3, #0]
 8004aae:	4604      	mov	r4, r0
 8004ab0:	460e      	mov	r6, r1
 8004ab2:	4690      	mov	r8, r2
 8004ab4:	b127      	cbz	r7, 8004ac0 <setvbuf+0x1c>
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	b913      	cbnz	r3, 8004ac0 <setvbuf+0x1c>
 8004aba:	4638      	mov	r0, r7
 8004abc:	f7ff ff4e 	bl	800495c <__sinit>
 8004ac0:	f1b8 0f02 	cmp.w	r8, #2
 8004ac4:	d006      	beq.n	8004ad4 <setvbuf+0x30>
 8004ac6:	f1b8 0f01 	cmp.w	r8, #1
 8004aca:	f200 8094 	bhi.w	8004bf6 <setvbuf+0x152>
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	f2c0 8091 	blt.w	8004bf6 <setvbuf+0x152>
 8004ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ad6:	07da      	lsls	r2, r3, #31
 8004ad8:	d405      	bmi.n	8004ae6 <setvbuf+0x42>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	059b      	lsls	r3, r3, #22
 8004ade:	d402      	bmi.n	8004ae6 <setvbuf+0x42>
 8004ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ae2:	f000 f9fe 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f000 ffaf 	bl	8005a4c <_fflush_r>
 8004aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af0:	b141      	cbz	r1, 8004b04 <setvbuf+0x60>
 8004af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af6:	4299      	cmp	r1, r3
 8004af8:	d002      	beq.n	8004b00 <setvbuf+0x5c>
 8004afa:	4638      	mov	r0, r7
 8004afc:	f000 f9f4 	bl	8004ee8 <_free_r>
 8004b00:	2300      	movs	r3, #0
 8004b02:	6363      	str	r3, [r4, #52]	; 0x34
 8004b04:	2300      	movs	r3, #0
 8004b06:	61a3      	str	r3, [r4, #24]
 8004b08:	6063      	str	r3, [r4, #4]
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	0618      	lsls	r0, r3, #24
 8004b0e:	d503      	bpl.n	8004b18 <setvbuf+0x74>
 8004b10:	6921      	ldr	r1, [r4, #16]
 8004b12:	4638      	mov	r0, r7
 8004b14:	f000 f9e8 	bl	8004ee8 <_free_r>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	f1b8 0f02 	cmp.w	r8, #2
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	d05f      	beq.n	8004bea <setvbuf+0x146>
 8004b2a:	ab01      	add	r3, sp, #4
 8004b2c:	466a      	mov	r2, sp
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4638      	mov	r0, r7
 8004b32:	f000 ffb3 	bl	8005a9c <__swhatbuf_r>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	4318      	orrs	r0, r3
 8004b3a:	81a0      	strh	r0, [r4, #12]
 8004b3c:	bb2d      	cbnz	r5, 8004b8a <setvbuf+0xe6>
 8004b3e:	9d00      	ldr	r5, [sp, #0]
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 fa1d 	bl	8004f80 <malloc>
 8004b46:	4606      	mov	r6, r0
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d150      	bne.n	8004bee <setvbuf+0x14a>
 8004b4c:	f8dd 9000 	ldr.w	r9, [sp]
 8004b50:	45a9      	cmp	r9, r5
 8004b52:	d13e      	bne.n	8004bd2 <setvbuf+0x12e>
 8004b54:	f04f 35ff 	mov.w	r5, #4294967295
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60a2      	str	r2, [r4, #8]
 8004b5c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004b60:	6022      	str	r2, [r4, #0]
 8004b62:	6122      	str	r2, [r4, #16]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b6a:	6162      	str	r2, [r4, #20]
 8004b6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	07d1      	lsls	r1, r2, #31
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	d404      	bmi.n	8004b82 <setvbuf+0xde>
 8004b78:	059b      	lsls	r3, r3, #22
 8004b7a:	d402      	bmi.n	8004b82 <setvbuf+0xde>
 8004b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7e:	f000 f9b1 	bl	8004ee4 <__retarget_lock_release_recursive>
 8004b82:	4628      	mov	r0, r5
 8004b84:	b003      	add	sp, #12
 8004b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	d0d8      	beq.n	8004b40 <setvbuf+0x9c>
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	b913      	cbnz	r3, 8004b98 <setvbuf+0xf4>
 8004b92:	4638      	mov	r0, r7
 8004b94:	f7ff fee2 	bl	800495c <__sinit>
 8004b98:	f1b8 0f01 	cmp.w	r8, #1
 8004b9c:	bf08      	it	eq
 8004b9e:	89a3      	ldrheq	r3, [r4, #12]
 8004ba0:	6026      	str	r6, [r4, #0]
 8004ba2:	bf04      	itt	eq
 8004ba4:	f043 0301 	orreq.w	r3, r3, #1
 8004ba8:	81a3      	strheq	r3, [r4, #12]
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f013 0208 	ands.w	r2, r3, #8
 8004bb0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004bb4:	d01d      	beq.n	8004bf2 <setvbuf+0x14e>
 8004bb6:	07da      	lsls	r2, r3, #31
 8004bb8:	bf41      	itttt	mi
 8004bba:	2200      	movmi	r2, #0
 8004bbc:	426d      	negmi	r5, r5
 8004bbe:	60a2      	strmi	r2, [r4, #8]
 8004bc0:	61a5      	strmi	r5, [r4, #24]
 8004bc2:	bf58      	it	pl
 8004bc4:	60a5      	strpl	r5, [r4, #8]
 8004bc6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004bc8:	f015 0501 	ands.w	r5, r5, #1
 8004bcc:	d0d4      	beq.n	8004b78 <setvbuf+0xd4>
 8004bce:	2500      	movs	r5, #0
 8004bd0:	e7d7      	b.n	8004b82 <setvbuf+0xde>
 8004bd2:	4648      	mov	r0, r9
 8004bd4:	f000 f9d4 	bl	8004f80 <malloc>
 8004bd8:	4606      	mov	r6, r0
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d0ba      	beq.n	8004b54 <setvbuf+0xb0>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	464d      	mov	r5, r9
 8004be8:	e7d1      	b.n	8004b8e <setvbuf+0xea>
 8004bea:	2500      	movs	r5, #0
 8004bec:	e7b4      	b.n	8004b58 <setvbuf+0xb4>
 8004bee:	46a9      	mov	r9, r5
 8004bf0:	e7f5      	b.n	8004bde <setvbuf+0x13a>
 8004bf2:	60a2      	str	r2, [r4, #8]
 8004bf4:	e7e7      	b.n	8004bc6 <setvbuf+0x122>
 8004bf6:	f04f 35ff 	mov.w	r5, #4294967295
 8004bfa:	e7c2      	b.n	8004b82 <setvbuf+0xde>
 8004bfc:	20000064 	.word	0x20000064

08004c00 <siprintf>:
 8004c00:	b40e      	push	{r1, r2, r3}
 8004c02:	b500      	push	{lr}
 8004c04:	b09c      	sub	sp, #112	; 0x70
 8004c06:	ab1d      	add	r3, sp, #116	; 0x74
 8004c08:	9002      	str	r0, [sp, #8]
 8004c0a:	9006      	str	r0, [sp, #24]
 8004c0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c10:	4809      	ldr	r0, [pc, #36]	; (8004c38 <siprintf+0x38>)
 8004c12:	9107      	str	r1, [sp, #28]
 8004c14:	9104      	str	r1, [sp, #16]
 8004c16:	4909      	ldr	r1, [pc, #36]	; (8004c3c <siprintf+0x3c>)
 8004c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c1c:	9105      	str	r1, [sp, #20]
 8004c1e:	6800      	ldr	r0, [r0, #0]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	a902      	add	r1, sp, #8
 8004c24:	f000 faba 	bl	800519c <_svfiprintf_r>
 8004c28:	9b02      	ldr	r3, [sp, #8]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	b01c      	add	sp, #112	; 0x70
 8004c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c34:	b003      	add	sp, #12
 8004c36:	4770      	bx	lr
 8004c38:	20000064 	.word	0x20000064
 8004c3c:	ffff0208 	.word	0xffff0208

08004c40 <__sread>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	460c      	mov	r4, r1
 8004c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c48:	f000 f8fc 	bl	8004e44 <_read_r>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	bfab      	itete	ge
 8004c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c52:	89a3      	ldrhlt	r3, [r4, #12]
 8004c54:	181b      	addge	r3, r3, r0
 8004c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c5a:	bfac      	ite	ge
 8004c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c5e:	81a3      	strhlt	r3, [r4, #12]
 8004c60:	bd10      	pop	{r4, pc}

08004c62 <__swrite>:
 8004c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c66:	461f      	mov	r7, r3
 8004c68:	898b      	ldrh	r3, [r1, #12]
 8004c6a:	05db      	lsls	r3, r3, #23
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	4616      	mov	r6, r2
 8004c72:	d505      	bpl.n	8004c80 <__swrite+0x1e>
 8004c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c78:	2302      	movs	r3, #2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f000 f8d0 	bl	8004e20 <_lseek_r>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	463b      	mov	r3, r7
 8004c90:	4628      	mov	r0, r5
 8004c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	f000 b8e7 	b.w	8004e68 <_write_r>

08004c9a <__sseek>:
 8004c9a:	b510      	push	{r4, lr}
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca2:	f000 f8bd 	bl	8004e20 <_lseek_r>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	bf15      	itete	ne
 8004cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cb6:	81a3      	strheq	r3, [r4, #12]
 8004cb8:	bf18      	it	ne
 8004cba:	81a3      	strhne	r3, [r4, #12]
 8004cbc:	bd10      	pop	{r4, pc}

08004cbe <__sclose>:
 8004cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc2:	f000 b89d 	b.w	8004e00 <_close_r>

08004cc6 <__swbuf_r>:
 8004cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc8:	460e      	mov	r6, r1
 8004cca:	4614      	mov	r4, r2
 8004ccc:	4605      	mov	r5, r0
 8004cce:	b118      	cbz	r0, 8004cd8 <__swbuf_r+0x12>
 8004cd0:	6a03      	ldr	r3, [r0, #32]
 8004cd2:	b90b      	cbnz	r3, 8004cd8 <__swbuf_r+0x12>
 8004cd4:	f7ff fe42 	bl	800495c <__sinit>
 8004cd8:	69a3      	ldr	r3, [r4, #24]
 8004cda:	60a3      	str	r3, [r4, #8]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	071a      	lsls	r2, r3, #28
 8004ce0:	d525      	bpl.n	8004d2e <__swbuf_r+0x68>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	b31b      	cbz	r3, 8004d2e <__swbuf_r+0x68>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	6922      	ldr	r2, [r4, #16]
 8004cea:	1a98      	subs	r0, r3, r2
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	b2f6      	uxtb	r6, r6
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	4637      	mov	r7, r6
 8004cf4:	dc04      	bgt.n	8004d00 <__swbuf_r+0x3a>
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f000 fea7 	bl	8005a4c <_fflush_r>
 8004cfe:	b9e0      	cbnz	r0, 8004d3a <__swbuf_r+0x74>
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	60a3      	str	r3, [r4, #8]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	701e      	strb	r6, [r3, #0]
 8004d0e:	6962      	ldr	r2, [r4, #20]
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d004      	beq.n	8004d20 <__swbuf_r+0x5a>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	07db      	lsls	r3, r3, #31
 8004d1a:	d506      	bpl.n	8004d2a <__swbuf_r+0x64>
 8004d1c:	2e0a      	cmp	r6, #10
 8004d1e:	d104      	bne.n	8004d2a <__swbuf_r+0x64>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fe92 	bl	8005a4c <_fflush_r>
 8004d28:	b938      	cbnz	r0, 8004d3a <__swbuf_r+0x74>
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 f805 	bl	8004d40 <__swsetup_r>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d0d5      	beq.n	8004ce6 <__swbuf_r+0x20>
 8004d3a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d3e:	e7f4      	b.n	8004d2a <__swbuf_r+0x64>

08004d40 <__swsetup_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <__swsetup_r+0xac>)
 8004d44:	4605      	mov	r5, r0
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	460c      	mov	r4, r1
 8004d4a:	b118      	cbz	r0, 8004d54 <__swsetup_r+0x14>
 8004d4c:	6a03      	ldr	r3, [r0, #32]
 8004d4e:	b90b      	cbnz	r3, 8004d54 <__swsetup_r+0x14>
 8004d50:	f7ff fe04 	bl	800495c <__sinit>
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d5a:	0718      	lsls	r0, r3, #28
 8004d5c:	d422      	bmi.n	8004da4 <__swsetup_r+0x64>
 8004d5e:	06d9      	lsls	r1, r3, #27
 8004d60:	d407      	bmi.n	8004d72 <__swsetup_r+0x32>
 8004d62:	2309      	movs	r3, #9
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	e034      	b.n	8004ddc <__swsetup_r+0x9c>
 8004d72:	0758      	lsls	r0, r3, #29
 8004d74:	d512      	bpl.n	8004d9c <__swsetup_r+0x5c>
 8004d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d78:	b141      	cbz	r1, 8004d8c <__swsetup_r+0x4c>
 8004d7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d7e:	4299      	cmp	r1, r3
 8004d80:	d002      	beq.n	8004d88 <__swsetup_r+0x48>
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f8b0 	bl	8004ee8 <_free_r>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6363      	str	r3, [r4, #52]	; 0x34
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	2300      	movs	r3, #0
 8004d96:	6063      	str	r3, [r4, #4]
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	f043 0308 	orr.w	r3, r3, #8
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	b94b      	cbnz	r3, 8004dbc <__swsetup_r+0x7c>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db2:	d003      	beq.n	8004dbc <__swsetup_r+0x7c>
 8004db4:	4621      	mov	r1, r4
 8004db6:	4628      	mov	r0, r5
 8004db8:	f000 fe96 	bl	8005ae8 <__smakebuf_r>
 8004dbc:	89a0      	ldrh	r0, [r4, #12]
 8004dbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dc2:	f010 0301 	ands.w	r3, r0, #1
 8004dc6:	d00a      	beq.n	8004dde <__swsetup_r+0x9e>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60a3      	str	r3, [r4, #8]
 8004dcc:	6963      	ldr	r3, [r4, #20]
 8004dce:	425b      	negs	r3, r3
 8004dd0:	61a3      	str	r3, [r4, #24]
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	b943      	cbnz	r3, 8004de8 <__swsetup_r+0xa8>
 8004dd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004dda:	d1c4      	bne.n	8004d66 <__swsetup_r+0x26>
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	0781      	lsls	r1, r0, #30
 8004de0:	bf58      	it	pl
 8004de2:	6963      	ldrpl	r3, [r4, #20]
 8004de4:	60a3      	str	r3, [r4, #8]
 8004de6:	e7f4      	b.n	8004dd2 <__swsetup_r+0x92>
 8004de8:	2000      	movs	r0, #0
 8004dea:	e7f7      	b.n	8004ddc <__swsetup_r+0x9c>
 8004dec:	20000064 	.word	0x20000064

08004df0 <memset>:
 8004df0:	4402      	add	r2, r0
 8004df2:	4603      	mov	r3, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <_close_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d06      	ldr	r5, [pc, #24]	; (8004e1c <_close_r+0x1c>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fc f969 	bl	80010e2 <_close>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_close_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_close_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000304 	.word	0x20000304

08004e20 <_lseek_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d07      	ldr	r5, [pc, #28]	; (8004e40 <_lseek_r+0x20>)
 8004e24:	4604      	mov	r4, r0
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fc f97e 	bl	8001130 <_lseek>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_lseek_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_lseek_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000304 	.word	0x20000304

08004e44 <_read_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	; (8004e64 <_read_r+0x20>)
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fc f90c 	bl	8001070 <_read>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_read_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_read_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000304 	.word	0x20000304

08004e68 <_write_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d07      	ldr	r5, [pc, #28]	; (8004e88 <_write_r+0x20>)
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	4608      	mov	r0, r1
 8004e70:	4611      	mov	r1, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	602a      	str	r2, [r5, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f7fc f917 	bl	80010aa <_write>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_write_r+0x1e>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_write_r+0x1e>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	20000304 	.word	0x20000304

08004e8c <__errno>:
 8004e8c:	4b01      	ldr	r3, [pc, #4]	; (8004e94 <__errno+0x8>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000064 	.word	0x20000064

08004e98 <__libc_init_array>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	4d0d      	ldr	r5, [pc, #52]	; (8004ed0 <__libc_init_array+0x38>)
 8004e9c:	4c0d      	ldr	r4, [pc, #52]	; (8004ed4 <__libc_init_array+0x3c>)
 8004e9e:	1b64      	subs	r4, r4, r5
 8004ea0:	10a4      	asrs	r4, r4, #2
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	42a6      	cmp	r6, r4
 8004ea6:	d109      	bne.n	8004ebc <__libc_init_array+0x24>
 8004ea8:	4d0b      	ldr	r5, [pc, #44]	; (8004ed8 <__libc_init_array+0x40>)
 8004eaa:	4c0c      	ldr	r4, [pc, #48]	; (8004edc <__libc_init_array+0x44>)
 8004eac:	f000 feea 	bl	8005c84 <_init>
 8004eb0:	1b64      	subs	r4, r4, r5
 8004eb2:	10a4      	asrs	r4, r4, #2
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	42a6      	cmp	r6, r4
 8004eb8:	d105      	bne.n	8004ec6 <__libc_init_array+0x2e>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec0:	4798      	blx	r3
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7ee      	b.n	8004ea4 <__libc_init_array+0xc>
 8004ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eca:	4798      	blx	r3
 8004ecc:	3601      	adds	r6, #1
 8004ece:	e7f2      	b.n	8004eb6 <__libc_init_array+0x1e>
 8004ed0:	08005d90 	.word	0x08005d90
 8004ed4:	08005d90 	.word	0x08005d90
 8004ed8:	08005d90 	.word	0x08005d90
 8004edc:	08005d94 	.word	0x08005d94

08004ee0 <__retarget_lock_init_recursive>:
 8004ee0:	4770      	bx	lr

08004ee2 <__retarget_lock_acquire_recursive>:
 8004ee2:	4770      	bx	lr

08004ee4 <__retarget_lock_release_recursive>:
 8004ee4:	4770      	bx	lr
	...

08004ee8 <_free_r>:
 8004ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eea:	2900      	cmp	r1, #0
 8004eec:	d044      	beq.n	8004f78 <_free_r+0x90>
 8004eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef2:	9001      	str	r0, [sp, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8004efa:	bfb8      	it	lt
 8004efc:	18e4      	addlt	r4, r4, r3
 8004efe:	f000 f8e7 	bl	80050d0 <__malloc_lock>
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <_free_r+0x94>)
 8004f04:	9801      	ldr	r0, [sp, #4]
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	b933      	cbnz	r3, 8004f18 <_free_r+0x30>
 8004f0a:	6063      	str	r3, [r4, #4]
 8004f0c:	6014      	str	r4, [r2, #0]
 8004f0e:	b003      	add	sp, #12
 8004f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f14:	f000 b8e2 	b.w	80050dc <__malloc_unlock>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d908      	bls.n	8004f2e <_free_r+0x46>
 8004f1c:	6825      	ldr	r5, [r4, #0]
 8004f1e:	1961      	adds	r1, r4, r5
 8004f20:	428b      	cmp	r3, r1
 8004f22:	bf01      	itttt	eq
 8004f24:	6819      	ldreq	r1, [r3, #0]
 8004f26:	685b      	ldreq	r3, [r3, #4]
 8004f28:	1949      	addeq	r1, r1, r5
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	e7ed      	b.n	8004f0a <_free_r+0x22>
 8004f2e:	461a      	mov	r2, r3
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	b10b      	cbz	r3, 8004f38 <_free_r+0x50>
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d9fa      	bls.n	8004f2e <_free_r+0x46>
 8004f38:	6811      	ldr	r1, [r2, #0]
 8004f3a:	1855      	adds	r5, r2, r1
 8004f3c:	42a5      	cmp	r5, r4
 8004f3e:	d10b      	bne.n	8004f58 <_free_r+0x70>
 8004f40:	6824      	ldr	r4, [r4, #0]
 8004f42:	4421      	add	r1, r4
 8004f44:	1854      	adds	r4, r2, r1
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	6011      	str	r1, [r2, #0]
 8004f4a:	d1e0      	bne.n	8004f0e <_free_r+0x26>
 8004f4c:	681c      	ldr	r4, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	6053      	str	r3, [r2, #4]
 8004f52:	440c      	add	r4, r1
 8004f54:	6014      	str	r4, [r2, #0]
 8004f56:	e7da      	b.n	8004f0e <_free_r+0x26>
 8004f58:	d902      	bls.n	8004f60 <_free_r+0x78>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	6003      	str	r3, [r0, #0]
 8004f5e:	e7d6      	b.n	8004f0e <_free_r+0x26>
 8004f60:	6825      	ldr	r5, [r4, #0]
 8004f62:	1961      	adds	r1, r4, r5
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf04      	itt	eq
 8004f68:	6819      	ldreq	r1, [r3, #0]
 8004f6a:	685b      	ldreq	r3, [r3, #4]
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	bf04      	itt	eq
 8004f70:	1949      	addeq	r1, r1, r5
 8004f72:	6021      	streq	r1, [r4, #0]
 8004f74:	6054      	str	r4, [r2, #4]
 8004f76:	e7ca      	b.n	8004f0e <_free_r+0x26>
 8004f78:	b003      	add	sp, #12
 8004f7a:	bd30      	pop	{r4, r5, pc}
 8004f7c:	2000030c 	.word	0x2000030c

08004f80 <malloc>:
 8004f80:	4b02      	ldr	r3, [pc, #8]	; (8004f8c <malloc+0xc>)
 8004f82:	4601      	mov	r1, r0
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	f000 b823 	b.w	8004fd0 <_malloc_r>
 8004f8a:	bf00      	nop
 8004f8c:	20000064 	.word	0x20000064

08004f90 <sbrk_aligned>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	4e0e      	ldr	r6, [pc, #56]	; (8004fcc <sbrk_aligned+0x3c>)
 8004f94:	460c      	mov	r4, r1
 8004f96:	6831      	ldr	r1, [r6, #0]
 8004f98:	4605      	mov	r5, r0
 8004f9a:	b911      	cbnz	r1, 8004fa2 <sbrk_aligned+0x12>
 8004f9c:	f000 fe1c 	bl	8005bd8 <_sbrk_r>
 8004fa0:	6030      	str	r0, [r6, #0]
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f000 fe17 	bl	8005bd8 <_sbrk_r>
 8004faa:	1c43      	adds	r3, r0, #1
 8004fac:	d00a      	beq.n	8004fc4 <sbrk_aligned+0x34>
 8004fae:	1cc4      	adds	r4, r0, #3
 8004fb0:	f024 0403 	bic.w	r4, r4, #3
 8004fb4:	42a0      	cmp	r0, r4
 8004fb6:	d007      	beq.n	8004fc8 <sbrk_aligned+0x38>
 8004fb8:	1a21      	subs	r1, r4, r0
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 fe0c 	bl	8005bd8 <_sbrk_r>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d101      	bne.n	8004fc8 <sbrk_aligned+0x38>
 8004fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	20000310 	.word	0x20000310

08004fd0 <_malloc_r>:
 8004fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	1ccd      	adds	r5, r1, #3
 8004fd6:	f025 0503 	bic.w	r5, r5, #3
 8004fda:	3508      	adds	r5, #8
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	bf38      	it	cc
 8004fe0:	250c      	movcc	r5, #12
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	db01      	blt.n	8004fec <_malloc_r+0x1c>
 8004fe8:	42a9      	cmp	r1, r5
 8004fea:	d905      	bls.n	8004ff8 <_malloc_r+0x28>
 8004fec:	230c      	movs	r3, #12
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050cc <_malloc_r+0xfc>
 8004ffc:	f000 f868 	bl	80050d0 <__malloc_lock>
 8005000:	f8d8 3000 	ldr.w	r3, [r8]
 8005004:	461c      	mov	r4, r3
 8005006:	bb5c      	cbnz	r4, 8005060 <_malloc_r+0x90>
 8005008:	4629      	mov	r1, r5
 800500a:	4638      	mov	r0, r7
 800500c:	f7ff ffc0 	bl	8004f90 <sbrk_aligned>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	4604      	mov	r4, r0
 8005014:	d155      	bne.n	80050c2 <_malloc_r+0xf2>
 8005016:	f8d8 4000 	ldr.w	r4, [r8]
 800501a:	4626      	mov	r6, r4
 800501c:	2e00      	cmp	r6, #0
 800501e:	d145      	bne.n	80050ac <_malloc_r+0xdc>
 8005020:	2c00      	cmp	r4, #0
 8005022:	d048      	beq.n	80050b6 <_malloc_r+0xe6>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	4631      	mov	r1, r6
 8005028:	4638      	mov	r0, r7
 800502a:	eb04 0903 	add.w	r9, r4, r3
 800502e:	f000 fdd3 	bl	8005bd8 <_sbrk_r>
 8005032:	4581      	cmp	r9, r0
 8005034:	d13f      	bne.n	80050b6 <_malloc_r+0xe6>
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	1a6d      	subs	r5, r5, r1
 800503a:	4629      	mov	r1, r5
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff ffa7 	bl	8004f90 <sbrk_aligned>
 8005042:	3001      	adds	r0, #1
 8005044:	d037      	beq.n	80050b6 <_malloc_r+0xe6>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	442b      	add	r3, r5
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	f8d8 3000 	ldr.w	r3, [r8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d038      	beq.n	80050c6 <_malloc_r+0xf6>
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	42a2      	cmp	r2, r4
 8005058:	d12b      	bne.n	80050b2 <_malloc_r+0xe2>
 800505a:	2200      	movs	r2, #0
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	e00f      	b.n	8005080 <_malloc_r+0xb0>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	1b52      	subs	r2, r2, r5
 8005064:	d41f      	bmi.n	80050a6 <_malloc_r+0xd6>
 8005066:	2a0b      	cmp	r2, #11
 8005068:	d917      	bls.n	800509a <_malloc_r+0xca>
 800506a:	1961      	adds	r1, r4, r5
 800506c:	42a3      	cmp	r3, r4
 800506e:	6025      	str	r5, [r4, #0]
 8005070:	bf18      	it	ne
 8005072:	6059      	strne	r1, [r3, #4]
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	bf08      	it	eq
 8005078:	f8c8 1000 	streq.w	r1, [r8]
 800507c:	5162      	str	r2, [r4, r5]
 800507e:	604b      	str	r3, [r1, #4]
 8005080:	4638      	mov	r0, r7
 8005082:	f104 060b 	add.w	r6, r4, #11
 8005086:	f000 f829 	bl	80050dc <__malloc_unlock>
 800508a:	f026 0607 	bic.w	r6, r6, #7
 800508e:	1d23      	adds	r3, r4, #4
 8005090:	1af2      	subs	r2, r6, r3
 8005092:	d0ae      	beq.n	8004ff2 <_malloc_r+0x22>
 8005094:	1b9b      	subs	r3, r3, r6
 8005096:	50a3      	str	r3, [r4, r2]
 8005098:	e7ab      	b.n	8004ff2 <_malloc_r+0x22>
 800509a:	42a3      	cmp	r3, r4
 800509c:	6862      	ldr	r2, [r4, #4]
 800509e:	d1dd      	bne.n	800505c <_malloc_r+0x8c>
 80050a0:	f8c8 2000 	str.w	r2, [r8]
 80050a4:	e7ec      	b.n	8005080 <_malloc_r+0xb0>
 80050a6:	4623      	mov	r3, r4
 80050a8:	6864      	ldr	r4, [r4, #4]
 80050aa:	e7ac      	b.n	8005006 <_malloc_r+0x36>
 80050ac:	4634      	mov	r4, r6
 80050ae:	6876      	ldr	r6, [r6, #4]
 80050b0:	e7b4      	b.n	800501c <_malloc_r+0x4c>
 80050b2:	4613      	mov	r3, r2
 80050b4:	e7cc      	b.n	8005050 <_malloc_r+0x80>
 80050b6:	230c      	movs	r3, #12
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4638      	mov	r0, r7
 80050bc:	f000 f80e 	bl	80050dc <__malloc_unlock>
 80050c0:	e797      	b.n	8004ff2 <_malloc_r+0x22>
 80050c2:	6025      	str	r5, [r4, #0]
 80050c4:	e7dc      	b.n	8005080 <_malloc_r+0xb0>
 80050c6:	605b      	str	r3, [r3, #4]
 80050c8:	deff      	udf	#255	; 0xff
 80050ca:	bf00      	nop
 80050cc:	2000030c 	.word	0x2000030c

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__malloc_lock+0x8>)
 80050d2:	f7ff bf06 	b.w	8004ee2 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000308 	.word	0x20000308

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__malloc_unlock+0x8>)
 80050de:	f7ff bf01 	b.w	8004ee4 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000308 	.word	0x20000308

080050e8 <__ssputs_r>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	688e      	ldr	r6, [r1, #8]
 80050ee:	461f      	mov	r7, r3
 80050f0:	42be      	cmp	r6, r7
 80050f2:	680b      	ldr	r3, [r1, #0]
 80050f4:	4682      	mov	sl, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	4690      	mov	r8, r2
 80050fa:	d82c      	bhi.n	8005156 <__ssputs_r+0x6e>
 80050fc:	898a      	ldrh	r2, [r1, #12]
 80050fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005102:	d026      	beq.n	8005152 <__ssputs_r+0x6a>
 8005104:	6965      	ldr	r5, [r4, #20]
 8005106:	6909      	ldr	r1, [r1, #16]
 8005108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800510c:	eba3 0901 	sub.w	r9, r3, r1
 8005110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005114:	1c7b      	adds	r3, r7, #1
 8005116:	444b      	add	r3, r9
 8005118:	106d      	asrs	r5, r5, #1
 800511a:	429d      	cmp	r5, r3
 800511c:	bf38      	it	cc
 800511e:	461d      	movcc	r5, r3
 8005120:	0553      	lsls	r3, r2, #21
 8005122:	d527      	bpl.n	8005174 <__ssputs_r+0x8c>
 8005124:	4629      	mov	r1, r5
 8005126:	f7ff ff53 	bl	8004fd0 <_malloc_r>
 800512a:	4606      	mov	r6, r0
 800512c:	b360      	cbz	r0, 8005188 <__ssputs_r+0xa0>
 800512e:	6921      	ldr	r1, [r4, #16]
 8005130:	464a      	mov	r2, r9
 8005132:	f000 fd61 	bl	8005bf8 <memcpy>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	6126      	str	r6, [r4, #16]
 8005144:	6165      	str	r5, [r4, #20]
 8005146:	444e      	add	r6, r9
 8005148:	eba5 0509 	sub.w	r5, r5, r9
 800514c:	6026      	str	r6, [r4, #0]
 800514e:	60a5      	str	r5, [r4, #8]
 8005150:	463e      	mov	r6, r7
 8005152:	42be      	cmp	r6, r7
 8005154:	d900      	bls.n	8005158 <__ssputs_r+0x70>
 8005156:	463e      	mov	r6, r7
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	4632      	mov	r2, r6
 800515c:	4641      	mov	r1, r8
 800515e:	f000 fcff 	bl	8005b60 <memmove>
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	1b9b      	subs	r3, r3, r6
 8005166:	60a3      	str	r3, [r4, #8]
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	4433      	add	r3, r6
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	2000      	movs	r0, #0
 8005170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005174:	462a      	mov	r2, r5
 8005176:	f000 fd4d 	bl	8005c14 <_realloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d1e0      	bne.n	8005142 <__ssputs_r+0x5a>
 8005180:	6921      	ldr	r1, [r4, #16]
 8005182:	4650      	mov	r0, sl
 8005184:	f7ff feb0 	bl	8004ee8 <_free_r>
 8005188:	230c      	movs	r3, #12
 800518a:	f8ca 3000 	str.w	r3, [sl]
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	f04f 30ff 	mov.w	r0, #4294967295
 800519a:	e7e9      	b.n	8005170 <__ssputs_r+0x88>

0800519c <_svfiprintf_r>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	4698      	mov	r8, r3
 80051a2:	898b      	ldrh	r3, [r1, #12]
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	b09d      	sub	sp, #116	; 0x74
 80051a8:	4607      	mov	r7, r0
 80051aa:	460d      	mov	r5, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	d50e      	bpl.n	80051ce <_svfiprintf_r+0x32>
 80051b0:	690b      	ldr	r3, [r1, #16]
 80051b2:	b963      	cbnz	r3, 80051ce <_svfiprintf_r+0x32>
 80051b4:	2140      	movs	r1, #64	; 0x40
 80051b6:	f7ff ff0b 	bl	8004fd0 <_malloc_r>
 80051ba:	6028      	str	r0, [r5, #0]
 80051bc:	6128      	str	r0, [r5, #16]
 80051be:	b920      	cbnz	r0, 80051ca <_svfiprintf_r+0x2e>
 80051c0:	230c      	movs	r3, #12
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	e0d0      	b.n	800536c <_svfiprintf_r+0x1d0>
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	616b      	str	r3, [r5, #20]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9309      	str	r3, [sp, #36]	; 0x24
 80051d2:	2320      	movs	r3, #32
 80051d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005384 <_svfiprintf_r+0x1e8>
 80051e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051e6:	f04f 0901 	mov.w	r9, #1
 80051ea:	4623      	mov	r3, r4
 80051ec:	469a      	mov	sl, r3
 80051ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f2:	b10a      	cbz	r2, 80051f8 <_svfiprintf_r+0x5c>
 80051f4:	2a25      	cmp	r2, #37	; 0x25
 80051f6:	d1f9      	bne.n	80051ec <_svfiprintf_r+0x50>
 80051f8:	ebba 0b04 	subs.w	fp, sl, r4
 80051fc:	d00b      	beq.n	8005216 <_svfiprintf_r+0x7a>
 80051fe:	465b      	mov	r3, fp
 8005200:	4622      	mov	r2, r4
 8005202:	4629      	mov	r1, r5
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff ff6f 	bl	80050e8 <__ssputs_r>
 800520a:	3001      	adds	r0, #1
 800520c:	f000 80a9 	beq.w	8005362 <_svfiprintf_r+0x1c6>
 8005210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005212:	445a      	add	r2, fp
 8005214:	9209      	str	r2, [sp, #36]	; 0x24
 8005216:	f89a 3000 	ldrb.w	r3, [sl]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80a1 	beq.w	8005362 <_svfiprintf_r+0x1c6>
 8005220:	2300      	movs	r3, #0
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522a:	f10a 0a01 	add.w	sl, sl, #1
 800522e:	9304      	str	r3, [sp, #16]
 8005230:	9307      	str	r3, [sp, #28]
 8005232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005236:	931a      	str	r3, [sp, #104]	; 0x68
 8005238:	4654      	mov	r4, sl
 800523a:	2205      	movs	r2, #5
 800523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005240:	4850      	ldr	r0, [pc, #320]	; (8005384 <_svfiprintf_r+0x1e8>)
 8005242:	f7fa ffcd 	bl	80001e0 <memchr>
 8005246:	9a04      	ldr	r2, [sp, #16]
 8005248:	b9d8      	cbnz	r0, 8005282 <_svfiprintf_r+0xe6>
 800524a:	06d0      	lsls	r0, r2, #27
 800524c:	bf44      	itt	mi
 800524e:	2320      	movmi	r3, #32
 8005250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005254:	0711      	lsls	r1, r2, #28
 8005256:	bf44      	itt	mi
 8005258:	232b      	movmi	r3, #43	; 0x2b
 800525a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525e:	f89a 3000 	ldrb.w	r3, [sl]
 8005262:	2b2a      	cmp	r3, #42	; 0x2a
 8005264:	d015      	beq.n	8005292 <_svfiprintf_r+0xf6>
 8005266:	9a07      	ldr	r2, [sp, #28]
 8005268:	4654      	mov	r4, sl
 800526a:	2000      	movs	r0, #0
 800526c:	f04f 0c0a 	mov.w	ip, #10
 8005270:	4621      	mov	r1, r4
 8005272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005276:	3b30      	subs	r3, #48	; 0x30
 8005278:	2b09      	cmp	r3, #9
 800527a:	d94d      	bls.n	8005318 <_svfiprintf_r+0x17c>
 800527c:	b1b0      	cbz	r0, 80052ac <_svfiprintf_r+0x110>
 800527e:	9207      	str	r2, [sp, #28]
 8005280:	e014      	b.n	80052ac <_svfiprintf_r+0x110>
 8005282:	eba0 0308 	sub.w	r3, r0, r8
 8005286:	fa09 f303 	lsl.w	r3, r9, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	46a2      	mov	sl, r4
 8005290:	e7d2      	b.n	8005238 <_svfiprintf_r+0x9c>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	9103      	str	r1, [sp, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfbb      	ittet	lt
 800529e:	425b      	neglt	r3, r3
 80052a0:	f042 0202 	orrlt.w	r2, r2, #2
 80052a4:	9307      	strge	r3, [sp, #28]
 80052a6:	9307      	strlt	r3, [sp, #28]
 80052a8:	bfb8      	it	lt
 80052aa:	9204      	strlt	r2, [sp, #16]
 80052ac:	7823      	ldrb	r3, [r4, #0]
 80052ae:	2b2e      	cmp	r3, #46	; 0x2e
 80052b0:	d10c      	bne.n	80052cc <_svfiprintf_r+0x130>
 80052b2:	7863      	ldrb	r3, [r4, #1]
 80052b4:	2b2a      	cmp	r3, #42	; 0x2a
 80052b6:	d134      	bne.n	8005322 <_svfiprintf_r+0x186>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	1d1a      	adds	r2, r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	9203      	str	r2, [sp, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bfb8      	it	lt
 80052c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80052c8:	3402      	adds	r4, #2
 80052ca:	9305      	str	r3, [sp, #20]
 80052cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005394 <_svfiprintf_r+0x1f8>
 80052d0:	7821      	ldrb	r1, [r4, #0]
 80052d2:	2203      	movs	r2, #3
 80052d4:	4650      	mov	r0, sl
 80052d6:	f7fa ff83 	bl	80001e0 <memchr>
 80052da:	b138      	cbz	r0, 80052ec <_svfiprintf_r+0x150>
 80052dc:	9b04      	ldr	r3, [sp, #16]
 80052de:	eba0 000a 	sub.w	r0, r0, sl
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	4082      	lsls	r2, r0
 80052e6:	4313      	orrs	r3, r2
 80052e8:	3401      	adds	r4, #1
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	4825      	ldr	r0, [pc, #148]	; (8005388 <_svfiprintf_r+0x1ec>)
 80052f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f6:	2206      	movs	r2, #6
 80052f8:	f7fa ff72 	bl	80001e0 <memchr>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d038      	beq.n	8005372 <_svfiprintf_r+0x1d6>
 8005300:	4b22      	ldr	r3, [pc, #136]	; (800538c <_svfiprintf_r+0x1f0>)
 8005302:	bb1b      	cbnz	r3, 800534c <_svfiprintf_r+0x1b0>
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	3307      	adds	r3, #7
 8005308:	f023 0307 	bic.w	r3, r3, #7
 800530c:	3308      	adds	r3, #8
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	4433      	add	r3, r6
 8005314:	9309      	str	r3, [sp, #36]	; 0x24
 8005316:	e768      	b.n	80051ea <_svfiprintf_r+0x4e>
 8005318:	fb0c 3202 	mla	r2, ip, r2, r3
 800531c:	460c      	mov	r4, r1
 800531e:	2001      	movs	r0, #1
 8005320:	e7a6      	b.n	8005270 <_svfiprintf_r+0xd4>
 8005322:	2300      	movs	r3, #0
 8005324:	3401      	adds	r4, #1
 8005326:	9305      	str	r3, [sp, #20]
 8005328:	4619      	mov	r1, r3
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	4620      	mov	r0, r4
 8005330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005334:	3a30      	subs	r2, #48	; 0x30
 8005336:	2a09      	cmp	r2, #9
 8005338:	d903      	bls.n	8005342 <_svfiprintf_r+0x1a6>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0c6      	beq.n	80052cc <_svfiprintf_r+0x130>
 800533e:	9105      	str	r1, [sp, #20]
 8005340:	e7c4      	b.n	80052cc <_svfiprintf_r+0x130>
 8005342:	fb0c 2101 	mla	r1, ip, r1, r2
 8005346:	4604      	mov	r4, r0
 8005348:	2301      	movs	r3, #1
 800534a:	e7f0      	b.n	800532e <_svfiprintf_r+0x192>
 800534c:	ab03      	add	r3, sp, #12
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	462a      	mov	r2, r5
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <_svfiprintf_r+0x1f4>)
 8005354:	a904      	add	r1, sp, #16
 8005356:	4638      	mov	r0, r7
 8005358:	f3af 8000 	nop.w
 800535c:	1c42      	adds	r2, r0, #1
 800535e:	4606      	mov	r6, r0
 8005360:	d1d6      	bne.n	8005310 <_svfiprintf_r+0x174>
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	065b      	lsls	r3, r3, #25
 8005366:	f53f af2d 	bmi.w	80051c4 <_svfiprintf_r+0x28>
 800536a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800536c:	b01d      	add	sp, #116	; 0x74
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	ab03      	add	r3, sp, #12
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462a      	mov	r2, r5
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <_svfiprintf_r+0x1f4>)
 800537a:	a904      	add	r1, sp, #16
 800537c:	4638      	mov	r0, r7
 800537e:	f000 f9bd 	bl	80056fc <_printf_i>
 8005382:	e7eb      	b.n	800535c <_svfiprintf_r+0x1c0>
 8005384:	08005d54 	.word	0x08005d54
 8005388:	08005d5e 	.word	0x08005d5e
 800538c:	00000000 	.word	0x00000000
 8005390:	080050e9 	.word	0x080050e9
 8005394:	08005d5a 	.word	0x08005d5a

08005398 <__sfputc_r>:
 8005398:	6893      	ldr	r3, [r2, #8]
 800539a:	3b01      	subs	r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	b410      	push	{r4}
 80053a0:	6093      	str	r3, [r2, #8]
 80053a2:	da08      	bge.n	80053b6 <__sfputc_r+0x1e>
 80053a4:	6994      	ldr	r4, [r2, #24]
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	db01      	blt.n	80053ae <__sfputc_r+0x16>
 80053aa:	290a      	cmp	r1, #10
 80053ac:	d103      	bne.n	80053b6 <__sfputc_r+0x1e>
 80053ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b2:	f7ff bc88 	b.w	8004cc6 <__swbuf_r>
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	1c58      	adds	r0, r3, #1
 80053ba:	6010      	str	r0, [r2, #0]
 80053bc:	7019      	strb	r1, [r3, #0]
 80053be:	4608      	mov	r0, r1
 80053c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <__sfputs_r>:
 80053c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c8:	4606      	mov	r6, r0
 80053ca:	460f      	mov	r7, r1
 80053cc:	4614      	mov	r4, r2
 80053ce:	18d5      	adds	r5, r2, r3
 80053d0:	42ac      	cmp	r4, r5
 80053d2:	d101      	bne.n	80053d8 <__sfputs_r+0x12>
 80053d4:	2000      	movs	r0, #0
 80053d6:	e007      	b.n	80053e8 <__sfputs_r+0x22>
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	463a      	mov	r2, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	f7ff ffda 	bl	8005398 <__sfputc_r>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d1f3      	bne.n	80053d0 <__sfputs_r+0xa>
 80053e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053ec <_vfiprintf_r>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	460d      	mov	r5, r1
 80053f2:	b09d      	sub	sp, #116	; 0x74
 80053f4:	4614      	mov	r4, r2
 80053f6:	4698      	mov	r8, r3
 80053f8:	4606      	mov	r6, r0
 80053fa:	b118      	cbz	r0, 8005404 <_vfiprintf_r+0x18>
 80053fc:	6a03      	ldr	r3, [r0, #32]
 80053fe:	b90b      	cbnz	r3, 8005404 <_vfiprintf_r+0x18>
 8005400:	f7ff faac 	bl	800495c <__sinit>
 8005404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005406:	07d9      	lsls	r1, r3, #31
 8005408:	d405      	bmi.n	8005416 <_vfiprintf_r+0x2a>
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	059a      	lsls	r2, r3, #22
 800540e:	d402      	bmi.n	8005416 <_vfiprintf_r+0x2a>
 8005410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005412:	f7ff fd66 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	071b      	lsls	r3, r3, #28
 800541a:	d501      	bpl.n	8005420 <_vfiprintf_r+0x34>
 800541c:	692b      	ldr	r3, [r5, #16]
 800541e:	b99b      	cbnz	r3, 8005448 <_vfiprintf_r+0x5c>
 8005420:	4629      	mov	r1, r5
 8005422:	4630      	mov	r0, r6
 8005424:	f7ff fc8c 	bl	8004d40 <__swsetup_r>
 8005428:	b170      	cbz	r0, 8005448 <_vfiprintf_r+0x5c>
 800542a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800542c:	07dc      	lsls	r4, r3, #31
 800542e:	d504      	bpl.n	800543a <_vfiprintf_r+0x4e>
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	b01d      	add	sp, #116	; 0x74
 8005436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	0598      	lsls	r0, r3, #22
 800543e:	d4f7      	bmi.n	8005430 <_vfiprintf_r+0x44>
 8005440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005442:	f7ff fd4f 	bl	8004ee4 <__retarget_lock_release_recursive>
 8005446:	e7f3      	b.n	8005430 <_vfiprintf_r+0x44>
 8005448:	2300      	movs	r3, #0
 800544a:	9309      	str	r3, [sp, #36]	; 0x24
 800544c:	2320      	movs	r3, #32
 800544e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005452:	f8cd 800c 	str.w	r8, [sp, #12]
 8005456:	2330      	movs	r3, #48	; 0x30
 8005458:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800560c <_vfiprintf_r+0x220>
 800545c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005460:	f04f 0901 	mov.w	r9, #1
 8005464:	4623      	mov	r3, r4
 8005466:	469a      	mov	sl, r3
 8005468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800546c:	b10a      	cbz	r2, 8005472 <_vfiprintf_r+0x86>
 800546e:	2a25      	cmp	r2, #37	; 0x25
 8005470:	d1f9      	bne.n	8005466 <_vfiprintf_r+0x7a>
 8005472:	ebba 0b04 	subs.w	fp, sl, r4
 8005476:	d00b      	beq.n	8005490 <_vfiprintf_r+0xa4>
 8005478:	465b      	mov	r3, fp
 800547a:	4622      	mov	r2, r4
 800547c:	4629      	mov	r1, r5
 800547e:	4630      	mov	r0, r6
 8005480:	f7ff ffa1 	bl	80053c6 <__sfputs_r>
 8005484:	3001      	adds	r0, #1
 8005486:	f000 80a9 	beq.w	80055dc <_vfiprintf_r+0x1f0>
 800548a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800548c:	445a      	add	r2, fp
 800548e:	9209      	str	r2, [sp, #36]	; 0x24
 8005490:	f89a 3000 	ldrb.w	r3, [sl]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80a1 	beq.w	80055dc <_vfiprintf_r+0x1f0>
 800549a:	2300      	movs	r3, #0
 800549c:	f04f 32ff 	mov.w	r2, #4294967295
 80054a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054a4:	f10a 0a01 	add.w	sl, sl, #1
 80054a8:	9304      	str	r3, [sp, #16]
 80054aa:	9307      	str	r3, [sp, #28]
 80054ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054b0:	931a      	str	r3, [sp, #104]	; 0x68
 80054b2:	4654      	mov	r4, sl
 80054b4:	2205      	movs	r2, #5
 80054b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ba:	4854      	ldr	r0, [pc, #336]	; (800560c <_vfiprintf_r+0x220>)
 80054bc:	f7fa fe90 	bl	80001e0 <memchr>
 80054c0:	9a04      	ldr	r2, [sp, #16]
 80054c2:	b9d8      	cbnz	r0, 80054fc <_vfiprintf_r+0x110>
 80054c4:	06d1      	lsls	r1, r2, #27
 80054c6:	bf44      	itt	mi
 80054c8:	2320      	movmi	r3, #32
 80054ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ce:	0713      	lsls	r3, r2, #28
 80054d0:	bf44      	itt	mi
 80054d2:	232b      	movmi	r3, #43	; 0x2b
 80054d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054d8:	f89a 3000 	ldrb.w	r3, [sl]
 80054dc:	2b2a      	cmp	r3, #42	; 0x2a
 80054de:	d015      	beq.n	800550c <_vfiprintf_r+0x120>
 80054e0:	9a07      	ldr	r2, [sp, #28]
 80054e2:	4654      	mov	r4, sl
 80054e4:	2000      	movs	r0, #0
 80054e6:	f04f 0c0a 	mov.w	ip, #10
 80054ea:	4621      	mov	r1, r4
 80054ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f0:	3b30      	subs	r3, #48	; 0x30
 80054f2:	2b09      	cmp	r3, #9
 80054f4:	d94d      	bls.n	8005592 <_vfiprintf_r+0x1a6>
 80054f6:	b1b0      	cbz	r0, 8005526 <_vfiprintf_r+0x13a>
 80054f8:	9207      	str	r2, [sp, #28]
 80054fa:	e014      	b.n	8005526 <_vfiprintf_r+0x13a>
 80054fc:	eba0 0308 	sub.w	r3, r0, r8
 8005500:	fa09 f303 	lsl.w	r3, r9, r3
 8005504:	4313      	orrs	r3, r2
 8005506:	9304      	str	r3, [sp, #16]
 8005508:	46a2      	mov	sl, r4
 800550a:	e7d2      	b.n	80054b2 <_vfiprintf_r+0xc6>
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	1d19      	adds	r1, r3, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	9103      	str	r1, [sp, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	bfbb      	ittet	lt
 8005518:	425b      	neglt	r3, r3
 800551a:	f042 0202 	orrlt.w	r2, r2, #2
 800551e:	9307      	strge	r3, [sp, #28]
 8005520:	9307      	strlt	r3, [sp, #28]
 8005522:	bfb8      	it	lt
 8005524:	9204      	strlt	r2, [sp, #16]
 8005526:	7823      	ldrb	r3, [r4, #0]
 8005528:	2b2e      	cmp	r3, #46	; 0x2e
 800552a:	d10c      	bne.n	8005546 <_vfiprintf_r+0x15a>
 800552c:	7863      	ldrb	r3, [r4, #1]
 800552e:	2b2a      	cmp	r3, #42	; 0x2a
 8005530:	d134      	bne.n	800559c <_vfiprintf_r+0x1b0>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	1d1a      	adds	r2, r3, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	9203      	str	r2, [sp, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfb8      	it	lt
 800553e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005542:	3402      	adds	r4, #2
 8005544:	9305      	str	r3, [sp, #20]
 8005546:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800561c <_vfiprintf_r+0x230>
 800554a:	7821      	ldrb	r1, [r4, #0]
 800554c:	2203      	movs	r2, #3
 800554e:	4650      	mov	r0, sl
 8005550:	f7fa fe46 	bl	80001e0 <memchr>
 8005554:	b138      	cbz	r0, 8005566 <_vfiprintf_r+0x17a>
 8005556:	9b04      	ldr	r3, [sp, #16]
 8005558:	eba0 000a 	sub.w	r0, r0, sl
 800555c:	2240      	movs	r2, #64	; 0x40
 800555e:	4082      	lsls	r2, r0
 8005560:	4313      	orrs	r3, r2
 8005562:	3401      	adds	r4, #1
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556a:	4829      	ldr	r0, [pc, #164]	; (8005610 <_vfiprintf_r+0x224>)
 800556c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005570:	2206      	movs	r2, #6
 8005572:	f7fa fe35 	bl	80001e0 <memchr>
 8005576:	2800      	cmp	r0, #0
 8005578:	d03f      	beq.n	80055fa <_vfiprintf_r+0x20e>
 800557a:	4b26      	ldr	r3, [pc, #152]	; (8005614 <_vfiprintf_r+0x228>)
 800557c:	bb1b      	cbnz	r3, 80055c6 <_vfiprintf_r+0x1da>
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	3307      	adds	r3, #7
 8005582:	f023 0307 	bic.w	r3, r3, #7
 8005586:	3308      	adds	r3, #8
 8005588:	9303      	str	r3, [sp, #12]
 800558a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558c:	443b      	add	r3, r7
 800558e:	9309      	str	r3, [sp, #36]	; 0x24
 8005590:	e768      	b.n	8005464 <_vfiprintf_r+0x78>
 8005592:	fb0c 3202 	mla	r2, ip, r2, r3
 8005596:	460c      	mov	r4, r1
 8005598:	2001      	movs	r0, #1
 800559a:	e7a6      	b.n	80054ea <_vfiprintf_r+0xfe>
 800559c:	2300      	movs	r3, #0
 800559e:	3401      	adds	r4, #1
 80055a0:	9305      	str	r3, [sp, #20]
 80055a2:	4619      	mov	r1, r3
 80055a4:	f04f 0c0a 	mov.w	ip, #10
 80055a8:	4620      	mov	r0, r4
 80055aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ae:	3a30      	subs	r2, #48	; 0x30
 80055b0:	2a09      	cmp	r2, #9
 80055b2:	d903      	bls.n	80055bc <_vfiprintf_r+0x1d0>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0c6      	beq.n	8005546 <_vfiprintf_r+0x15a>
 80055b8:	9105      	str	r1, [sp, #20]
 80055ba:	e7c4      	b.n	8005546 <_vfiprintf_r+0x15a>
 80055bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80055c0:	4604      	mov	r4, r0
 80055c2:	2301      	movs	r3, #1
 80055c4:	e7f0      	b.n	80055a8 <_vfiprintf_r+0x1bc>
 80055c6:	ab03      	add	r3, sp, #12
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	462a      	mov	r2, r5
 80055cc:	4b12      	ldr	r3, [pc, #72]	; (8005618 <_vfiprintf_r+0x22c>)
 80055ce:	a904      	add	r1, sp, #16
 80055d0:	4630      	mov	r0, r6
 80055d2:	f3af 8000 	nop.w
 80055d6:	4607      	mov	r7, r0
 80055d8:	1c78      	adds	r0, r7, #1
 80055da:	d1d6      	bne.n	800558a <_vfiprintf_r+0x19e>
 80055dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055de:	07d9      	lsls	r1, r3, #31
 80055e0:	d405      	bmi.n	80055ee <_vfiprintf_r+0x202>
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	059a      	lsls	r2, r3, #22
 80055e6:	d402      	bmi.n	80055ee <_vfiprintf_r+0x202>
 80055e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ea:	f7ff fc7b 	bl	8004ee4 <__retarget_lock_release_recursive>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	065b      	lsls	r3, r3, #25
 80055f2:	f53f af1d 	bmi.w	8005430 <_vfiprintf_r+0x44>
 80055f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055f8:	e71c      	b.n	8005434 <_vfiprintf_r+0x48>
 80055fa:	ab03      	add	r3, sp, #12
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	462a      	mov	r2, r5
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <_vfiprintf_r+0x22c>)
 8005602:	a904      	add	r1, sp, #16
 8005604:	4630      	mov	r0, r6
 8005606:	f000 f879 	bl	80056fc <_printf_i>
 800560a:	e7e4      	b.n	80055d6 <_vfiprintf_r+0x1ea>
 800560c:	08005d54 	.word	0x08005d54
 8005610:	08005d5e 	.word	0x08005d5e
 8005614:	00000000 	.word	0x00000000
 8005618:	080053c7 	.word	0x080053c7
 800561c:	08005d5a 	.word	0x08005d5a

08005620 <_printf_common>:
 8005620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	4616      	mov	r6, r2
 8005626:	4699      	mov	r9, r3
 8005628:	688a      	ldr	r2, [r1, #8]
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005630:	4293      	cmp	r3, r2
 8005632:	bfb8      	it	lt
 8005634:	4613      	movlt	r3, r2
 8005636:	6033      	str	r3, [r6, #0]
 8005638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800563c:	4607      	mov	r7, r0
 800563e:	460c      	mov	r4, r1
 8005640:	b10a      	cbz	r2, 8005646 <_printf_common+0x26>
 8005642:	3301      	adds	r3, #1
 8005644:	6033      	str	r3, [r6, #0]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	0699      	lsls	r1, r3, #26
 800564a:	bf42      	ittt	mi
 800564c:	6833      	ldrmi	r3, [r6, #0]
 800564e:	3302      	addmi	r3, #2
 8005650:	6033      	strmi	r3, [r6, #0]
 8005652:	6825      	ldr	r5, [r4, #0]
 8005654:	f015 0506 	ands.w	r5, r5, #6
 8005658:	d106      	bne.n	8005668 <_printf_common+0x48>
 800565a:	f104 0a19 	add.w	sl, r4, #25
 800565e:	68e3      	ldr	r3, [r4, #12]
 8005660:	6832      	ldr	r2, [r6, #0]
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	42ab      	cmp	r3, r5
 8005666:	dc26      	bgt.n	80056b6 <_printf_common+0x96>
 8005668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800566c:	1e13      	subs	r3, r2, #0
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	bf18      	it	ne
 8005672:	2301      	movne	r3, #1
 8005674:	0692      	lsls	r2, r2, #26
 8005676:	d42b      	bmi.n	80056d0 <_printf_common+0xb0>
 8005678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800567c:	4649      	mov	r1, r9
 800567e:	4638      	mov	r0, r7
 8005680:	47c0      	blx	r8
 8005682:	3001      	adds	r0, #1
 8005684:	d01e      	beq.n	80056c4 <_printf_common+0xa4>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	6922      	ldr	r2, [r4, #16]
 800568a:	f003 0306 	and.w	r3, r3, #6
 800568e:	2b04      	cmp	r3, #4
 8005690:	bf02      	ittt	eq
 8005692:	68e5      	ldreq	r5, [r4, #12]
 8005694:	6833      	ldreq	r3, [r6, #0]
 8005696:	1aed      	subeq	r5, r5, r3
 8005698:	68a3      	ldr	r3, [r4, #8]
 800569a:	bf0c      	ite	eq
 800569c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a0:	2500      	movne	r5, #0
 80056a2:	4293      	cmp	r3, r2
 80056a4:	bfc4      	itt	gt
 80056a6:	1a9b      	subgt	r3, r3, r2
 80056a8:	18ed      	addgt	r5, r5, r3
 80056aa:	2600      	movs	r6, #0
 80056ac:	341a      	adds	r4, #26
 80056ae:	42b5      	cmp	r5, r6
 80056b0:	d11a      	bne.n	80056e8 <_printf_common+0xc8>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e008      	b.n	80056c8 <_printf_common+0xa8>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4652      	mov	r2, sl
 80056ba:	4649      	mov	r1, r9
 80056bc:	4638      	mov	r0, r7
 80056be:	47c0      	blx	r8
 80056c0:	3001      	adds	r0, #1
 80056c2:	d103      	bne.n	80056cc <_printf_common+0xac>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	3501      	adds	r5, #1
 80056ce:	e7c6      	b.n	800565e <_printf_common+0x3e>
 80056d0:	18e1      	adds	r1, r4, r3
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	2030      	movs	r0, #48	; 0x30
 80056d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056da:	4422      	add	r2, r4
 80056dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e4:	3302      	adds	r3, #2
 80056e6:	e7c7      	b.n	8005678 <_printf_common+0x58>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4622      	mov	r2, r4
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d0e6      	beq.n	80056c4 <_printf_common+0xa4>
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7d9      	b.n	80056ae <_printf_common+0x8e>
	...

080056fc <_printf_i>:
 80056fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	7e0f      	ldrb	r7, [r1, #24]
 8005702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005704:	2f78      	cmp	r7, #120	; 0x78
 8005706:	4691      	mov	r9, r2
 8005708:	4680      	mov	r8, r0
 800570a:	460c      	mov	r4, r1
 800570c:	469a      	mov	sl, r3
 800570e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005712:	d807      	bhi.n	8005724 <_printf_i+0x28>
 8005714:	2f62      	cmp	r7, #98	; 0x62
 8005716:	d80a      	bhi.n	800572e <_printf_i+0x32>
 8005718:	2f00      	cmp	r7, #0
 800571a:	f000 80d4 	beq.w	80058c6 <_printf_i+0x1ca>
 800571e:	2f58      	cmp	r7, #88	; 0x58
 8005720:	f000 80c0 	beq.w	80058a4 <_printf_i+0x1a8>
 8005724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800572c:	e03a      	b.n	80057a4 <_printf_i+0xa8>
 800572e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005732:	2b15      	cmp	r3, #21
 8005734:	d8f6      	bhi.n	8005724 <_printf_i+0x28>
 8005736:	a101      	add	r1, pc, #4	; (adr r1, 800573c <_printf_i+0x40>)
 8005738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800573c:	08005795 	.word	0x08005795
 8005740:	080057a9 	.word	0x080057a9
 8005744:	08005725 	.word	0x08005725
 8005748:	08005725 	.word	0x08005725
 800574c:	08005725 	.word	0x08005725
 8005750:	08005725 	.word	0x08005725
 8005754:	080057a9 	.word	0x080057a9
 8005758:	08005725 	.word	0x08005725
 800575c:	08005725 	.word	0x08005725
 8005760:	08005725 	.word	0x08005725
 8005764:	08005725 	.word	0x08005725
 8005768:	080058ad 	.word	0x080058ad
 800576c:	080057d5 	.word	0x080057d5
 8005770:	08005867 	.word	0x08005867
 8005774:	08005725 	.word	0x08005725
 8005778:	08005725 	.word	0x08005725
 800577c:	080058cf 	.word	0x080058cf
 8005780:	08005725 	.word	0x08005725
 8005784:	080057d5 	.word	0x080057d5
 8005788:	08005725 	.word	0x08005725
 800578c:	08005725 	.word	0x08005725
 8005790:	0800586f 	.word	0x0800586f
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a4:	2301      	movs	r3, #1
 80057a6:	e09f      	b.n	80058e8 <_printf_i+0x1ec>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	682b      	ldr	r3, [r5, #0]
 80057ac:	0607      	lsls	r7, r0, #24
 80057ae:	f103 0104 	add.w	r1, r3, #4
 80057b2:	6029      	str	r1, [r5, #0]
 80057b4:	d501      	bpl.n	80057ba <_printf_i+0xbe>
 80057b6:	681e      	ldr	r6, [r3, #0]
 80057b8:	e003      	b.n	80057c2 <_printf_i+0xc6>
 80057ba:	0646      	lsls	r6, r0, #25
 80057bc:	d5fb      	bpl.n	80057b6 <_printf_i+0xba>
 80057be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	da03      	bge.n	80057ce <_printf_i+0xd2>
 80057c6:	232d      	movs	r3, #45	; 0x2d
 80057c8:	4276      	negs	r6, r6
 80057ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ce:	485a      	ldr	r0, [pc, #360]	; (8005938 <_printf_i+0x23c>)
 80057d0:	230a      	movs	r3, #10
 80057d2:	e012      	b.n	80057fa <_printf_i+0xfe>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	6820      	ldr	r0, [r4, #0]
 80057d8:	1d19      	adds	r1, r3, #4
 80057da:	6029      	str	r1, [r5, #0]
 80057dc:	0605      	lsls	r5, r0, #24
 80057de:	d501      	bpl.n	80057e4 <_printf_i+0xe8>
 80057e0:	681e      	ldr	r6, [r3, #0]
 80057e2:	e002      	b.n	80057ea <_printf_i+0xee>
 80057e4:	0641      	lsls	r1, r0, #25
 80057e6:	d5fb      	bpl.n	80057e0 <_printf_i+0xe4>
 80057e8:	881e      	ldrh	r6, [r3, #0]
 80057ea:	4853      	ldr	r0, [pc, #332]	; (8005938 <_printf_i+0x23c>)
 80057ec:	2f6f      	cmp	r7, #111	; 0x6f
 80057ee:	bf0c      	ite	eq
 80057f0:	2308      	moveq	r3, #8
 80057f2:	230a      	movne	r3, #10
 80057f4:	2100      	movs	r1, #0
 80057f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fa:	6865      	ldr	r5, [r4, #4]
 80057fc:	60a5      	str	r5, [r4, #8]
 80057fe:	2d00      	cmp	r5, #0
 8005800:	bfa2      	ittt	ge
 8005802:	6821      	ldrge	r1, [r4, #0]
 8005804:	f021 0104 	bicge.w	r1, r1, #4
 8005808:	6021      	strge	r1, [r4, #0]
 800580a:	b90e      	cbnz	r6, 8005810 <_printf_i+0x114>
 800580c:	2d00      	cmp	r5, #0
 800580e:	d04b      	beq.n	80058a8 <_printf_i+0x1ac>
 8005810:	4615      	mov	r5, r2
 8005812:	fbb6 f1f3 	udiv	r1, r6, r3
 8005816:	fb03 6711 	mls	r7, r3, r1, r6
 800581a:	5dc7      	ldrb	r7, [r0, r7]
 800581c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005820:	4637      	mov	r7, r6
 8005822:	42bb      	cmp	r3, r7
 8005824:	460e      	mov	r6, r1
 8005826:	d9f4      	bls.n	8005812 <_printf_i+0x116>
 8005828:	2b08      	cmp	r3, #8
 800582a:	d10b      	bne.n	8005844 <_printf_i+0x148>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	07de      	lsls	r6, r3, #31
 8005830:	d508      	bpl.n	8005844 <_printf_i+0x148>
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	6861      	ldr	r1, [r4, #4]
 8005836:	4299      	cmp	r1, r3
 8005838:	bfde      	ittt	le
 800583a:	2330      	movle	r3, #48	; 0x30
 800583c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005844:	1b52      	subs	r2, r2, r5
 8005846:	6122      	str	r2, [r4, #16]
 8005848:	f8cd a000 	str.w	sl, [sp]
 800584c:	464b      	mov	r3, r9
 800584e:	aa03      	add	r2, sp, #12
 8005850:	4621      	mov	r1, r4
 8005852:	4640      	mov	r0, r8
 8005854:	f7ff fee4 	bl	8005620 <_printf_common>
 8005858:	3001      	adds	r0, #1
 800585a:	d14a      	bne.n	80058f2 <_printf_i+0x1f6>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	b004      	add	sp, #16
 8005862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	f043 0320 	orr.w	r3, r3, #32
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	4833      	ldr	r0, [pc, #204]	; (800593c <_printf_i+0x240>)
 8005870:	2778      	movs	r7, #120	; 0x78
 8005872:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	6829      	ldr	r1, [r5, #0]
 800587a:	061f      	lsls	r7, r3, #24
 800587c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005880:	d402      	bmi.n	8005888 <_printf_i+0x18c>
 8005882:	065f      	lsls	r7, r3, #25
 8005884:	bf48      	it	mi
 8005886:	b2b6      	uxthmi	r6, r6
 8005888:	07df      	lsls	r7, r3, #31
 800588a:	bf48      	it	mi
 800588c:	f043 0320 	orrmi.w	r3, r3, #32
 8005890:	6029      	str	r1, [r5, #0]
 8005892:	bf48      	it	mi
 8005894:	6023      	strmi	r3, [r4, #0]
 8005896:	b91e      	cbnz	r6, 80058a0 <_printf_i+0x1a4>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	f023 0320 	bic.w	r3, r3, #32
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	2310      	movs	r3, #16
 80058a2:	e7a7      	b.n	80057f4 <_printf_i+0xf8>
 80058a4:	4824      	ldr	r0, [pc, #144]	; (8005938 <_printf_i+0x23c>)
 80058a6:	e7e4      	b.n	8005872 <_printf_i+0x176>
 80058a8:	4615      	mov	r5, r2
 80058aa:	e7bd      	b.n	8005828 <_printf_i+0x12c>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	6826      	ldr	r6, [r4, #0]
 80058b0:	6961      	ldr	r1, [r4, #20]
 80058b2:	1d18      	adds	r0, r3, #4
 80058b4:	6028      	str	r0, [r5, #0]
 80058b6:	0635      	lsls	r5, r6, #24
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	d501      	bpl.n	80058c0 <_printf_i+0x1c4>
 80058bc:	6019      	str	r1, [r3, #0]
 80058be:	e002      	b.n	80058c6 <_printf_i+0x1ca>
 80058c0:	0670      	lsls	r0, r6, #25
 80058c2:	d5fb      	bpl.n	80058bc <_printf_i+0x1c0>
 80058c4:	8019      	strh	r1, [r3, #0]
 80058c6:	2300      	movs	r3, #0
 80058c8:	6123      	str	r3, [r4, #16]
 80058ca:	4615      	mov	r5, r2
 80058cc:	e7bc      	b.n	8005848 <_printf_i+0x14c>
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	1d1a      	adds	r2, r3, #4
 80058d2:	602a      	str	r2, [r5, #0]
 80058d4:	681d      	ldr	r5, [r3, #0]
 80058d6:	6862      	ldr	r2, [r4, #4]
 80058d8:	2100      	movs	r1, #0
 80058da:	4628      	mov	r0, r5
 80058dc:	f7fa fc80 	bl	80001e0 <memchr>
 80058e0:	b108      	cbz	r0, 80058e6 <_printf_i+0x1ea>
 80058e2:	1b40      	subs	r0, r0, r5
 80058e4:	6060      	str	r0, [r4, #4]
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	6123      	str	r3, [r4, #16]
 80058ea:	2300      	movs	r3, #0
 80058ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f0:	e7aa      	b.n	8005848 <_printf_i+0x14c>
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	462a      	mov	r2, r5
 80058f6:	4649      	mov	r1, r9
 80058f8:	4640      	mov	r0, r8
 80058fa:	47d0      	blx	sl
 80058fc:	3001      	adds	r0, #1
 80058fe:	d0ad      	beq.n	800585c <_printf_i+0x160>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	079b      	lsls	r3, r3, #30
 8005904:	d413      	bmi.n	800592e <_printf_i+0x232>
 8005906:	68e0      	ldr	r0, [r4, #12]
 8005908:	9b03      	ldr	r3, [sp, #12]
 800590a:	4298      	cmp	r0, r3
 800590c:	bfb8      	it	lt
 800590e:	4618      	movlt	r0, r3
 8005910:	e7a6      	b.n	8005860 <_printf_i+0x164>
 8005912:	2301      	movs	r3, #1
 8005914:	4632      	mov	r2, r6
 8005916:	4649      	mov	r1, r9
 8005918:	4640      	mov	r0, r8
 800591a:	47d0      	blx	sl
 800591c:	3001      	adds	r0, #1
 800591e:	d09d      	beq.n	800585c <_printf_i+0x160>
 8005920:	3501      	adds	r5, #1
 8005922:	68e3      	ldr	r3, [r4, #12]
 8005924:	9903      	ldr	r1, [sp, #12]
 8005926:	1a5b      	subs	r3, r3, r1
 8005928:	42ab      	cmp	r3, r5
 800592a:	dcf2      	bgt.n	8005912 <_printf_i+0x216>
 800592c:	e7eb      	b.n	8005906 <_printf_i+0x20a>
 800592e:	2500      	movs	r5, #0
 8005930:	f104 0619 	add.w	r6, r4, #25
 8005934:	e7f5      	b.n	8005922 <_printf_i+0x226>
 8005936:	bf00      	nop
 8005938:	08005d65 	.word	0x08005d65
 800593c:	08005d76 	.word	0x08005d76

08005940 <__sflush_r>:
 8005940:	898a      	ldrh	r2, [r1, #12]
 8005942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005946:	4605      	mov	r5, r0
 8005948:	0710      	lsls	r0, r2, #28
 800594a:	460c      	mov	r4, r1
 800594c:	d458      	bmi.n	8005a00 <__sflush_r+0xc0>
 800594e:	684b      	ldr	r3, [r1, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	dc05      	bgt.n	8005960 <__sflush_r+0x20>
 8005954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	dc02      	bgt.n	8005960 <__sflush_r+0x20>
 800595a:	2000      	movs	r0, #0
 800595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005962:	2e00      	cmp	r6, #0
 8005964:	d0f9      	beq.n	800595a <__sflush_r+0x1a>
 8005966:	2300      	movs	r3, #0
 8005968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800596c:	682f      	ldr	r7, [r5, #0]
 800596e:	6a21      	ldr	r1, [r4, #32]
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	d032      	beq.n	80059da <__sflush_r+0x9a>
 8005974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	075a      	lsls	r2, r3, #29
 800597a:	d505      	bpl.n	8005988 <__sflush_r+0x48>
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	1ac0      	subs	r0, r0, r3
 8005980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005982:	b10b      	cbz	r3, 8005988 <__sflush_r+0x48>
 8005984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005986:	1ac0      	subs	r0, r0, r3
 8005988:	2300      	movs	r3, #0
 800598a:	4602      	mov	r2, r0
 800598c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800598e:	6a21      	ldr	r1, [r4, #32]
 8005990:	4628      	mov	r0, r5
 8005992:	47b0      	blx	r6
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	d106      	bne.n	80059a8 <__sflush_r+0x68>
 800599a:	6829      	ldr	r1, [r5, #0]
 800599c:	291d      	cmp	r1, #29
 800599e:	d82b      	bhi.n	80059f8 <__sflush_r+0xb8>
 80059a0:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <__sflush_r+0x108>)
 80059a2:	410a      	asrs	r2, r1
 80059a4:	07d6      	lsls	r6, r2, #31
 80059a6:	d427      	bmi.n	80059f8 <__sflush_r+0xb8>
 80059a8:	2200      	movs	r2, #0
 80059aa:	6062      	str	r2, [r4, #4]
 80059ac:	04d9      	lsls	r1, r3, #19
 80059ae:	6922      	ldr	r2, [r4, #16]
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	d504      	bpl.n	80059be <__sflush_r+0x7e>
 80059b4:	1c42      	adds	r2, r0, #1
 80059b6:	d101      	bne.n	80059bc <__sflush_r+0x7c>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b903      	cbnz	r3, 80059be <__sflush_r+0x7e>
 80059bc:	6560      	str	r0, [r4, #84]	; 0x54
 80059be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059c0:	602f      	str	r7, [r5, #0]
 80059c2:	2900      	cmp	r1, #0
 80059c4:	d0c9      	beq.n	800595a <__sflush_r+0x1a>
 80059c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059ca:	4299      	cmp	r1, r3
 80059cc:	d002      	beq.n	80059d4 <__sflush_r+0x94>
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7ff fa8a 	bl	8004ee8 <_free_r>
 80059d4:	2000      	movs	r0, #0
 80059d6:	6360      	str	r0, [r4, #52]	; 0x34
 80059d8:	e7c0      	b.n	800595c <__sflush_r+0x1c>
 80059da:	2301      	movs	r3, #1
 80059dc:	4628      	mov	r0, r5
 80059de:	47b0      	blx	r6
 80059e0:	1c41      	adds	r1, r0, #1
 80059e2:	d1c8      	bne.n	8005976 <__sflush_r+0x36>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0c5      	beq.n	8005976 <__sflush_r+0x36>
 80059ea:	2b1d      	cmp	r3, #29
 80059ec:	d001      	beq.n	80059f2 <__sflush_r+0xb2>
 80059ee:	2b16      	cmp	r3, #22
 80059f0:	d101      	bne.n	80059f6 <__sflush_r+0xb6>
 80059f2:	602f      	str	r7, [r5, #0]
 80059f4:	e7b1      	b.n	800595a <__sflush_r+0x1a>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059fc:	81a3      	strh	r3, [r4, #12]
 80059fe:	e7ad      	b.n	800595c <__sflush_r+0x1c>
 8005a00:	690f      	ldr	r7, [r1, #16]
 8005a02:	2f00      	cmp	r7, #0
 8005a04:	d0a9      	beq.n	800595a <__sflush_r+0x1a>
 8005a06:	0793      	lsls	r3, r2, #30
 8005a08:	680e      	ldr	r6, [r1, #0]
 8005a0a:	bf08      	it	eq
 8005a0c:	694b      	ldreq	r3, [r1, #20]
 8005a0e:	600f      	str	r7, [r1, #0]
 8005a10:	bf18      	it	ne
 8005a12:	2300      	movne	r3, #0
 8005a14:	eba6 0807 	sub.w	r8, r6, r7
 8005a18:	608b      	str	r3, [r1, #8]
 8005a1a:	f1b8 0f00 	cmp.w	r8, #0
 8005a1e:	dd9c      	ble.n	800595a <__sflush_r+0x1a>
 8005a20:	6a21      	ldr	r1, [r4, #32]
 8005a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a24:	4643      	mov	r3, r8
 8005a26:	463a      	mov	r2, r7
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b0      	blx	r6
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	dc06      	bgt.n	8005a3e <__sflush_r+0xfe>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a36:	81a3      	strh	r3, [r4, #12]
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	e78e      	b.n	800595c <__sflush_r+0x1c>
 8005a3e:	4407      	add	r7, r0
 8005a40:	eba8 0800 	sub.w	r8, r8, r0
 8005a44:	e7e9      	b.n	8005a1a <__sflush_r+0xda>
 8005a46:	bf00      	nop
 8005a48:	dfbffffe 	.word	0xdfbffffe

08005a4c <_fflush_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	690b      	ldr	r3, [r1, #16]
 8005a50:	4605      	mov	r5, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	b913      	cbnz	r3, 8005a5c <_fflush_r+0x10>
 8005a56:	2500      	movs	r5, #0
 8005a58:	4628      	mov	r0, r5
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	b118      	cbz	r0, 8005a66 <_fflush_r+0x1a>
 8005a5e:	6a03      	ldr	r3, [r0, #32]
 8005a60:	b90b      	cbnz	r3, 8005a66 <_fflush_r+0x1a>
 8005a62:	f7fe ff7b 	bl	800495c <__sinit>
 8005a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f3      	beq.n	8005a56 <_fflush_r+0xa>
 8005a6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a70:	07d0      	lsls	r0, r2, #31
 8005a72:	d404      	bmi.n	8005a7e <_fflush_r+0x32>
 8005a74:	0599      	lsls	r1, r3, #22
 8005a76:	d402      	bmi.n	8005a7e <_fflush_r+0x32>
 8005a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a7a:	f7ff fa32 	bl	8004ee2 <__retarget_lock_acquire_recursive>
 8005a7e:	4628      	mov	r0, r5
 8005a80:	4621      	mov	r1, r4
 8005a82:	f7ff ff5d 	bl	8005940 <__sflush_r>
 8005a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a88:	07da      	lsls	r2, r3, #31
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	d4e4      	bmi.n	8005a58 <_fflush_r+0xc>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	059b      	lsls	r3, r3, #22
 8005a92:	d4e1      	bmi.n	8005a58 <_fflush_r+0xc>
 8005a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a96:	f7ff fa25 	bl	8004ee4 <__retarget_lock_release_recursive>
 8005a9a:	e7dd      	b.n	8005a58 <_fflush_r+0xc>

08005a9c <__swhatbuf_r>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa4:	2900      	cmp	r1, #0
 8005aa6:	b096      	sub	sp, #88	; 0x58
 8005aa8:	4615      	mov	r5, r2
 8005aaa:	461e      	mov	r6, r3
 8005aac:	da0d      	bge.n	8005aca <__swhatbuf_r+0x2e>
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ab4:	f04f 0100 	mov.w	r1, #0
 8005ab8:	bf0c      	ite	eq
 8005aba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005abe:	2340      	movne	r3, #64	; 0x40
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	6031      	str	r1, [r6, #0]
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	b016      	add	sp, #88	; 0x58
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
 8005aca:	466a      	mov	r2, sp
 8005acc:	f000 f862 	bl	8005b94 <_fstat_r>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	dbec      	blt.n	8005aae <__swhatbuf_r+0x12>
 8005ad4:	9901      	ldr	r1, [sp, #4]
 8005ad6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ada:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ade:	4259      	negs	r1, r3
 8005ae0:	4159      	adcs	r1, r3
 8005ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ae6:	e7eb      	b.n	8005ac0 <__swhatbuf_r+0x24>

08005ae8 <__smakebuf_r>:
 8005ae8:	898b      	ldrh	r3, [r1, #12]
 8005aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005aec:	079d      	lsls	r5, r3, #30
 8005aee:	4606      	mov	r6, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	d507      	bpl.n	8005b04 <__smakebuf_r+0x1c>
 8005af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	2301      	movs	r3, #1
 8005afe:	6163      	str	r3, [r4, #20]
 8005b00:	b002      	add	sp, #8
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	ab01      	add	r3, sp, #4
 8005b06:	466a      	mov	r2, sp
 8005b08:	f7ff ffc8 	bl	8005a9c <__swhatbuf_r>
 8005b0c:	9900      	ldr	r1, [sp, #0]
 8005b0e:	4605      	mov	r5, r0
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff fa5d 	bl	8004fd0 <_malloc_r>
 8005b16:	b948      	cbnz	r0, 8005b2c <__smakebuf_r+0x44>
 8005b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b1c:	059a      	lsls	r2, r3, #22
 8005b1e:	d4ef      	bmi.n	8005b00 <__smakebuf_r+0x18>
 8005b20:	f023 0303 	bic.w	r3, r3, #3
 8005b24:	f043 0302 	orr.w	r3, r3, #2
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	e7e3      	b.n	8005af4 <__smakebuf_r+0xc>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	6020      	str	r0, [r4, #0]
 8005b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b34:	81a3      	strh	r3, [r4, #12]
 8005b36:	9b00      	ldr	r3, [sp, #0]
 8005b38:	6163      	str	r3, [r4, #20]
 8005b3a:	9b01      	ldr	r3, [sp, #4]
 8005b3c:	6120      	str	r0, [r4, #16]
 8005b3e:	b15b      	cbz	r3, 8005b58 <__smakebuf_r+0x70>
 8005b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b44:	4630      	mov	r0, r6
 8005b46:	f000 f837 	bl	8005bb8 <_isatty_r>
 8005b4a:	b128      	cbz	r0, 8005b58 <__smakebuf_r+0x70>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	431d      	orrs	r5, r3
 8005b5c:	81a5      	strh	r5, [r4, #12]
 8005b5e:	e7cf      	b.n	8005b00 <__smakebuf_r+0x18>

08005b60 <memmove>:
 8005b60:	4288      	cmp	r0, r1
 8005b62:	b510      	push	{r4, lr}
 8005b64:	eb01 0402 	add.w	r4, r1, r2
 8005b68:	d902      	bls.n	8005b70 <memmove+0x10>
 8005b6a:	4284      	cmp	r4, r0
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	d807      	bhi.n	8005b80 <memmove+0x20>
 8005b70:	1e43      	subs	r3, r0, #1
 8005b72:	42a1      	cmp	r1, r4
 8005b74:	d008      	beq.n	8005b88 <memmove+0x28>
 8005b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b7e:	e7f8      	b.n	8005b72 <memmove+0x12>
 8005b80:	4402      	add	r2, r0
 8005b82:	4601      	mov	r1, r0
 8005b84:	428a      	cmp	r2, r1
 8005b86:	d100      	bne.n	8005b8a <memmove+0x2a>
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b92:	e7f7      	b.n	8005b84 <memmove+0x24>

08005b94 <_fstat_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d07      	ldr	r5, [pc, #28]	; (8005bb4 <_fstat_r+0x20>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	f7fb faaa 	bl	80010fa <_fstat>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d102      	bne.n	8005bb0 <_fstat_r+0x1c>
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	b103      	cbz	r3, 8005bb0 <_fstat_r+0x1c>
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000304 	.word	0x20000304

08005bb8 <_isatty_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d06      	ldr	r5, [pc, #24]	; (8005bd4 <_isatty_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fb faa9 	bl	800111a <_isatty>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_isatty_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_isatty_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000304 	.word	0x20000304

08005bd8 <_sbrk_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d06      	ldr	r5, [pc, #24]	; (8005bf4 <_sbrk_r+0x1c>)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f7fb fab2 	bl	800114c <_sbrk>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_sbrk_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_sbrk_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000304 	.word	0x20000304

08005bf8 <memcpy>:
 8005bf8:	440a      	add	r2, r1
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c00:	d100      	bne.n	8005c04 <memcpy+0xc>
 8005c02:	4770      	bx	lr
 8005c04:	b510      	push	{r4, lr}
 8005c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c0e:	4291      	cmp	r1, r2
 8005c10:	d1f9      	bne.n	8005c06 <memcpy+0xe>
 8005c12:	bd10      	pop	{r4, pc}

08005c14 <_realloc_r>:
 8005c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c18:	4680      	mov	r8, r0
 8005c1a:	4614      	mov	r4, r2
 8005c1c:	460e      	mov	r6, r1
 8005c1e:	b921      	cbnz	r1, 8005c2a <_realloc_r+0x16>
 8005c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c24:	4611      	mov	r1, r2
 8005c26:	f7ff b9d3 	b.w	8004fd0 <_malloc_r>
 8005c2a:	b92a      	cbnz	r2, 8005c38 <_realloc_r+0x24>
 8005c2c:	f7ff f95c 	bl	8004ee8 <_free_r>
 8005c30:	4625      	mov	r5, r4
 8005c32:	4628      	mov	r0, r5
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	f000 f81b 	bl	8005c72 <_malloc_usable_size_r>
 8005c3c:	4284      	cmp	r4, r0
 8005c3e:	4607      	mov	r7, r0
 8005c40:	d802      	bhi.n	8005c48 <_realloc_r+0x34>
 8005c42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c46:	d812      	bhi.n	8005c6e <_realloc_r+0x5a>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	f7ff f9c0 	bl	8004fd0 <_malloc_r>
 8005c50:	4605      	mov	r5, r0
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d0ed      	beq.n	8005c32 <_realloc_r+0x1e>
 8005c56:	42bc      	cmp	r4, r7
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	bf28      	it	cs
 8005c5e:	463a      	movcs	r2, r7
 8005c60:	f7ff ffca 	bl	8005bf8 <memcpy>
 8005c64:	4631      	mov	r1, r6
 8005c66:	4640      	mov	r0, r8
 8005c68:	f7ff f93e 	bl	8004ee8 <_free_r>
 8005c6c:	e7e1      	b.n	8005c32 <_realloc_r+0x1e>
 8005c6e:	4635      	mov	r5, r6
 8005c70:	e7df      	b.n	8005c32 <_realloc_r+0x1e>

08005c72 <_malloc_usable_size_r>:
 8005c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c76:	1f18      	subs	r0, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bfbc      	itt	lt
 8005c7c:	580b      	ldrlt	r3, [r1, r0]
 8005c7e:	18c0      	addlt	r0, r0, r3
 8005c80:	4770      	bx	lr
	...

08005c84 <_init>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr

08005c90 <_fini>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr
